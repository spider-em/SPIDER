; RUNS CORRESPONDENCE ANALYSIS OR PRINCIPAL COMPONENT ANALYSIS

; NOTES: 
;   uses Python script eigendoc.py (jsl & trs)

; ---------------- Parameters ----------------

[use_filt_imgs]   = -1    ; use low-pass filtered images? (1==YES, 0==NO, -1==If_Available)
[num_factors]     = 27    ; number of factors to calculate
[cas_option]      = 1     ; correspondence analysis (1), PCA (2), IPCA (3)
[reconst_coeffs]  = 0     ; coefficients for reconstituted images, in multiples of st.dev. (0 == min & max)
                          ; (for example, if 2, then reconstituted images will be at -2*stdev and +2*stdev)
[part_radius]     = -1    ; particle radius (pixels, used if no custom mask, <0==IDIM/2)
[add_constant]    = 0     ; additive constant if using correspondence analysis (0 == Automatic)
[factormap_range] = 3.0   ; range in factor map, as a multiple of st.dev. (0 == don't generate)
                          ; (SPIDER sometimes crashes if this number is too small)
[num_cpus]        = 0     ; number of CPUs to use (0 == All)

; ------------------ Inputs ------------------

[selection_doc]   = 'listparticles'          ; selection doc file
[custom_mask]     = 'stkmask@4'              ; (optional) custom mask

; Aligned images (will set [particles])
[fullsized_stack] = 'Zerodegr/stk3-aligned'  ; unfiltered-particle stack (w/o "@", see option [filteredImgsYN])
[filtered_stack]  = 'Zerodegr/stkfiltered'   ; filtered-particle stack (w/o "@", see option [filteredImgsYN])

; ------------------ Outputs ------------------

[ca_dir]             = 'Zerodegr/CAPCA'           ; output directory
[cas_prefix]         = '[ca_dir]/cas'             ; correspondence-analysis output prefix
[ps_eigenvalue_hist] = '[ca_dir]/ps_eigenvalues'  ; eigenvalue histogram, encapsulated PostScript
[ps_factor_map]      = '[ca_dir]/factormap'       ; eigenvalue factor map, PostScript format

[eigen_imgs]         = '[ca_dir]/stkeigenimg'     ; (if 2D) eigenimage stack (w/o "@")
;;;[eigen_vols]         = '[ca_dir]/voleigen***'     ; (if 3D) eigenvolume template

[reconstituted_imgs] = '[ca_dir]/stkreconst'      ; (if 2D) reconstituted image stack (w/o "@")
;;[reconstituted_volp] = '[ca_dir]/volreconst***p'  ; (if 3D) reconstituted volume template, positive coefficient
;;[reconstituted_voln] = '[ca_dir]/volreconst***n'  ; (if 3D) reconstituted volume template, negative coefficient

; -------------- END BATCH HEADER --------------

; Temporary files
[temp_mask]      = '_6'
[temp_gnuplot]   = 'tmp2.gnu'
[temp_eigen_txt] = 'eigenvalues.txt'
[temp_corrmap]   = 'tmpdoccorrmap'    ; eigenvalue (1-9) document file (for WEB->CorrMap)
[temp_rec_stack] = 'tmpstkreconst'

SYS
mkdir -p [ca_dir]

MD
SET MP
[num_cpus]

IF ( [use_filt_imgs] .EQ. -1 ) THEN
  ; See if filtered images exist
  IQ FI [filteredExist]
  [filtered_stack]

  IF ( [filteredExist] .EQ. 1 ) [use_filt_imgs]=1
ENDIF

IF ( [use_filt_imgs] .EQ. 1 ) THEN
  SYS
  echo "  Using filtered/shrunken images [filtered_stack].$DATEXT" ; echo

  [particles] = '[filtered_stack]@*****'
ELSE
  SYS
  echo "  Using fullsize images [fullsized_stack].$DATEXT" ; echo

  [particles] = '[fullsized_stack]@*****'
ENDIF

; Get first particle#
[one] = 1
UD IC [one], [first_part]
[selection_doc]

; Get size of first image/volume
FI H [idim],[iform]
[particles][first_part]
NY,IFORM

SYS
echo "  Using window dimension of {%i0%[idim]} pixels"; echo

; Check if custom mask present
IQ FI [mask_exists]
[custom_mask]

; If custom mask present, copy it into memory
IF ( [mask_exists] .EQ. 1 ) THEN
  CP
  [custom_mask]  ; INPUT
  [temp_mask]    ; OUTPUT

  ; check dimensions
  FI H [maskdim_y]
  [temp_mask]
  NY

  ; compare dimensions
  IF ( [maskdim_y] .NE. [idim] ) THEN
    [ydim_quotient] = [maskdim_y]/[idim]

    ; check if integer downsampling factor
    IF ( [ydim_quotient] .EQ. INT([ydim_quotient]) ) THEN
      SYS
      echo "  Mask [custom_mask] is {%i0%[ydim_quotient]} times bigger than images.  Shrinking mask..."

      DC S
      [custom_mask]
      [temp_mask]
      [ydim_quotient],[ydim_quotient],[ydim_quotient]
    ELSE
      SYS
      echo "  ERROR: Mask dimension {%i0%[maskdim_y]} different from image dimension {%i0%[idim]}.  Exiting..."

      EN
    ENDIF
  ENDIF

; If custom mask not present, make circular mask
ELSE
  ; Check if radius undefined
  IF ( [part_radius] .LE. 0 ) [part_radius] = INT( ([idim]-1)/2 )

  SYS
  echo "  Using mask radius {%i0%[part_radius]} pixels" ; echo

  IF ( [iform] .EQ. 1 ) THEN
    MO
    [temp_mask]    ; output mask file
    [idim],[idim]  ; dimensions
    C              ; _C_ircle
    [part_radius]
  ELSEIF ( [iform] .EQ. 3 ) THEN
    [center] = INT( ([idim] + 1)/2 )

    MO 3
    [temp_mask]    ; output mask file
    [idim],[idim],[idim]
    SP             ; _SP_here
    N              ; coordinates from docfile?
    1              ; density
    [part_radius],0
    [center],[center],[center]
    0,0,0          ; don't continue
  ENDIF
ENDIF

; If CA selected: check for small intensities
IF ( [cas_option] .EQ. 1 ) THEN
  SYS
  echo "  Finding statistics" ; date | sed 's/^/  /'

  ; Initialize minimum
  [global_min] = 999999

  ; Get #particles
  UD N [num_parts]
  [selection_doc]

  ; Loop through particles
  DO LB5 [part_key] = 1,[num_parts]
    ; Get particle number
    UD IC [part_key], [part_num]
    [selection_doc]

    ; Get image-minimum
    FS
    [particles][part_num]
    FI H [img_min]
    [particles][part_num]
    FMIN

    ; Update if necessary
    IF ( [img_min] .LT. [global_min] ) THEN
      [global_min] = [img_min]
      [min_part] = [part_num]  ; particle#
    ENDIF
  LB5
  ; End particle-loop

  UD ICE  ; Close document
  [selection_doc]

  ; If additive constant set to automatic, set it
  IF ( [global_min] .LT. 0.05 ) THEN
    IF ( [add_constant] .EQ. 0 ) [add_constant] = 0.05 - [global_min]
  ENDIF

  SYS
  echo "  Minimum intensity: {%f11.4%[global_min]} (image #{******[min_part]}), additive constant: {%f11.4%[add_constant]}"; echo
ENDIF

IF ( [cas_option] .EQ. 1 ) THEN
  SYS
  echo "  Running correspondence analysis"; date | sed 's/^/  /'

  ; Run correspondence analysis
  CA S
  [particles]
  [selection_doc]
  [temp_mask]
  [num_factors]
  C             ; _C_orrespondence analysis
  [add_constant]
  [cas_prefix]  ; OUTPUT: file prefix
ENDIF

IF ( [cas_option] .EQ. 2 ) THEN
  SYS
  echo "  Running principal component analysis"; date | sed 's/^/  /'

  ; Run principal component analysis
  CA S
  [particles]
  [selection_doc]
  [temp_mask]
  [num_factors]
  P             ; _P_rinciple component analysis
  [cas_prefix]  ; OUTPUT: file prefix
ENDIF

IF ( [cas_option] .EQ. 3 ) THEN
  SYS
  echo "  Running iterative principal component analysis"; date | sed 's/^/  /'

  ; Run iterative principal component analysis
  CA S
  [particles]
  [selection_doc]
  [temp_mask]
  [num_factors]
  I             ; _I_terative PCA
  [cas_prefix]  ; OUTPUT: file prefix
ENDIF

SYS M
echo ; echo "  Preparing eigenvalue plot" ; echo ;
rm -f [temp_gnuplot] [temp_eigen_txt] ;
python eigendoc.py [cas_prefix]_EIG.$DATEXT > [temp_eigen_txt]
.
SYS M
echo ' 'set terminal postscript eps enhanced monochrome \"Times-Roman\" 24 > [temp_gnuplot] ;
echo ' 'set encoding iso_8859_1 >> [temp_gnuplot] ;
echo ' 'set xlabel \"Eigenvalue number\"   >> [temp_gnuplot] ; 
echo ' 'set ylabel \"%\" >> [temp_gnuplot] ; 
echo ' 'set boxwidth 0.5 >> [temp_gnuplot] ;
echo ' 'set xrange \[0.2:{**[num_factors]}.5\] >> [temp_gnuplot] ;
echo ' 'set output \'[ps_eigenvalue_hist].ps\' >> [temp_gnuplot] ;
echo ' 'plot \'[temp_eigen_txt]\' using 1:3 title \'eigenvalues\' with boxes >> [temp_gnuplot] ;
gnuplot [temp_gnuplot] ;
rm -f [temp_gnuplot] [temp_eigen_txt]
.

; Delete pre-existing files
DE
[eigen_imgs]@
DE
[reconstituted_imgs]@
DE
[temp_corrmap]


; RECONSTITUTE EIGENIMAGES

SYS
echo "  Reconstituting eigenimages"; date | sed 's/^/  /'

DE
[temp_rec_stack]@

; Loop through factors
DO LB9 [factor_num] = 1,[num_factors]
  SD C
  [cas_prefix]
  [factor_num]  ; factor range
  [temp_corrmap]

  ; Get factor statistics
  DOC STAT [nval],[min],[max],[sum],[avg],[stdev]
  [temp_corrmap]
  1

  IF ( [reconst_coeffs] .LE. 0 ) THEN
    [low_end]  = [min]
    [high_end] = [max]

  ; if user-specified
  ELSE
    [low_end]  = -[reconst_coeffs]*[stdev]
    [high_end] =  [reconst_coeffs]*[stdev]
  ENDIF

  ; Syntax is different for CA ([cas_option]=1) than for (I)PCA
  IF ( [cas_option] .EQ. 1 ) THEN
    ; Generate eigenimage
    CA SRE
    [cas_prefix]
    [factor_num]
    [eigen_imgs]@{%i0%[factor_num]}

    ; Generate positive reconstituted image
    CA SRA
    [cas_prefix]
    [factor_num]
    [high_end]  ; coefficient
    [temp_rec_stack]@1

    ; Generate negative reconstituted image
    CA SRA
    [cas_prefix]
    [factor_num]
    [low_end]  ; coefficient
    [temp_rec_stack]@2

  ; syntax for PCA/IPCA ([cas_option]={2,3})
  ELSE
    ; Generate eigenimage
    CA SRE
    [cas_prefix]
    Y             ; subtract average?
    [factor_num]  ; eigenvector
    [eigen_imgs]@{%i0%[factor_num]}

    ; Generate positive reconstituted image
    CA SRA
    [cas_prefix]
    N          ; subtract average?
    [factor_num]
    [high_end]
    [temp_rec_stack]@1

    ; Generate negative reconstituted image
    CA SRA
    [cas_prefix]
    N         ; subtract average?
    [factor_num]
    [low_end]
    [temp_rec_stack]@2
  ENDIF

  ; Montage positive and negative reconstituted image
  IF ( [iform] .EQ. 1 ) THEN
    MN S
    [temp_rec_stack]@*  ; input template
    1,2   ; image #s
    1,1   ; images/row, margin-width
    0     ; margin value
    [reconstituted_imgs]@{%i0%[factor_num]}
  ELSEIF ( [iform] .EQ. 3 ) THEN
    CP
    [eigen_imgs]@{%i0%[factor_num]}
    [eigen_vols][factor_num]

    CP
    [temp_rec_stack]@1
    [reconstituted_volp][factor_num]

    CP
    [temp_rec_stack]@2
    [reconstituted_voln][factor_num]
  ENDIF

  DE
  [temp_rec_stack]@
LB9
; End factor loop

DE
[temp_corrmap]

IF ( [iform] .EQ. 3 ) THEN
  DE
  [eigen_imgs]@
ENDIF


; PREPARE FACTOR MAPS

IF ([factormap_range] .GE. 0) THEN
  SYS
  echo "  Generating factor maps"; date | sed 's/^/  /'

  [num_pairs] = [num_factors] - 1  ; number of factor-pairs to plot

  ; Loop through factor-pairs
  DO LB2 [factor1] = 1,[num_pairs]
    [factor2] = [factor1] + 1  ; second factor to plot

    ; Generate factor map
    CA SM
    I        ; plot _I_mage coordinates
    [cas_prefix]  ; INPUT
    0        ; #horizontal patches
    [factor1],[factor2]  ; factors to plot
    S        ; plot _S_ymbol
    +        ; symbol to plot
    Y        ; output to PostScript?
    [factormap_range] ; #standard devations to plot
    0        ; no axis-flip
    [ps_factor_map]{**[factor1]}{**[factor2]}  ; OUTPUT
              ; TEXT SIZE FOR AXIS AND DATA
              ; X AXIS OFFSET
              ; LOWER, UPPER AXIS BOUNDS
              ; AXIS LABEL UNIT AND TICKS / LABEL
              ; LABEL NO. TO EDIT
              ; Y AXIS OFFSET
              ; LOWER, UPPER AXIS BOUNDS
              ; AXIS LABEL UNIT AND TICKS / LABEL
              ; LABEL NO. TO EDIT
  LB2
  ; End pair loop
ENDIF

SYS
echo "  Done!" ; date | sed 's/^/  /'

EN D

; Modified 2025-02-19
;    2025-02-19 (trs) -- can operate on volumes
;    2016-05-10 (trs) -- added option to skip factor map (CA SM crashes if too many points on margin)
;    2016-04-08 (trs) -- can use either filtered or unfiltered particles
;    2015-07-31 (trs) -- gets image dimension from first particle rather than PARAMS
;    2014-04-03 (trs) -- no longer saves correlation doc file -- SD C was crashing too much
;    2014-04-03 (trs) -- generates reconstituted images more intelligently
;    2014-03-06 (trs) -- writing images in stacks
;    2014-02-06 (trs) -- changed default range for factormap to +/- 3 s.d. -- SPIDER dumps core if too small
;    2014-02-04 (trs) -- number of standard deviations to plot in factor maps is now user-specified
;    2013-03-20 (trs & cjh) -- downsamples custom mask if necessary
;    2012-09-07 (trs) -- better scales reconstituted images
;    2012-09-07 (trs) -- generates Gnuplot script from scratch, ploteigen.gnu no longer needed
;    2012-04-18 (trs) -- reads optional custom mask
;    2010-02-09 (trs) -- CA SR* asks extra question if using PCA/IPCA
;    2008-11-26 (trs) -- now a parameter to specify CA, PCA, or IPCA
;    2007-11-02 (trs) -- added reconstituted images
;    2006-05-11 (trs) -- bug fix if more than nine factors
;    2005-08-23 (trs) -- factor maps adapted from jsl's casm.bat
