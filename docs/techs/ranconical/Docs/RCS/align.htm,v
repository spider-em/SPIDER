head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2025.03.25.20.57.09;	author dean;	state Exp;
branches;
next	1.2;

1.2
date	2019.02.05.15.24.36;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2019.02.01.15.53.55;	author leith;	state Exp;
branches;
next	;


desc
@used www
@


1.3
log
@links fixed
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <title> Alignment parameters </title>
    <link rel='stylesheet' href='tapu.css' type='text/css' />
</head>

<body lang="en-US" dir="ltr">
<body link="#0000ee" vlink="#0000ee" alink="#ff0000" bgcolor="#cccccc">

<h2 align="center"> <b>Alignment parameters</b></h2>
<br />

<hr />
<br />

<p><b>[searchRange] and [stepSize]</b></p>

    <p>
    Finding the optimum <i>x</i> &amp; <i>y</i> translations, while 
    simultaenously finding the optimum rotation angle, is a difficult problem.  
    The problem arises because translational and orientational alignment are interdependent. 
    That is, translational alignment works best when the images are rotationally aligned, 
    while rotational alignment works best when the images are translationally aligned.  
    Many of <a href="../../../align_overview.html">
                     SPIDER's alignment algorithms</a> perform a brute-force search, 
    attempting separate orientational alignments for various combinations 
    of <i>x</i> &amp; <i>y</i> shifts. 
    For example, using a <b><i>[searchRange]</i></b> of <i>1</i> would result in the 
    following shift combinations:
    </p>    
    
    <p><code class="snippet">{(-1,1),(0,1),(1,1),(-1,0),(0,0),(1,0),(-1,-1),(0,-1),(1,-1)}</code></p>
    
    <p>
    As the allowed shift increases, the number of required orientational alignments increases quickly. 
    Alignment is generally the slowest step in image-processing (except for 3D classification). 
    One way to reduce the computational requirements for large shifts is to not re-align for 
    <u>every</u> shift.  
    This is specified by the parameter <b><i>[stepSize]</i></b>.  
    For example, using a <b><i>[searchRange]</i></b> of <i>2</i> 
    and a <b><i>[stepSize]</i></b> of <i>2</i> would result in the following shift combinations:
    </p>
    
    <p><code class="snippet">{(-2,2),(0,2),(2,2),(-2,0),(0,0),(2,0),(-2,-2),(0,-2),(2,-2)}</code><BR>
    (notice that odd-numbered shifts are skipped) </p>
    
    <p>
    If instead the <b><i>[searchRange]</i></b> remained <i>2</i>, 
    while the <b><i>[stepSize]</i></b> was reduced to <i>1</i>, 
    there would be 25 orientational searches (more than I want to list) instead of the 9 above.
    </p>
    
    <p>There are other alignment strategies to try to cope with this interdependency, 
    such as those that use rotationally-invariant autocorrelation functions, 
    but in my experience, they don't work well.
    </p>
    
<hr />

<p><b>[objDiameter] and [innerRad]</b></p>

    <p>
    SPIDER performs orientational alignment by
    first converting the Cartesian image to polar (radius vs. angle) form, 
    and then performs a series of 1D cross correlations (each of which is fast).  
    A 1D cross-correlation in the polar representation is 
    equivalent to a rotation in Cartesian space.
    </p>    
    
    <p>
    The maximum radius is specified, indirectly, by the parameter <b><i>[objDiam]</i></b>: 
    object diameter. 
    The simplest strategy would simply be to divide the object diameter by two to get the radius.  
    If the chosen radius is too small, the outermost features 
    (which are likely to provide the best "handles" for alignment) 
    will not be included in the orientational alignment.  
    If the chosen radius is too large, then noise outside the particle will be included in the alignment.  
    (This isn't <u>so</u> bad, since features here are <u>generally</u> weaker than over the particle, 
    and thus will not influence the alignment strongly.)
    <p>
    
    <p>
    In most of the procedures here, 
    the chosen radius by default is 70% bigger than half the object diameter.  
    Particles are (hopefully) not perfectly round, and they are generally not perfectly centered.  
    So, the radius chosen in practice is padded a bit. 
    </p>

    <p>
    Also, the maximum radius must allow for a shift of up to <b><i>[searchRange]</i></b> 
    while remaining within the image window.  
    For example, for a 100-pixel image and a search range of 8 pixels, a radius of 44 would be too big.  
    That is, a circle at the image center and then shifted 8 pixels would go off the image.  
    The procedures here generally trap for this before crashing the alignment commands.  
    A message will be echoed to the screen of the form:
    </p>
    
    <b><pre>
    Tested alignment radius of 53 from specified object diameter of 75 too big.
    Using outer alignment radius of 39 pixels.
    </pre></b>
    
    <p>
    It may be that you <u>need</u> a large <b><i>[searchRange]</i></b> and large outer radius, 
    beyond what the SPIDER procedure will allow.  
    It may be that your particle is windowed too tightly, and 
    that you need to rewindow the particles into larger windows.
    </p>
    
    <p>
    The choice of inner radius <b><i>[innerRad]</i></b> is not so crucial. 
    The reason is that, at low radius, few pixels are available to cover all 360 degrees. 
    Thus, the polar plot of intensity versus angle will not change rapidly at low radius.  
    </p>
    
    <p>
    However, sometimes one sees in the final average a hole at the inner alignment radius, 
    or there is a halo at the outer alignment radius.  
    For the former, I lately use a <b><i>[innerRad]</i></b> of <i>1</i>. 
    For the latter, I play with the outer radius to try to minimize this sharp boundary.  
    </p>
    
<hr />
   <a name="cgph"></a>

   <p><b>[cgOption]</b></p>

    <p>
    In the 2D alignments, especially the reference-free variants, 
    it is possible that the averages will be off-center.  
    For the untilted images, it is helpful for the images to be centered. 
    For the tilted images, it is <u>vital</u> that the particles are centered well.  
    (The tilted images are the ones used in the 3D reconstruction, 
    and are thus required to have a common origin.)
    </p>
     
    <p>There are three strategies implemented to center the averages:</p>
    
    <ol start=0>
      <li>nothing -- sometimes doing nothing is better than doing something                      </li>
      <li>center of gravity, SPIDER command 
      <a href="../../../man/cgph.html">'CG PH'</a>        </li>
      <li><a href="../center1.rct">center1.rct</a>, which rotates the image by 180 degrees, 
          translationally aligns the image to its rotated form, and shifts by half the best match</li>
    </ol>
    
    <p>
    To help decide whether the centering works properly, two circles are overlain onto the 
    intermediate averages, corresponding to the inner and outer radii.
    For reference-free alignment, all three centering options are written, to the stacks
    <font class="output">Zerodegr/Pairwise/stkcentavg</font> for 
                        <a href="../pairwise.rct">pairwise.rct</a>, and 
    <font class="output">Tilted/Pairwise/stkcentavg</font>   for 
                        <a href="../centertilt.rct">centertilt.rct</a>.    
    If you don't like the option that was selected, you need to re-run the alignment.
    For <a href="../multirefalign.rct">multirefalign.rct</a>, 
    circles are currently not drawn onto the references <font class="output">Zerodegr/Multiref#/stkref</font>.
    </p>


</ul>

<hr />

<p>
<small>
  Source: align.htm        &nbsp;&nbsp;&nbsp;
  Page updated: 2015/08/13 &nbsp;&nbsp;&nbsp;
  Tapu Shaikh
</small>
</p>

</body>


<!--    <table class="outs">
    <tr valign="top"><td>&curren;</td>
	<td><font class="output">OUTPUT</font>:</td>
	<td>DESCRIPTION.</td></tr>
    <tr valign="top"><td>&curren;</td>
	<td><font class="output">OUTPUT</font>:</td>
	<td>DESCRIPTION.</td></tr>
    </table>-->
    
<!--    <table class="outs">
	<tr valign="top"><td>&curren;                                   </td>
	    <td><b><I>PARAMETER</I></b>:                      </td>
	    <td>DESCRIPTION.</td></tr>
	<tr valign="top"><td>&curren;                                   </td>
	    <td><b><I>PARAMETER</I></b>:                      </td>
	    <td>DESCRIPTION.</td></tr>
    </table>-->

</html>
@


1.2
log
@COSMETIC
@
text
@d26 1
a26 1
    Many of <a href="http://www.wadsworth.org/spider_doc/spider/docs/align_overview.html">
d144 2
a145 2
      <a href="http://www.wadsworth.org/spider_doc/spider/docs/man/cgph.html">'CG PH'</a>        </li>
      <li><a href="center1.rct">center1.rct</a>, which rotates the image by 180 degrees, 
d153 4
a156 2
    <font class="output">Zerodegr/Pairwise/stkcentavg</font> for <a href="pairwise.rct">pairwise.rct</a>, and 
    <font class="output">Tilted/Pairwise/stkcentavg</font>   for <a href="centertilt.rct">centertilt.rct</a>.    
d158 1
a158 1
    For <a href="multirefalign.rct">multirefalign.rct</a>, 
@


1.1
log
@Initial revision
@
text
@d26 2
a27 2
    So, what many of <a href="http://www.wadsworth.org/spider_doc/spider/docs/align_overview.html">SPIDER's alignment algorithms</a> 
    is to perform a brute-force search, 
d46 2
a47 2
    <p><code class="snippet">{(-2,2),(0,2),(2,2),(-2,0),(0,0),(2,0),(-2,-2),(0,-2),(2,-2)}</code>
    <BR>(notice that odd-numbered shifts are skipped)</p>
d57 2
a58 1
    but in my experience, they don't work well.</p>
d65 2
a66 2
    How SPIDER performs orientational alignment is that it 
    first converts the Cartesian image to polar (radius vs. angle) form, 
d69 1
a69 1
    equivalent to a rotation in Cartesian space
d85 1
a85 1
    How most of the procedures here are written, 
d100 4
a103 4
    <b><PRE>
    Tested alignment radius of 53 from specified object diameter of 75 too big
    Using outer alignment radius of 39 pixels
    </PRE></b>
d120 1
a120 1
    or that there is a halo at the outer alignment radius.  
d126 3
a128 2
<a name="cgph">
<p><b>[cgOption]</b></p>
d150 2
a151 2
    To help decide whether the centering work properly, two circles are overlain onto the intermediate averages, 
    corresponding to the inner and outer radii.
d154 1
a154 1
    <font class="output">Tilted/Pairwise/stkcentavg</font> for <a href="centertilt.rct">centertilt.rct</a>.    
a158 1
</a>
d165 1
d167 4
a170 4
<p>
Source: align.htm        &nbsp;&nbsp;&nbsp;
Page updated: 2015/08/13 &nbsp;&nbsp;&nbsp;
Tapu Shaikh
a171 1
</small>
@
