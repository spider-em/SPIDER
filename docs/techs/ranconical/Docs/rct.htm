<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <title>Random-conical tilt reconstruction</title>
    <link rel='stylesheet' href='tapu.css' type='text/css' />
</head>

<body lang="en-us" dir="ltr">
<body link="#0000ee" vlink="#0000ee" alink="#ff0000" bgcolor="#cccccc">

<hr />


<table class="heading" width="100%" >
    <tr> <td>    <br />
    <h3 class="heading">Random conical tilt reconstruction</h3>
    <p><center>As described in <i>Nucleic Acids Res.</i> (2011) <b>39</b>: 2845-54.</center></p>
    <p />
    </td> </tr>
</table>

<hr />


<b><p>Outline</p></b>
<ul>
    <li><a href="#links">Links to further information</a> </li>
    <li><a href="#notes">General notes</a>                </li>
    <li><a href="#quick">Quick-start guide</a>            </li>
    <li><a href="#start">Getting started</a>              </li>
    <li><a href="#proc">Procedure</a>                     </li>
    <li><a href="#misc">Miscellaneous procedure files</a> </li>
    <li><a href="#mods">Modifications log</a>             </li>
    <li><a href="#refs">References</a>                    </li>
</ul>

<hr />

<a name="links">
<table class="heading" width="100%" >
   <tr> <td>                                       <br />  
   <h3 class="heading">Links to further information</h3>
   <p class="explain"></p>
   <p />
   </td> </tr>
</table>
</a>

<ul>
    <li><a href="#mr1987">Radermacher et al. (1987)</a>  -- description of the technique 
	of random conical tilt.</li>

    <li><a href="../../../euler.html">
        General information about Euler angles</a>, and 
        <a href="eulers.htm">a note about Euler angles in RCT</a>.</li>

    <li>Information about 
	<a href="https://spider-em.github.io/spire/spire-docs/spire.html">SPIRE</a>,
	the SPIDER Reconstruction Engine, including
	<a href="https://spider-em.github.io/spire/install.html"> installation</a>. </li>

    <li>Download link for the 
	<a href="../../../protocol_download.html">
	Nature Protocols data set</a>.</li>

    <li>A description of the
	<a href="../../Docs/params.html">  reconstruction parameters</a>.</li>


    <li><a href="../../../techs/MSA/index.html">
	Multivariate data analaysis</a>, 
	including reference-free alignment, correspondence analysis, and classification.</li>

    <li><a href="../../../techs/classification/tutorial.html">
	Classification and clustering tutorial</a>.</li> 

    <li><a href="https://spider-em.github.io/spire/tools-docs/verifybyview.html">
	Documentation for <font class="guitool">verifybyview.py</font></a>.</li> 
    
    <li><a href="flipflop.htm">A note about use of mirrored reference images in multireference alignment</a>.</li>
    
    <li><a href="misc.htm#pocs">Projection onto convex sets</a>.</li> 
        
    <li> <a href="http://www.amazon.com/gp/product/0195182189/">
	Three-Dimensional Electron Microscopy of Macromolecular Assemblies</a>,
	Oxford University Press,  (February 2006)</li>
</ul>


<hr />

<a name="notes">
<table class="heading" width="100%" >
   <tr> <td>    <br />  
   <h3 class="heading">General notes</h3>
   
   <p class="explain"></p>
   
   <p />
   
   </td> </tr>
</table>
</a>

<!--TEMPLATES-->
<ul>
    <li> <b>Each step in the process is bold and marked  by a bullet.</b></li>
    <li> <a href="#notes">Procedure files</a> are links to the procedure script.</li>
    <li> <font class="input">Inputs</font> are marked in pink italics.</li>
    <li> <font class="output">Outputs</font> created by that procedure are marked in green.</li>
    <li> <font class="guitool"> Graphical tools</font> are marked in red. </li>
    <li> Command-line instructions are written in <code class="snippet">Courier</code>.</li>
    <li> <b><i>Parameters</i></b> will be in bold italic.</li>
    <li> Sequential operations are numbered. Options are lettered.</li>
    <li> Data extension assumed to be <b>.spi</b>. Adjust accordingly.</li>
    <li> List of inputs and outputs in description is not exhaustive.</li>
</ul>

	<!--<table class="outs">
	<tr valign="top"><td>&curren;</td>
	    <td><font class="output">OUTPUT</font>:</td>
	    <td>DESCRIPTION.</td></tr>
	<tr valign="top"><td>&curren;</td>
	    <td><font class="output">OUTPUT</font>:</td>
	    <td>DESCRIPTION.</td></tr>
	</table>-->
    
	<!--<table class="outs">
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>PARAMETER</i></b>:                      </td>
		<td>DESCRIPTION.</td></tr>
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>PARAMETER</i></b>:                      </td>
		<td>DESCRIPTION.</td></tr>
	</table>-->

<hr />


<a name="quick">
<table class="heading" width="100%" >
   <tr> <td>    <br />  
   <h3 class="heading">Quick-start guide</h3>
   
   <p class="explain">This is a brief list of the steps comprised in this protocol. 
   For simplicity, options have been limited. 
   For more detailed information, see the <a href="#proc">full procedure</a> below.</p>
   
   <p>Data extension is assumed to be <code class="snippet">spi</code></p>
   
   </td> </tr>
</table>
</a>

<code class="snippet"><ol>
    <li>tar -xvf rct_procs.tar.gz</li>
    <li>spider rct/spi @makeparams (or copy <b>params.spi</b>)</li>
    <li>(optional) tar -xvf data20060817.tar.gz</li>
    <li>mkfilenums filenums.spi $MICROGRAPHS*</li>
    <li>(for non-SPIDER format micrographs) spider rct/spi @convertmics</li>
    <li>spider rct/spi @shrinkmics</li>
    <li>cd Micrographs/ ; montagefromdoc ../filenums.spi sm-mic*</li>
    <li>spider rct/spi @micpair</li>
    <li>(required for JWEB) spider rct/spi @padmics</li>
    <li>pick tilt pairs in JWEB or WEB</li>
    <li>spider rct/spi @makesomenoise (or copy <b>noise.spi</b>) </li>
    <li>spider rct/spi @windowparticles</li>
    <li>(for negative stain) Do both of:</li>
	<ol type="I">
	    <li>spider rct/spi @highpass-untilted</li>
	    <li>spider rct/spi @highpass-tilted</li>
	</ol>
    <li>montagefromdoc listparticles.spi Zerodegr/stk2-winrot.spi</li>
    <li>(if necessary) spider rct/spi @removebad</li>
    <li>montagefromdoc listparticles.spi Tilted/stk2-winrot.spi</li>
    <li>(if necessary) spider rct/spi @removebad</li>
    <li>(slow) spider rct/spi @pairwise</li>
    <li>(optional) To reorient average, do both of:</li>
	<ol type="I">
	    <li>spider rct/spi @reorientavg</li>
	    <li>spider rct/spi @sumalign</li>
	</ol>
    <li>spider rct/spi @filtershrink</li>
    <li>spider rct/spi @ca-pca</li>
    <li>Classify.  (Ward's method shown here.  For other options, see below.)</li>
	<ol type="I">
	    <li>spider rct/spi @hierarchical</li>
	    <li>spider rct/spi @binarytree</li>
	    <li>cd Zerodegr/Tree ; binarytree labeled001.spi 4 goodclasses.spi</li>
	</ol>
    <li>Iterate:</li> 
	<ol type="I">
	    <li>spider rct/spi @multirefalign after the first iteration)</li> 
	    <li>spider rct/spi @filtershrink</li> 
	    <li>spider rct/spi @classifybyview</li>
	    <li>verifybyview</li> 
	</ol>
    <li>spider rct/spi @combinegoodclasses</li> 
    <li>spider rct/spi @viewaverages</li> 
    <li>spider rct/spi @centertilt</li>
    <li>spider rct/spi @storeangles</li>
    <li>(optional) spider rct/spi @d6symmetry</li>
    <li>spider rct/spi @bpclass</li>
    <li>spider rct/spi @volfilt</li>
    <li>(if multiple orientations) Do both of: </li>
	<ol type="I">
	    <li>spider rct/spi @volalignprj</li>
	    <li>spider rct/spi @mergevols</li>
	</ol>
    <li>spider rct/spi @prepare-prjmatch</li>
</ol></code>


<a name="start"><hr /></a>

<table class="heading" width="100%" >
   <tr> <td>    <br />
   <h3 class="heading">Getting started</h3>

   <p class="explain"></p>

   <p />
   </td> </tr>
</table>

<ul>
    <li>Before unpackaging the 
        <a href="../tar_archive/rct_procs.tar.gz"> procedures tar archive</a> 
	(as described below), create a new directory, and change to that directory .</li>

    <li>Micrographs should be placed in the <b>Micrographs/</b> directory.  
	They needn't be in SPIDER format, but you'll then need to run
	<a href="../convertmics.rct">convertmics.rct</a> for the conversion. </li>
</ul>

<p>
  There are two different choices for running SPIDER procedures: Using 
  <a href="https://spider-em.github.io/spire/spire-docs/spire.html">
  <font class="guitool">SPIRE</font></a> or using SPIDER procedures directly.
</p>

<ol class="choice">
    <li> If you are using 
    <font class="guitool">SPIRE</font>, 
    then read <a href="https://spider-em.github.io/spire/spire-docs/spire.html">
    its documentation</a>, starting with 
    <a href="https://spider-em.github.io/spire/spire-docs/project.html"> 
     Starting a new project</a>.
    In this case, the configuration file is called <b>rct.xml</b>, 
    and is located in the directory in which you unpackaged the tarball. 
    
    <p> Even if you are <u>not</u> using <font class="guitool">SPIRE</font>, 
    its libraries are required for various Python scripts, such as
    <a href="https://spider-em.github.io/spire/bin/mkfilenums.py">mkfilenums.py</a> and 
    <a href="https://spider-em.github.io/spire/bin/binarytree.py">binarytree.py</a> so you 
    should install it anyway. 
    </p>

    <p> Installation instructions for <font class="guitool">SPIRE</font> can be found 
    <a href="https://spider-em.github.io/spire/install.html">here</a>.
    </p>
    
    </li>

   <li> If you are running SPIDER at the command-line prompt, 
   the processing steps are carried out by procedure files,
   which run many SPIDER operations automatically. 
   To use a procedure in this document, 
   if you have not unpackaged the complete tarball, 
   then right-click the procedure filename and 
   save the procedure to your current working directory. 
   At the beginning of each procedure, 
   there is a list of parameters that can be adjusted according to the particular project. 
   Some of the procedures will call additional procedure(s).
   You do not need to change anything in the procedures. 
   Use the following format to run a SPIDER procedure: <br />
   
   <code class="snippet">spider rct/spi @proc</code> <br />
   
   where <code class="snippet">rct</code> is the procedure file extension, 
   <code class="snippet">spi</code> is the project data file extension, and 
   <code class="snippet">proc.rct</code> is the procedure file.
   </li>
</ol>


<a name="proc"><hr /></a>

<table class="heading" width="100%" >
   <tr> <td>    <br />
   <h3 class="heading">Procedure</h3>

   <p class="explain">This procedure comprises a complete series of steps required to 
	compute a three-dimensional reconstrction using random conical tilt.</p>

   <p />
   </td> </tr>
</table>

<ul>

<li><p class="action">Prepare project directory</p>                        </li> 
    
    <ol>
    <li>The following steps will unpackage files in the currect directory, 
	so create a new directory if so desired.                          </li>
    <li>Download the 
        <a href="../tar_archive/rct_procs.tar.gz"> rct procedures tar archive</a> </li>
    <li>Unpackage the archive by typing:
	<pre>tar -xvf rct_procs.tar.gz</pre>                               </li>
    </ol>
</li>

<p />

<li><p class="action">Prepare parameter doc file</p> </li> 

    <p>Many parameters are used repeatedly throughout this protocol. 
    There are two ways to prepare the doc file: 
    <a class="project" href="../makeparams.rct">makeparams.rct</a> or 
    <a href="https://spider-em.github.io/spire/spire-docs/packages.html">
           <font class="guitool">SPIRE</font></a>.
    </p>
    
    <ol type='A'>
        <li>The procedure file <a class="project" href="../makeparams.rct">makeparams.rct</a> 
            stores these parameters.
            Run it interactively, and answer the questions.     </li>
        
        <li>When you start a new project in <font class="guitool">SPIRE</font>, 
            it will spawn a pop-up window with entries for you to fill. 
            Some of the values will be inter-dependent, such as 
            pixel size and maximum spatial frequency.</li>
    </OL>

	<br />Either of these steps will create the document file:
	
	<table class="outs">
	    <tr valign="top">  <td>&curren;</td>
		<td><font class="output">params</font>:</td>
		<td>A doc file containing the 
		    <a href="../../Docs/params.html">reconstruction parameters</a></td> 
	    </tr>
	</table>
    
    <br />Not all 20 parameters are used, so here is a summary of the key values:
    
    <table class="outs">
	<tr valign="top"><td>&curren;                                   </td>
	    <td><b><i>1</i></b>:                      </td>
	    <td>zip flag -- if set to 1, micrographs will be uncompressed using gunzip.</td></tr>
	<tr valign="top"><td>&curren;                                   </td>
	    <td><b><i>2</i></b>:                      </td>
	    <td>format flag -- 0 corresponds to SPIDER, 3 to Z/I TIFF, etc. <br />
                See <a href="../../Docs/params.html">
		complete description</a> for additional formats</td></tr>
	<tr valign="top"><td>&curren;                                   </td>
	    <td><b><i>5</i></b>:                      </td>
	    <td>pixel size, in Angstroms.</td></tr>
	<tr valign="top"><td>&curren;                                   </td>
	    <td><b><i>17</i></b>:                     </td>
	    <td>window size, in pixels.</td></tr>
	<tr valign="top"><td>&curren;                                   </td>
	    <td><b><i>18</i></b>:                     </td>
	    <td>particle diameter, in pixels.</td></tr>
    </table>
    
    <p>Alternatively, you can copy and modify this file from elsewhere. 
       An example file called <font class="input">bak-params</font> is present in the tarball.</p>
    

<li><p><b>[Optional] Copy sample data</b></p></li>
    
    <p> The sample data set, from Nicolas Boisset, consists of a phantom tilt pair 
         containing worm hemoglobin.  
	Access the 
        <a href="../tar_archive/data20060817.tar.gz">data archive</a> and 
	unpackage it by typing:</p>
	
	<p><code class="snippet">tar -xvf data20060817.tar.gz</code></p>
	
	This command will create a directory called 
	<font class="output">Micrographs/</font>, containing phantom micrographs, and 
	also a directory called <font class="output">TP1/</font>, 
	containing the files used to generate the micrographs.
    </p>
	

<li><p><b>Generate a list of micrographs</b></p></li>

    <p> The Python script 
        <a href="https://spider-em.github.io/spire/bin/mkfilenums.py">mkfilenums.py</a> 
        generates a SPIDER doc file with a list of filenumbers. 
        The syntax to make a file list of TIFF-format micrographs would be
        (after substituting the file pattern of your micrographs):          </p>
        
        <p><code class="snippet">mkfilenums -f filenums.spi Micrographs/ribo*.tif</code></p>
        
        <p> If SPIRE's python tools are not installed, you can generate 
	    <font class="output">filenums</font> using other means, 
	    such as by manually entering the filenumbers using 
	    <a href="../../../man/doccreate.html"> 
             'DOC CREATE'</a> in SPIDER.
        </p>

        <p> If the micrographs are stacked -- such as in the MRCS example described below --
            the run this step after unstacking them.</p>

<li><p><b>If the micrographs are not already in SPIDER format, then convert them</b></p></li>

    <p>There are two general ways to convert micrographs: 
        in SPIDER using <a href="../convertmics.rct">convertmics.rct</a>, or 
        other software, such as 
        <a href="http://xmipp.cnb.csic.es/twiki/bin/view/Xmipp/WebHome">XMIPP</a>.</p>
    
    <ol type='A'>
        <li><p> The procedure file <a href="../convertmics.rct">convertmics.rct</a>, 
            which calls subroutine <a href="../convert_p.rct">convert_p.rct</a>, 
            will convert, in the default example, <font class="input">zeiss****.tif</font> 
            to SPIDER format.  
            Change the format for the input filename as necessary. 
            Acceptable formats are specified by parameters 1 and 2 in 
            <a href="../../Docs/params.html"> <font class="input">params</font> (described here)</a>. 
            </p>
            
        </li>

        <li><p>XMIPP is also convenient for converting MRC stacks, which 
            is written by some camera software.  
            (Note however that <a href="../../../random.html">
            MRC stacks present their own problems</a>.) 
            The syntax (XMIPP version 3.1) to convert an MRC stack to SPIDER would be:</p>
            
            <p><code class="snippet">xmipp_image_convert -i mrc-stack.mrcs --swap --oroot mic:spi</code></p>
            
            <p>The SPIDER-format micrographs will have too many digits though 
                (the procedures below expect four). 
                You can either remove the extra digits, or 
                change all of the downstream procedures to accommodate the extra digits.  
                To perform the former, many graphical file managers allow mass-renaming.  
                Alternatively, you can do a FOR-loop from the command line in the BASH shell. 
                (If you're using CSH or TCSH, 
                you can temporarily switch to bash simply by typing <code class="snippet">bash</code>, 
                and return to your old shell with <i>CTRL-d</i> or by <code class="snippet">exit</code>).</p>
                
            <p>The syntax for removing two leading zeroes from, say, 28 files would be:<br />
                <code class="snippet">for i in {01..28}; do mv mic0000$i.spi mic00$i.spi; done</code></p>
            
            <p> Now that the micrographs are unstacked, 
            run <a href="https://spider-em.github.io/spire/bin/mkfilenums.py">mkfilenums.py</a> 
            as described above.</p>
        </li>
    </OL>
       
    <b>Outputs:</b><br />

    <table class="outs">
    <tr valign="top"><td>&curren;</td>
	<td><font class="output">Micrographs/mic****</font>:</td>
	<td>SPIDER-format micrographs.</td></tr>
    </table>
    
    </p>


<li><p><b>Shrink the micrographs</b></p></li>

    <p> Here, we will choose a reduction factor such that the micrograph fits on the screen
	(or better yet, an even number of micrographs), and/or where the particles are visible.  
	The procedure file <a href="../shrinkmics.rct">shrinkmics.rct</a> will 
        shrink the micrographs <font class="input">Micrographs/mic****</font>.  
        Output:
    </p>

    <table class="outs">
    <tr valign="top"><td>&curren;</td>
	<td><font class="output">Micrographs/sm-mic****</font>:</td>
	<td>Downsampled micrographs.</td></tr>
    </table>
    
    <p> <i>HINT:</i> The high-pass filtration step can be slow, so 
        by setting <b><i>[filter-radius]=0</i></b>, you can skip this step. 
        For micrographs, I subjectively like a high-pass filter radius of 1500 Agnstroms.
    </p>

    <p> <i>HINT:</i> If you're too well oversampled 
        (i.e., if your pixel size is too fine), 
        you can save two copies of shrunken micrographs, for example,
        one that convieniently fits on the screen (say, a 4k image reduced by a factor of 5), and 
        another to be used for particle-windowing (perhaps, reduced by a factor of 2). 
        If you do the latter, remember to update your  <a href="../../Docs/params.html">params</a> file. 
        The value there (in line 16) is used here only during conversion of the micrographs.
    </p>


<li><p><b>Screen micrographs</b></p></li>

    <p> Not all of the tilt pairs will necessarily be usable, so we will screen them. 
	Micrographs can be screened using various display programs. 
	To use, <font class="guitool">montagefromdoc.py</font>, for example, 
	<code class="snippet">cd Micrographs/</code> and type:</p>
	
    <p> <code class="snippet">montagefromdoc ../filenums.spi sm-mic* </code></p>
    
    <p> The tarball should have left a (hidden) file called
	<font class="input">Micrographs/.montagefromdoc</font> with reasonable settings. 
	The output selection docfile should be the same as the input: 
	<font class="input">../filenums</font>.
	By default, two micrographs will be displayed at a time.  
	Select them with <i>CTRL-a</i> or by clicking on each one.</p>
	
    <p> <u>NOTE:</u> If the micrographs do not have the same dimensions, 
        <font class="guitool">montagefromdoc.py</font> 
        will stretch them to be the same size (for display purposes only). 
        A later step, <a href="../padmics.rct">padmics.rct</a>, 
        will pad micrographs as necessary.
    </p>
	
    <p> If instead of with <font class="guitool">montagefromdoc.py</font>),
	you wish to remove micrographs by editing <b>filenums</b>
	it isn't necessary to renumber the keys. 
	The next procedure, <a href="../micpair.rct">micpair.rct</a>, 
	will renumber the keys internally.</p> 


<li><p><b>Establish pairings between micrographs</p></b></li>

    <p> The procedure file <a href="../micpair.rct">micpair.rct</a> reads 
	<font class="input">filenums</font> and 
	establishes pairs of micrographs.  Output:
    </p>

    <table class="outs">
    <tr valign="top"><td>&curren;</td>
	<td><font class="output">docmicpairs</font>:</td>
	<td>Doc file listing untilted and tilted micrographs.</td></tr>
    </table>
    
    <p> This procedure file presumes that the tilted-specimen micrograph 
	precedes the untilted-specimen micrograph.
	Check the output to confirm that the pairings make sense.
    </p>
    

<li><p><b>Resize micrographs 
    [Required for <font class="guitool">JWEB</font>, 
    not required for <font class="guitool">WEB</font>]</b></p></li>

    <p> JWEB has a "feature" that requires the tilt pair to have the same dimensions. 
	The procedure file <a href="../padmics.rct">padmics.rct</a> reads pairs 
	as judged by <font class="input">docmicpairs</font>, 
	of micrographs <font class="input">Micrographs/sm-mic****</font> and
	sets them to have the same dimensions.  
    </p>

    <b>Outputs:</b><br />
    <table class="outs">
    <tr valign="top"><td>&curren;</td>
	<td><font class="output">Micrographs/jweb-mic{***[untilted]}
	    <br />Micrographs/jweb-mic{***[untilted]}_tilted:</font></td>
	<td>Padded untilted-specimen and tilted-specimen micrographs, respectively.</td></tr>
    </table>
    
    <p> Another "feature" of JWEB is 
	that it expects the tilted micrograph to be second in the file list, 
	even though it is typically collected first at the microscope.
	So, the tilted micrograph is named such that it appears second in the <i>Open</i> dialog. 
	For bookkeeping purposes, from this point on, 
	"micrograph number" will correspond to the number of the untilted micrograph.
    </p>
    
   
<li><p><b>Pick tilt pairs</b></p></li>

    <p> In this step, we need to pick the same particle in the untilted- and tilted-specimen images. 
	There are two options for picking tilt pairs: 
	<font class="guitool">JWEB</font> or <font class="guitool">WEB</font>:</p>

	<ol type='A'>
	    <li>If using <font class="guitool">JWEB</font>: </li>
	      <ol>
		<li>From the <b>Micrographs/</b> directory, open JWEB. </li>
		<li>Go to <i>File -> Open -> Image Series</i> and select a pair of micrographs: 
		    <font class="input">Micrographs/jweb-mic{***[untilted]}</font> and 
		    <font class="input">Micrographs/jweb-mic{***[untilted]}_tilted</font>. 
		    Adjust the contrast as convenient. 
                </li>
		<li>Click on the <i>Markers/Tilt Pair</i> tab.</li>
		<li>In the <i>Marker File Number</i> field, enter the number of the <u>UN</u>tilted micrograph.
                    This number will be appended to the various file outputs.
		</li>
		<li>Click on the <i>Show/Edit Marker</i> button, which will display the images.</li>
		<li>Select a particle from the untilted micrograph, and 
		    the corresponding particle from the tilted micrograph.
		    Repeat this for at least four particles, 
		    separated as far as possible in the micrograph, the farther apart the better. 
		    <br /><i>HINT:</i> The middle mouse button will erase a pair of points 
		    if you make a mistake, or if JWEB becomes confused..
		    <br /><i>HINT:</i> Since the numbering is to the right of the marker, 
		    it may be easier to proceed from right to left.</li>
		<li>Click on buttons <i>Save Marker Files</i> and <i>Determine Theta</i>, 
		    which will determine the magnitude of the tilt angle between the micrographs.</li>
		<li>Click on the <i>Fit Angles</i> button.
		    This will determine the direction of the tilt axis.</li>
		<li>Click on the <i>Draw Fitted Locations</i> button.
		    This will slightly adjust the locations of the fitted coordinates according to the fitting above, 
		    but does not affect the coordinates selected with the mouse.</li>
		<li>Click on the <i>Save Angles</i> button.</li>
		<li>Now, when you select a particle in the untilted image, 
		    JWEB will send the cursor to the corresponding location in the tilted image.</li>
		<li>Select more particles from the tilt pair. 
		    (For the <a href="../data20060817.tar.gz">sample micrograph</a>, 
		    there are 76 pairs.  Select all of them.)</li>
		<li>To save the new values, re-click the five buttons: <i>Save Marker Files</i>, <i>Determine Theta</i>, 
		    <i>Fit Angles</i>, <i>Draw Fitted Locations</i>, and <i>Save Angles</i>.</li>
	      </ol>
	    <li>If using <font class="guitool">WEB</font>: </li>
	      <ol>
		<li>From the menu, select <i>COMMANDS</i> &gt; <i>Tilted Particles</i>, 
		    and select first the untilted-specimen image 
		    <font class="input">Micrographs/sm-mic{****[tilted]}</font> 
		    and then the tilted-specimen image
		    <font class="input">Micrographs/sm-mic{****[tilted]}</font>.
		    <br />If in WEB you entered a number under <i>Image reduction factor</i>
		    (after setting the reduction factor in <i>OPTIONS</i> &gt; <i>Image</i>)
		    when you run <a href="../windowparticles.rct">windowparticles.rct</a> below, 
		    continue to use the parameter <i><b>[shrinkFactor]</b></i> that you used in 
		    <a href="../shrinkmics.rct">shrinkmics.rct</a>.  
		    Do <u>NOT</u> multiply the additional reduction factor used; 
		    using both reduction factors would be redundant.
		    </li>
		<li>In the <i>Particle doc</i> popup window, under <i>Doc file number</i>, 
		    enter the number of the <u>UN</u>tilted micrograph and click <i>ACCEPT</i>.
		    This number will be appended to the various file outputs.
                </li>
		<li>Select a particle from the untilted micrograph, and 
		    the corresponding particle from the tilted micrograph.
		    Repeat this for at least four particles, 
		    separated as far as possible in the micrograph, 
		    the farther apart the better.</li>
		<li>Click the middle button to open the <i>Particle picking menu_popup</i>.</li>
		<li>Click on <i>Determine tilt axis angles</i>, <i>Draw fitted locations</i>, 
		    and <i>Save angles in doc file</i>.</li>
		<li>Now, when you select a particle in the untilted image, 
		    WEB will send the cursor to the corresponding location in the tilted image.</li>
		<li>Select more particles from the tilt pair. 
		    (For the sample micrograph, there are 76 pairs.  Select all of them.)</li>
		<li>To save the new values, re-click the three buttons: <i>Determine tilt axis angles</i>, 
		    <i>Draw fitted locations</i>, and <i>Save angles in doc file</i>.</li>
	      </ol>
	</ol>
	
	<br />Differences between <font class="guitool">JWEB</font> and <font class="guitool">WEB</font>:
	    <ul>
		<li>WEB does not require the pair of micrographs to be the same size, 
		    so the step <a href="../padmics.rct">padmics.rct</a> is unnecessary. </li>
		<li>There is no <i>Save Marker Files</i> button in <font class="guitool">WEB</font>.
		    Coordinates are saved continuously.</li>
		<li><i>Determine Theta</i> and <i>Fit Angles</i> in <font class="guitool">JWEB</font> 
			are now merged into one button in <font class="guitool">WEB</font>, <i>Determine tilt axis angles</i>.</li>
	    </ul>
	
	<br /><i>HINTS:</i>
	  <ul>
	    <li>Save the coordinates frequently. 
		JWEB gets confused from time to time, 
		and the main console window will state which particles have it confused. 
		Delete those particles (using the middle mouse button), and re-pick them, as necessary.</li>
		<li>The particles will be numbered to the right of and slightly above the point where you clicked. 
			So, it may be useful to start from the top right and work your way toward the bottom left. </li>
		<li>Your initial fit of the angles will probably be clustered in a small area 
			(it isn't easy to find common constellations of particles in the tilted and untilted micrographs), 
			so your clicked coordinates may deviate from the fitted coordinates as you stray from that cluster. 
			If, while picking pairs, the fitted locations stray from the correct location, 
			it may help to re-do the fitting.</li>
                <li>If you close a pair or micrographs and re-open them
                    (with the appropriate <i>Marker File Number</i>), 
                    you can resume from where you left off.</li>
	  </ul>
	<p />


<li><p><b>Obtain a noise image for normalization</b></p></li>

    <p> We will be normalizing the images using the SPIDER command 
	 <a href="../../../man/cefit.html">
	'CE FIT'</a>, which fits the histogram of the background to that of a "noise" image. 
	The procedure file <a href="../makesomenoise.rct">makesomenoise.rct</a> will window out 
	a series of candidate images to use as the noise reference 
	from a full-size micrograph <font class="input">Micrographs/mic****</font> 
	(choose any micrograph).
    </p>

    <b>Outputs:</b><br />
    
    <table class="outs">
    <tr valign="top"><td>&curren;</td>
	<td><font class="output">noise</font>:</td>
	<td>An noise reference image at random.</td></tr>
    <tr valign="top"><td>&curren;</td>
	<td><font class="output">tmpnoise/noi</font>:</td>
	<td>A series of candidate noise references.</td></tr>
    </table>
    
    <p> You can look at the noise images <font class="output">tmpnoise/noi***</font>
	and copy one that looks "noisiest" to <font class="output">noise.spi</font>
	(in the top-level directory).
	
	A second option is to copy a pre-existing noise reference from another project to 
	<font class="output">noise.spi</font>.
	
	A third option is to open as a montage <font class="output">tmpnoise/noi</font> 
	and note the image number of your preferred noise reference for the next step, 
	<a href="../windowparticles.rct">windowparticles.rct</a>.
    </p>
    

<li><p><b>Window out particles from tilted and untilted micrographs.</b></p></li>

    <p> In this step, the procedure file <a href="../windowparticles.rct">windowparticles.rct</a>
	will window out particles from the untilted and tilted particles from 
	the micrographs <font class="input">Micrographs/mic****</font>, using 
	the coordinates doc files <font class="input">Micrographs/dcu****</font> and
	<font class="input">Micrographs/dct****</font>.  
	Windowed images will be normalized using 
	the <font class="input">noise</font> file from the previous step.
    </p>
    
    <p> For the parameter <b><i>[shrinkFactor]</i></b>, 
	if you picked particles from the micrographs downsampled in 
	<a href="../shrinkmics.rct">shrinkmics.rct</a> 
	enter the reduction factor used in that step. 
	If on the other hand you loaded the full-sized micrographs 
	(not recommended because of slowness), 
	then enter the value used under <i>Edit</i> &gt; <i>Resize</i> 
	(for <font class="guitool">JWEB</font>) or 
	<i>Image reduction factor</i> (for <font class="guitool">WEB</font>). 
	Ultimately, this parameter needs to be the multiplicationg factor between 
	the full-sized micrograph and the version used for particle-selection.
    </p>

    <b>Outputs:</b><br />
    <table class="outs">
        <tr valign="top"><td>&curren;</td>
            <td><font class="output">listparticles</font>:</td>
            <td>A list of windowed particles, along with the corresponding (untilted) micrograph number.</td></tr>
        <tr valign="top"><td>&curren;</td>
            <td><font class="output">Zerodegr/stk2-winrot</font>:</td>
            <td>Windowed-particle stack from the untilted-specimen micrographs.</td></tr>
        <tr valign="top"><td>&curren;</td>
            <td><font class="output">Tilted/stk2-winrot</font>:</td>
            <td>Windowed-particle stack from the tilted-specimen micrographs.</td></tr>
    </table>
    
    <p> There are additional outputs, <font class="output">Zerodegr/stk0-unrot</font> and 
        <font class="output">Tilted/stk0-unrot</font>.  
        See this <a href="eulers.htm">note about Euler angles</a> for information about 
        how the different outputs relate to the 3D reconstruction.
    </p>

    <p> The outputs <font class="output">Zerodegr/stk1-winrot_backup</font> and 
        <font class="output">Tilted/stk1-winrot_backup</font> are 
        generated in case high-pass filtration needs to be repeated.
    </p>

<li><p><b>[Recommended for negatively-stained images] High-pass filter windowed images</b></p>
    
    <p>For negatively-stained images, it is often the case that the puddle of stain surrounding the particles 
    dominates the classification (although maybe not the case for deep-stained specimens).  
    In this case, it may be helpful to high-pass filter the images using a filter radius 
    larger than the size of your particle.  If you cut off <u>too</u> much of the low-frequency information 
    however, the aligning power of the images will be lost.  You may need to tweak the radii.</p> 
    
    <p>If you are unsure whether to do these steps, feel free to skip them, 
    but be sure to look at the reconstituted images when you run 
    <a href="../ca-pca.rct">ca-pca.rct</a> 
    in order to see if the stain is the predominant source of variation. </p> 
    
    <p>The procedure files 
        <a href="../highpass-untilted.rct">highpass-untilted.rct</a> and
	<a href="../highpass-tilted.rct">highpass-tilted.rct</a> read stacks
	<font class="input">Zerodegr/stk1-winrot_backup</font> and <font class="input">Tilted/stk1-winrot_backup</font>, 
	respectively, the input directories are renamed <font class="output">Zerodegr/Unhighpass</font> and 
	<font class="output">Tilted/Unhighpass</font>.</p>
	
    <b>Outputs:</b><br />
    
    <table class="outs">
        <tr valign="top"><td>&curren;</td>
            <td><font class="output">Zerodegr/stk2-winrot</font>:</td>
            <td>High-pass filtered untilted-specimen image stack (overwrites previous version).</td></tr>
        <tr valign="top"><td>&curren;</td>
            <td><font class="output">Tilted/stk2-winrot</font>:</td>
            <td>High-pass filtered tilted-specimen image stack (overwrites previous version).</td></tr>
    </table>


<li><p><b>Screen the windowed images for defects (micrograph edges, dust, etc.).</b></p></li>

    <p> Here, we will screen the images for gross defects, such as micrograph edges, dust, <i>etc.</i>
	using <font class="guitool">montagefromdoc.py</font>. Steps: </p>

	  <ol>
	    <li>Open the untilted-specimen images by typing:
		<br /><code class="snippet">montagefromdoc listparticles.spi Zerodegr/stk2-winrot.spi</code>
		<br />The (hidden) input <font class="input">.montagefromdoc</font> should have been present in the tarball, 
		but ensure that the output doc file is called <font class="output">notgood</font></li>
	    <li>Select only the bad particles.  
		Hit <i>PageDown</i> and <i>PageUp</i> to navigate though the screenfuls of images. </li>
	    <li>Save the selection file with <i>CTRL-s</i>.  
		A more detailed description of <font class="guitool">montagefromdoc.py</font> can be found 
		<a href="https://spider-em.github.io/spire/tools-docs/montagefromdoc.html">
		here</a>.</li>
	    <li>If particles are to be rejected, run: <a href="../removebad.rct">removebad.rct</a>. 
		This procedure file, and its subroutine <a href="../backup.rct">backup.rct</a>,
		backs up and updates <b>listparticles</b>.</li>
	    <li>Screen the tilted-specimen images by typing:
		<br /><code class="snippet">montagefromdoc listparticles.spi Tilted/stk2-winrot.spi</code></li>
	    <li>Select the bad particles. </li>
	    <li>If additional particles are to be rejected, re-run: 
                <a href="../removebad.rct">removebad.rct</a>  
		to update <b>listparticles</b>.</li>
	  </ol>

    <p> The types of particles that should be rejected are those that will interfere with the 2D alignment 
	or 3D reconstruction.  
	Cut-off images, where the particle was too close to the edge of the micrograph, 
	fall in this category. 
	For tilted images, particles with dust should be thrown out 
	if the dust will interfere with the reconstruction. 
	For untilted images, dust is more tolerable; 
	if the dust interferes with the 2D alignment, offending particles can be thrown out later. 
	For the tilted images, this is the last opportunity to exclude them.
    </p>

<li><p><b>Align the untilted-specimen particles using reference-free alignment.</b></p></li>

    <p> In order to run classification, the particle will first be run through reference-free alignment.  
	Even if there are different views of particles (orientation or conformation), 
	the idea is that these different classes of particles will align consistently with 
	the type of particle to which it is aligned.
    </p>
	
    <p> There are a few different implementations of reference-free alignment, such as 
	<a href="../../../man/apsr.html">'AP SR'</a>. 
	The procedure file used here, 
        <a href="../pairwise.rct">pairwise.rct</a>, uses an algorithm called 
	the "pyramidal system for prealignment construction."  For more information, see the 
	<a href="../../../techs/MSA/index.html">
	MSA documentation</a>.  
    </p>
	
    <p> Briefly, <a href="../pairwise.rct">pairwise.rct</a> takes the first two images from the stack
	<font class="input">Zerodegr/stk2-winrot</font>, aligns them, and averages them.  
	In the next iteration, it will align pairs of averages, and then average them, 	and so forth.  
	This type of alignment appears to be less random than does 
	<a href="../../../man/apsr.html">'AP SR'</a>, 
	which chooses seed images as alignment references.</p>

	<b>Outputs:</b><br />
	
	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Pairwise/stkcentavg</font>:</td>
                <td>Stack of centered intermediate averages, with circles overlain.
                    <br />See note about centering on the 
                    <a href="../align.htm">alignment parameters page</a>.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/stk3-aligned</font>:</td>
                <td>Aligned untilted-specimen image stack.
                    <br />This stack will be overwritten with subsequent alignments.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Pairwise/stkaligned</font>:</td>
                <td>Copy of aligned untilted-specimen image stack,
                    <br />retained locally to the <font class="output">Pairwise/</font> directory.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Pairwise/rfreeavg001</font>:</td>
                <td>Final average of all images.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Pairwise/docalign</font>:</td>
                <td>Alignment doc file.</td></tr>
	</table>

    <p>See a description of the key parameters 
         <a href="align.htm">alignment parameters page</a>.</p>
    

<li><p><b>[Optional] Align average along coordinate axes</p></b></li>

    <p> These two steps are for purely aesthetic reasons. 
	Following reference-free alignment, the image average will be in an arbitrary orientation. 
	These two steps attempt to reorient the average to a less arbitrary orientation.</p>
	
      <ol>
	<li><p>The procedure file <a href="../reorientavg.rct">reorientavg.rct</a> 
	    will attempt to find a bilateral symmetry axis in 
	    <font class="input">Zerodegr/Pairwise/rfreeavg001</font>, 
	    and then orient that symmetry axis along the coordinate axes.</p>

	    <b>Outputs:</b><br />
	    
	    <table class="outs">
                <tr valign="top"><td>&curren;</td>
                    <td><font class="output">Zerodegr/Pairwise/malign</font>:</td>
                    <td>Montage of reorientation candidates (see below).</td></tr>
                <tr valign="top"><td>&curren;</td>
                    <td><font class="output">Zerodegr/Pairwise/dsolalign</font>:</td>
                    <td>Alignment doc file for reorientaiton attempts.</td></tr>
	    </table>
	    
	    <p> The output <font class="output">Zerodegr/Pairwise/malign</font> 
		outlines the progress of the procedure file. 
		It takes the average <font class="input">Zerodegr/Pairwise/rfreeavg001</font> 
		and mirrors it. 
		The procedure file then takes the autocorrelation functions (ACF) of both images and 
		aligns the ACFs.  
		The best fit is rotated to vertical (solution 1) and horizontal (solution 2). 
		The procedure file also attempts to align the images in real space (solutions 3 &amp; 4).
	    </p>
	</li>
	    
	<li><p>Choose the preferred solution number from the previous step (if any), and
	    enter it as parameter <i><b>[solutionNum]</b></i> in 
            <a href="../sumalign.rct">sumalign.rct</a>.
	    This procedure file reads the alignment information for the corresponding solution number from 
	    <font class="input">Zerodegr/Pairwise/dsolalign</font>, 
	    combines it with the reference-free alignment parameters in 
	    <font class="input">Zerodegr/Pairwise/docpairalign</font>, and applies them to 
	    the unaligned image stack <font class="input">Zerodegr/stk2-winrot</font>.  </p>

        <b>Outputs:</b><br />
        
        <table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/stk3-aligned</font>:</td>
                <td>Aligned untilted-specimen image stack.
                    <br />This stack will be overwritten with subsequent alignments.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Pairwise/sumaligned</font>:</td>
                <td>Aligned untilted-specimen image stack.
                    <br />This copy is retained locally to the <font class="output">Pairwise/</font> directory.</td></tr>
                <tr valign="top"><td>&curren;</td>
                    <td><font class="output">Zerodegr/Pairwise/avgu001</font>:</td>
                    <td>Realigned 2D average.</td></tr>
                <tr valign="top"><td>&curren;</td>
                    <td><font class="output">Zerodegr/Pairwise/docalign</font>:</td>
                    <td>Combined alignment-parameter doc file.</td></tr>
	    </table>

	</li>
      </ol>


<li><p><b>Filter and shrink the aligned, untilted-specimen particles.</b></p></li>

	The procedure file <a href="../filtershrink.rct">filtershrink.rct</a> 
	low-pass filters and optionally shrinks the particle images. 
	The next step, multivariate data analysis, will be faster if 
	the image stack <font class="input">Zerodegr/stk3-aligned</font> are made smaller. 
	Also, the individual images will be examined subsequently and 
	will be easier to recognize if they are low-pass filtered.</p>

	<b>Outputs:</b><br />
	
	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/stkfiltered</font>:</td>
                <td>Low-pass, shrunken filtered image stack.</td></tr>
	</table>
	
	<p> The default parameters are hopefully reasonable. 
	    To view the output filtered images, type:
	    <br /><code class="snippet">montagefromdoc listparticles.spi Zerodegr/stkfiltered.spi</code></p>
	    
	<p> Adjust the filtration parameters as necessary, and re-run. 
	    Note the reduction factor for subsequent steps.
	</p>


<li><p><b>Run multivariate statistical analysis (MSA) on filtered images.</b></p></li>

    <p> The procedure file <a href="../ca-pca".rct">ca-pca.rct</a> runs 
	correspondence analysis (CA) or principal component analysis (PCA) or iterative PCA (IPCA). 
	In principle, one can classify the image stack <font class="input">Zerodegr/stkfiltered</font> 
	without running MSA, but here we will be using it. </p>
	
    <p> What this means, briefly, is that systematic variations are reduced into 
	an arbitrary number of factors (<i>e.g.,</i> 25 used here); 
	in this case, the factors can be expressed as images, or "eigenimages." 
	Each image can be reconstituted as the sum of these eigenimages, when using the proper weights.  
	How CA and PCA differ is in the way these weights are calculated. 
	The "importance" of each factor is the percent variation that is accounted for. 
	The eigenimages of lower importance typically correspond to noise. 
	Thus, an image reconstituted from the strongest eigenimages can be thought of as 
	a type of filtered image, where some contribution of noise has been excluded.
    </p>
	
    <p> For a more complete description of multivariate statistical analysis 
	(or more accurately, multivariate data analysis), see Chapter 4 in 
	<a href="#jf2006">Frank, 2006</a>.
	For details about the specific SPIDER commands pertaining to MSA, and example outputs, see the
	<a href="../../../techs/classification/tutorial.html">
	classification and clustering tutorial</a>.</p>
	
       <b>Outputs:</b><br />
       
       <table class="outs">
        <tr valign="top"><td>&curren;</td>
            <td><font class="output">Zerodegr/MSA/eigenimg</font>:</td>
            <td>Stack of eigenimages, i.e., images showing systematic correlated variations between pixels.
                <br />For more information about eigenimages (and reconstituted images), see the
                <a href="../../../techs/classification/tutorial.html#virtual">
                classification and clustering tutorial</a>.</td></tr>
        <tr valign="top"><td>&curren;</td>
            <td><font class="output">Zerodegr/MSA/reconst</font>:</td>
            <td>Stack of images reconstituted using a single factor
                <br />Factors can be positive or negative, hence the two versions for each.
                <br />For more information about reconstituted images (and eigenimages), see the
                <a href="../../../techs/classification/tutorial.html#virtual">
                classification and clustering tutorial</a>.</td></tr>
	<tr valign="top"><td>&curren;</td>
	    <td><font class="output">Zerodegr/MSA/ps_eigenvalues.ps</font>:</td>
	    <td>A PostScript file with a histogram of the percent variation for each factor.</td></tr>
	<tr valign="top"><td>&curren;</td>
	    <td><font class="output">Zerodegr/MSA/cas_IMC</font>:</td>
	    <td>A text file containing information about each factor and for each image
		<br />For more information about the output of
		<a href="../../../man/cas.html">'CA S'</a>, see the
		<a href="../../../techs/classification/tutorial.html#CAPCA">
		classification and clustering tutorial</a>.</td></tr>
	<tr valign="top"><td>&curren;</td>
	    <td><font class="output">Zerodegr/MSA/factormapAABB</font>:</td>
	    <td>PostScript format plots for factor #AA <i>vs.</i> factor #BB (where BB = AA+1)
		<br />Clusters are indicative of distinct classes.</td></tr>
	</table>

	<br /><i>Important parameters:</i>
	
	<table class="outs">
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[cas-option]</i></b>:                      </td>
		<td>Option of CA (option 1), PCA (2), or iterative PCA (3)
		    <br />One method or another sometimes crashes due to "numerical inaccuracy."
		    I subjectively try CA first, then iterative PCA, then PCA last.</td></tr>
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[num-factors]</i></b>:                      </td>
		<td>Number of factors to calculate.
		    <br />If after you run this procedure file, all of the eigenimages look meaningful,
		    then increase this parameter and re-run.</td></tr>
	</table>
	
	<p> <u>NOTE</u>: For negatively-stained samples, when looking at the reconstituted images, 
	    it may be that the stain distribution is the greatest source of variation. 
	    If this is the case, go back to the high-pass filtration step above.
	</p>

<li><p><b>Classify images.</b></p></li>

    <p> At this step, we willl attempt to separate the images into homogeneous subclasses.  
	There is a tradeoff between homogeneity of the subclasses, and 
	size of the subclasses (which is related to the improvement of signal-to-noise in the class averages). 
	In other words, if too few classes are used, dissimilar classes will be grouped together, and
	if too many classes are used, class averages will be likely redundant and noisy.
	Thus, there is some degree of subjectivity involved in the classification.
    </p>
	
    <p> For any of the classification options presented here, 
	choose the number of factors to use (parameter <i><b>[numFactors]</b></i>) 
	based on the appearance of the eigenimages and the strength of the factors (based on the histogram), 
	including those factors that you believe to represent true structural differences. 
	Use of weaker factors will probably not make a appreciable difference, however.
    </p>
	
    <p> There are three classification options given here. 
	(For hints about the usage of the different methods, see the 
	<a href="../../../techs/MSA/index.html">
	multivariate data analaysis</a> page.)
    </p>
	
    <p> To view the particles belonging to each class, refer below to the 
	<a href="#vbv">instructions about <font class="guitool">verifybyview</font></a>.</p>
	
	<br />Choose one of the following 3 classification options:
	  <ol TYPE=A>
	    <li><b>[Recommended] Hierarchical classification, using Ward's method.</b> </li>
	      <ol>
		<li><p><b>Run hierarchical classification.</b></p> </li>
		
		    <p> This classification method uses SPIDER command
			<a href="../../../man/clhc.html">'CL HC'</a>. 
			For a description of the outputs, see the 
			<a href="../../../techs/classification/tutorial.html#clhc">
			classification and clustering tutorial</a>.
		    </p>
			
		    <p>The procedure file <a href="../hierarchical.rct">hierarchical.rct</a> 
			reads the MSA factor text file <font class="input">Zerodegr/MSA/cas_IMC</font>.</p>
		
			<b>Output:</b><br />
			
			<table class="outs">
			<tr valign="top"><td>&curren;</td>
			    <td><font class="output">Zerodegr/Hierarchical/docdendro</font>:</td>
			    <td>Dendrogram doc file, showing the relatedness between images.
				<br />See the <a href="../../../techs/classification/tutorial.html#clhc">
				classification and clustering tutorial</a> for more details.
				</td></tr>
			</table>
			
		<li><b>Generate class averages.</b></li>
		
		<p> In the previous step, we didn't explicitly assign classes. 
		    We simply made the dendrogram, which describes the relatedness of the images. 
		    In this step, we will explicitly pare down the dendrogram into classes.</p>
		    
		Choose one of:		
		  <ol TYPE=a>
		    <li><b>[Recommended] Generate binary tree</b></li>
		    
			<p> It is somewhat arbitrary where to cut off the dendrogram 
			    <font class="input">Zerodegr/Hierarchical/docdendro</font> generated above. 
			    This procedure file will generate class averages for <u>all</u> depths until a specified cutoff, 
			    averaging the image stack <font class="input">Zerodegr/stkfiltered</font>.
			    The output class averages are arranged into the format of a binary tree, such that 
			    the average is the top-level node, the first two subclasses are at the next depth, 
			    the first two classes of each of those two classes are at the next depth, etc.
			    While it becomes straightforward how to draw the tree, the drawback is that 
			    information is lost about the height of the branches.  
			    That is, the height of the branches in the binary tree does not direct correspond to 
			    the actual height of the branch in the dendrogram.
			</p>
			    
			<p> In the procedure file 
                            <a href="../binarytree.rct">binarytree.rct</a> 
			    (which calls <a href="../averagenode.rct">averagenode.rct</a> 
			    and          <a href="../update_lut.rct">update_lut.rct</a>), 
			    the parameter <i><b>[end-depth]</b></i> 
			    will call for 2**<i><b>[end-depth]</b></i> class averages. 
			    It is better to err on the side of too high a depth and display fewer in the next step.
			</p>
			    
			    <b>Outputs:</b><br />
			
			    <table class="outs">
                                <tr valign="top"><td>&curren;</td>
                                    <td><font class="output">Zerodegr/Tree/classavg***</font>:</td>
                                    <td>Class average for each node on the binary tree.</td></tr>
                                <tr valign="top"><td>&curren;</td>
                                    <td><font class="output">Zerodegr/Tree/labeled***</font>:</td>
                                    <td>Class average, labeled with the class number and the number of particles.</td></tr>
			    </table>
			    
			<p><u>NOTE</u>: The format of SPIDER's dendrogram doc file changed in version 17.13. 
			    Previously the top two branches had height 1, whereas now, it's 100. 
			    If this procedure file crashes, check the parameter <b><i>[top-branch]</i></b>.
			</p>
			    
			<p> Instructions for viewing the binary tree are given below, 
			    in the section below, on the <a href="#treepy">selection of class averages</a>.
			</p>
			
		    <li><b>Generate a pre-specified number of class averages</b></li>
		    
		    <p> To use this option, run procedure file 
                        <a href="../classavg.rct">classavg.rct</a>. 
                        This option cuts off the dendrogram <font class="input">dendrodoc</font> at a specific height.  
			The height determines the number of classes into which the dendrogram is pared. 
			The number of classes desired is specified by the parameter <i><b>[numClasses]</b></i> in 
			<a href="../classavg.rct">classavg.rct</a>. 
			However, because of the imprecision in how the appropriate height in the dendrogram is searched, 
			the actual number of classes found may not exactly match the desired number of classes. 
		    </p>
		    
		    <b>Outputs:</b><br />
			<table class="outs">
                            <tr valign="top"><td>&curren;</td>
                                <td><font class="output">Zerodegr/Hierarchical/classavg***</font>:</td>
                                <td>Class averages.</td></tr>
                            <tr valign="top"><td>&curren;</td>
                                <td><font class="output">Zerodegr/Hierarchical/docclass***</font>:</td>
                                <td>List of particles belonging to each class.</td></tr>
                            <tr valign="top"><td>&curren;</td>
                                <td><font class="output">Zerodegr/Hierarchical/listclasses</font>:</td>
                                <td>Doc file with each information about each class
                                    <br />Needed as an input for <font class="guitool">verifybyview.py</font> 
                                    (<a href="#vbv">more information below</a>).</td></tr>
                            <tr valign="top"><td>&curren;</td>
                                <td><font class="output">Zerodegr/Hierarchical/classvar***</font>:</td>
                                <td>Class variances.</td></tr>
			</table>
		  </ol>
	      </ol>

	    <li><p><b>Run K-means classification</b></p> </li>
	    
	    <p> K-means classification uses the SPIDER command
		<a href="../../../man/clkm.html">
		'CL KM'</a>.  In contrast to the other classification options presented here, 
		K-means will generate exactly the number of classes requested.  
		The procedure file <a href="../kmeans.rct">kmeans.rct</a> reads 
		<font class="input">Zerodegr/MSA/cas_IMC</font> and, in a single step, 
		generates <i>K</i> (parameter <i><b>[numClasses]</i></b> in the procedure file) classes 
		from the image stack <font class="input">Zerodegr/stkfiltered</font>.
	    </p>
	    
	    <b>Outputs:</b><br />
		    <table class="outs">
                        <tr valign="top"><td>&curren;</td>
                            <td><font class="output">Zerodegr/Kmeans/docassign</font>:</td>
                            <td>Doc file of analogous format to 
                                dendrograms from the other 2 classification methods.</td></tr>
                        <tr valign="top"><td>&curren;</td>
                            <td><font class="output">Zerodegr/Kmeans/classavg***</font>:</td>
                            <td>Class averages.</td></tr>
                        <tr valign="top"><td>&curren;</td>
                            <td><font class="output">Zerodegr/Kmeans/docclass***</font>:</td>
                            <td>List of particles belonging to each class.</td></tr>
                        <tr valign="top"><td>&curren;</td>
                            <td><font class="output">Zerodegr/Kmeans/listclasses</font>:</td>
                            <td>Doc file with each information about each class
                                <br />Needed as an input for <font class="guitool">verifybyview.py</font> 
                                (<a href="#vbv">more information below</a>).</td></tr>
                        <tr valign="top"><td>&curren;</td>
                            <td><font class="output">Zerodegr/Kmeans/classvar***</font>:</td>
                            <td>Class variances.</td></tr>
		    </table>
	    
	    <li><p><b>Clustering using Diday's method</b></p> </li>
	      <ol>
		<li><p><b>Run hierarchical classification.</b></p> </li>
		
		    <p> The procedure file <a href="../cluster.rct">cluster.rct</a> uses SPIDER command
			<a href="../../../man/clcla.html">
			'CL CLA'</a>, which uses Diday's method of moving centers. 
			Like with Ward's method above, this method is hierarchical, 
			reading <font class="input">Zerodegr/MSA/cas_IMC</font>.</p>
		    
			    <b>Outputs:</b><br />
			    
			    <table class="outs">
                                <tr valign="top"><td>&curren;</td>
                                    <td><font class="output">Zerodegr/Cluster/docdendro</font>:</td>
                                    <td>Dendrogram doc file, showing the relatedness between images.
                                        <br />See the 
                                        <a href="../../../techs/classification/tutorial.html#clhc">
                                        classification and clustering tutorial</a> for more details.
                                        </td></tr>
			    </table>
		    
		<li><b>Generate class averages.</b></li>
	    
		    <p> With the previous step, analogously to Ward's method above, 
			we didn't explicitly assign classes. 
			We simply made the dendrogram 
			<font class="input">Zerodegr/Cluster/docdendro</font>, 
			which describes the relatedness of the images. </p>
			
		    <p> In the procedure file <a href="../classavg.rct">classavg.rct</a>, 
			we will explicitly pare down the dendrogram into classes. 
			(I haven't been able to make Diday's method compatible with 
			<a href="../binarytree.rct">binarytree.rct</a>,
			so for now, it's functionally equivalent to K-means.) </p>
			
		    <p> <u>NOTE:</u> The default parameter <i><b>[class-type]</b></i> 
                        in the procedure file is for Ward's hierarchical method, 
			so change that parameter to <i><b>2</b></i>.
		    </p>
			
			<b>Outputs:</b><br />
			    <table class="outs">
                                <tr valign="top"><td>&curren;</td>
                                    <td><font class="output">Zerodegr/Cluster/classavg***</font>:</td>
                                    <td>Class averages.</td></tr>
                                <tr valign="top"><td>&curren;</td>
                                    <td><font class="output">Zerodegr/Cluster/docclass***</font>:</td>
                                    <td>List of particles belonging to each class.</td></tr>
                                <tr valign="top"><td>&curren;</td>
                                    <td><font class="output">Zerodegr/Cluster/listclasses</font>:</td>
                                    <td>Doc file with each information about each class
                                        <br />Needed as an input for <font class="guitool">verifybyview.py</font> 
                                        (<a href="#vbv">more information below</a>).</td></tr>
                                <tr valign="top"><td>&curren;</td>
                                    <td><font class="output">Zerodegr/Cluster/classvar***</font>:</td>
                                    <td>Class variances.</td></tr>
			    </table>
	      </ol>
	  </ol>
	  
    <p> It may be informative to see the individual particles that belong to each class. 
	This can be accomplished by using 
	<a href="https://spider-em.github.io/spire/tools-docs/verifybyview.html">
	<font class="guitool">verifybyview.py</font></a>. 
	There should be a settings file, <a href=".verifybyview">.verifybyview</a>, 
	present in the tarball. 
	For more details, refer below to the 
	<a href="#vbv">section on viewing the class averages and constituent particles</a>.
    </p>    

<li><p><b>Select unique classes</b></p></li>

    <p> In the next step, we will select class averages to use as references for multireference alignment. 
	The first option applies to the output of <a href="../binarytree.rct">binarytree.rct</a> above. 
	The second option applies to all classification options from above, 
	including the output of <a href="../binarytree.rct">binarytree.rct</a>.
    </p>
    
      <ol TYPE=A>
	<li><a name="treepy"><b>View and select classes from binary tree</b></a></li>
	
	    <p> To view the binary tree, <code class="snippet">cd Zerodegr/Tree</code> and run:
		<br /><code class="snippet">binarytree labeled001.spi 4 goodclasses.spi</code>
	    </p>
	    
	    <p> The parameter <b><i>4</i></b> on the command line above specifies 
		the maximum depth displayed of the tree.  
		A depth of <b><i>2</i></b>, in comparison, 
		would display only the combined average plus 
		the two classes corresponding to the first branch in the dendrogram. 
		Unlike the <i>Dendrogram</i> option in 
		<a href="https://spider-em.github.io/Web/docs/web.html">WEB</a>, 
		one advantage of <font class="guitool">binarytree.py</font> is that 
		averages are also shown for the non-terminal branches. 
		A disadvantage is that the height of the branches in the tree are purely relative, 
		and have no bearing to the numerical height of the branch point in the dendrogram
		(and thus the relatedness of the classes).
	    </p>

	    <p> As one proceeds down the tree, the number of classes increases, and 
		the number of particles per class decreases. 
		As is the case with classification in general, 
		there is a tradeoff between too big a class, 
		such that dissimilar particles are combined, and 
		too small a class, where the signal-to-noise ratio is low. 
		One strategy for displaying an appropriate depth is 
		the point at which a parent class's subclasses do not look different than the parent class. 
	    </p>

	    <p> Save the selection file with <i>CTRL-s</i>. 
		Further options for the program are described on the 
		<a href="../../../techs/MSA/index.htm"> MSA page</a>.
	    </p>
		
	    <p> The script 
                <a href="https://spider-em.github.io/spire/bin/binarytree.py">
                <font class="guitool">binarytree.py</font></a> 
                requires   
		<a href="https://spider-em.github.io/spire/install.html">
		<font class="guitool">SPIRE installation</font></a>.
 
		If you don't have <font class="guitool">SPIRE</font></a> installed, 
		you can alternatively run <a href="../tree.rct">tree.rct</a>, 
		which generates a (large) SPIDER image, <font class="output">Zerodegr/Tree/tree*</font>. 
		To generate a selection file of class averages, <code class="snippet">cd Zerodegr/Tree</code>, 
		and either categorize the montage of class averages in 
		<font class="guitool">WEB</font> or <font class="guitool">JWEB</font>, 
		or manually create the selection file interactively in SPIDER using 
		<a href="../../../man/doccreate.html"> 'DOC CREATE'</a>.  
                The selection file should be called 
		<font class="output">Zerodegr/Tree/goodclasses</font>.
	    </p>
	    
	<li><b><a name="vbv">View the class averages and, optionally, the constituent particles using 
	    <font class="guitool">verifybyview.py</font></a></b></li>
	    
	    <p> This option can be used for any of the classification schemes described above. 
		It can also be used in conjuction with <font class="guitool">binarytree.py</font> to 
		view the individual particles that belong to a class.
	    </p>
	    
	    <p> Open <font class="guitool">verifybyview.py</font> by typing: <br />
		<code class="snippet">verifybyview Zerodegr/Tree</code> &nbsp; 
                  if you used the binary-tree option, or <br />
		<code class="snippet">verifybyview Zerodegr/Kmeans</code> &nbsp; 
                  if you ran K-means classification, or <br />
		<code class="snippet">verifybyview Zerodegr/Cluster</code> &nbsp; 
                  if you used Diday's clustering method, <i>etc.</i>
	    </p>

	    <p> The script 
                <a href="verifybyview.py"><font class="guitool">verifybyview.py</font></a> 
		requires  <a href="https://spider-em.github.io/spire/install.html">
                SPIRE installation</a>.
	    </p>
	    
	    <br />Included in the tarball is a starting 
                <a href=".verifybyview">.verifybyview</a> file 
		with mostly reasonable settings. 
		The primary purpose of that 
                <a href=".verifybyview">.verifybyview</a> file, however, 
		was to view classes for multireference alignment, so 
		you may wish to change the following 2 settings:
		
		<table class="outs">
		    <tr valign="top"><td>&curren;                                           </td>
			<td><i>Display &gt; <b>reverse order</b></i>:                       </td>
			<td>Toggling this option will display the averages starting from #1.</td></tr>
		    <tr valign="top"><td>&curren;                                           </td>
			<td><i><i>Display &gt; labels &gt; <b>text label</b></i></i>:                      </td>
			<td>Change <i><b>CCC</b></i> to <i><b>N</b></i>
			    for the number of particles in a class.                        </td></tr>
		</table>

<!--    	    <p> The <a href=".verifybyview">.verifybyview</a> file is updated with each change. 
		If you make a mistake, or wish to revert to the original, 
		there are copies the of the file included in the tarball, called
		<a href=".verifybyview.tree">.verifybyview.tree</a> and 
		<a href=".verifybyview.multiref">.verifybyview.multiref</a>.
	    </p>-->
	    
		If <a href=".verifybyview">.verifybyview</a> is not present 
		(it is a hidden file, starting with a period, so to list it, type 
		<code class="snippet">ls -a</code> in your toplevel directory), 
		you will need to adjust the filenames. 
		In the initial popup window, the values should be:
	    
		<table class="outs">
                    <tr valign="top"><td>&curren;</td>
                        <td><font class="input">.spi</font>:</td>
                        <td>Data extension. Adjust as necessary</td></tr>
                    <tr valign="top"><td>&curren;</td>
                        <td><font class="input">Zerodegr/Tree</font>:</td>
                        <td>Initial directory.</td></tr>
                    <tr valign="top"><td>&curren;</td>
                        <td><font class="input">listclasses</font>:</td>
                        <td>List of classes.</td></tr>
                    <tr valign="top"><td>&curren;</td>
                        <td><font class="input">classavg***</font>:</td>
                        <td>Class-average template.</td></tr>
		</table>

	    <br />The first time you click on a class average, 
		a popup menu will appear to confirm filenames, 
		some of which are repeated from the initial popup menu. 
		The key filenames are:
	    
		<table class="outs">
                    <tr valign="top"><td>&curren;                          </td>
                        <td><font class="input">docclass***.spi</font>:    </td>
                        <td>List of particles belonging to each class.     </td></tr>
                    <tr valign="top"><td>&curren;</td>
                        <td><font class="input">Zerodegr/Filtered/flt*****.spi</font>:</td>
                        <td>Filtered-image template.                        </td></tr>
                    <tr valign="top"><td>&curren;                           </td>
                        <td><font class="output">goodclasses.spi</font>:    </td>
                        <td>List of selected classes.                       </td></tr>
		</table>
	    
	    <p> When you click on a class average 
		(except for the first instance, when a popup menu appears), 
		a montage of individual particles will appear. 
	    <br /><u>NOTE</u>: There is a limit of how many images that can be displayed in one montage. 
		Clicking on a class with ~1000 particles will show an error message to the console window.
	    </p>

	    <p> It is unnecessary to verify individual particles at this time. 
		Instead, simply select the class averages that you wish to use for multireference alignment. 
		Select the classes averages by right-clicking on them. 
		When you are finished, save the selection by going to the 
		<i>File</i> menu and selecting <i>Save selection</i> (or <i>ALT-s</i>).
	    </p>
      </ol>


<li><p><b>Run multireference alignment</b></p></li>

    <p>The procedure file <a href="../multirefalign.rct">multirefalign.rct</a> 
	takes the class averages <font class="input">classavg***</font> 
	selected in the previous step in <font class="input">goodclasses</font>, 
	re-centers them, and uses them for multireference alignment. 
	The previously aligned image stack <font class="input">Zerodegr/stk3-aligned</font> 
	is used to generate the reference images 
	(the class averages are derived from filtered images which may have been downsampled), 
	and the unaligned image stack <font class="input">Zerodegr/stk2-winrot</font> 
	will be aligned to those references. 
    </p>
    
    <p><u>NOTE</u>: Ensure that the classification method that you used 
	is reflected in the procedure file label <b><i>[old_class_dir]</i></b>. 
	If you used K-means, for example, use the directory <font class="input">Zerodegr/Kmeans</font>.
	The default in the procedure file is <font class="input">Zerodegr/Tree</font>. 
    </p>
    
    <b>Outputs:</b><br />
	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Multiref1/stkref</font>:     </td>
                <td>Stack of reference images used for alignment.
                    <br />They should resemble full-sized, unfiltered versions of the selected class averages</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Multiref1/docalign</font>:  </td>
                <td>Alignment parameters
                    <br />See the documentation for 
                    <a href="../../../man/apsh.html">
                    'AP SH'</a> for an explanation of the doc file.           </td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Multiref1/selview***</font>:</td>
                <td>A list of particles belonging to each class.              </td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Multiref1/stkcenu</font>:    </td>
                <td>Aligned untilted-specimen image stack.
                    <br />This copy is retained locally to the <font class="output">Pairwise/</font> directory.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/stk3-aligned</font>:         </td>
                <td>Aligned untilted-specimen image stack.
                    <br />This stack will be overwritten with subsequent alignments.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Multiref1/viewavg***</font>: </td>
                <td>Average of particles belonging to each reference.          </td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/docmultiref</font>:          </td>
                <td>Keeps track of successfully executed iterations of multireference alignment.</td></tr>
	</table>

    <p>
    In addition to the same key <a href="align.htm">alignment parameters</a> as above in 
    <a href="../pairwise.rct">pairwise.rct</a>, 
    you may be interested in some of the consequences of <b><i>[mirror-option]</i></b>, 
    described in my <a href="flipflop.htm">note about mirroring references</a>.
    If this parameter is set to 0 (the default), experimental images are NOT compared to mirrored references. 
    This default is the safe choice.
    </p>
    

<li><p><b>Re-filter aligned images</b></p></li>

    <p> With newly aligned images, we will re-filter and optionally shrink the images before re-classifying them. 
	The newly aligned image stack, <font class="input">Zerodegr/stk3-aligned</font>, 
	overwrote the old version, thus the inputs and outputs of <a href="../filtershrink.rct">filtershrink.rct</a> 
	will remain the same.
    </p>

	<b>Outputs:</b><br />
	
	<table class="outs">
	<tr valign="top"><td>&curren;</td>
	    <td><font class="output">Zerodegr/stkfiltered</font>:</td>
	    <td>Low-pass, shrunken filtered image stack.</td></tr>
	</table>
	
    <p> Adjust the parameters as necessary, 
	although the parameters used previously should be applicable.
    </p>

<li><p><b>Classify the particles assigned to each reference</b></p></li>

    <p> In the next step, we will perform separate classifications for the particles belonging to each reference. 
	In principle, the particles assigned to each reference should be identical. 
	However, if too few references were chosen, there may be homogeneous subsets assigned to a reference. 
	Also, if there are subtle but systematic structural differences, 
	those difference may be noticeable upon MSA and classification. 
	Also, junk particles (damaged particles or contaminants) may not match any references well. 
    </p>
    
    <p> The procedure file <a href="../classifybyview.rct">classifybyview.rct</a> 
	performs separate classifications on the image stack <font class="input">Zerodegr/stkfiltered</font>
	for each of the selection doc files <font class="input">Zerodegr/Multiref1/selview***</font>. 
	As a rough measure of the quality of each particle and each class average, 
	the cross-correlation coefficient (CCC) is computed against the reference 
	<font class="input">Zerodegr/Multiref1/ref***</font>.
    </p>
    
    <b>Outputs</b>:<br />
	
	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Multiref1/listclasses</font>:</td>
                <td>List of classes for all references
                    <br />Also contains various statistics for each class.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Multiref1/classavg***</font>:</td>
                <td>Class averages.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Multiref1/docclass***</font>:</td>
                <td>List of particles belonging to each class.</td></tr>
	</table>

	<br /><i>Notable parameters include:</i>
	
	<table class="outs">
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[reduce-factor]</i></b>:                      </td>
		<td>Reduction factor applied in <a href="../filtershrink.rct">filtershrink.rct</a>.</td></tr>
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[ca-pca]</i></b>:                      </td>
		<td>Option of CA (option 1), PCA (2), or iterative PCA (3)
		    <br />One method or another sometimes hangs due to "numerical inaccuracy."
		    I subjectively try CA first, then iterative PCA, then PCA last.</td></tr>
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[first-view]</i></b>:                      </td>
		<td>If this procedure file hangs or crashes after <i>N</i> reference-views, 
		    <br />change the <b><i>[ca-pca]</i></b> option and 
		    re-start the procedure file at <i>N+1</i>.</td></tr>
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[num-factors]</i></b>:                      </td>
		<td>Number of factors to calculate in MSA and use in classification. 
		    <br />The classification does not appear to depend greatly on this value, 
		    but you can check the eigenimages to see if variation is not well-represented.</td></tr>
	</table>
	

<li><p><b>Check the classification results using <font class="guitool">verifybyview</font></b></p></li>

    <p> We will check the results of the classifiaction using <font class="guitool">verifybyview</font>, 
	which requires libraries belonging to <font class="guitool">SPIRE</font>. 
	See the <a href="https://spider-em.github.io/spire/spire-docs/packages.html">
	installation instructions here</a>.
    </p>
	
    <p> Specifically, what we are looking for is that there is no subpopulation within each reference-view 
	that warrants its own class. 
	So for each reference-view, we will select the distinct class averages, and 
	use those for the next round of multi-reference alignment and classification. 
	If there is only one distinct class for each reference-view, you are finished with this step and 
	can proceed to the step of <a href="#verify">verifying individual particle images</a>.
    </p>

    <p> Open <font class="guitool">verifybyview.py</font> by typing:        <br />
	     <code class="snippet">verifybyview Zerodegr/Multiref1</code>
    </p>

    <p> Included in the tarball is a starting <a href=".verifybyview">.verifybyview</a> file 
	with mostly reasonable settings. 
	However, if you viewed the outputs of <a href="../binarytree.rct">binarytree.rct</a>, 
	<a href="../classavg.rct">classavg.rct</a>, or 
        <a href="../kmeans.rct">kmeans.rct</a>, 
	this file will have been modified.  
<!--    	Either edit the settings, or copy the archived version in the tarball, 
	called <a href=".verifybyview.multiref">.verifybyview.multiref</a>, 
	to <b>.verifybyview</b>-->
    </p>
    
    The file <a href=".verifybyview">.verifybyview</a> is present in the 
    rct procedures tarball archive, 
    but if absent, you will need to adjust the filenames. 
    In the initial popup window, the values should be:

    <table class="outs">
        <tr valign="top"><td>&curren;</td>
            <td><font class="input">.spi</font>:</td>
            <td>Data extension.</td></tr>
        <tr valign="top"><td>&curren;</td>
            <td><font class="input">Zerodegr/Multiref1</font>:</td>
            <td>Initial directory.</td></tr>
        <tr valign="top"><td>&curren;</td>
            <td><font class="input">listclasses</font>:</td>
            <td>List of classes.</td></tr>
        <tr valign="top"><td>&curren;</td>
            <td><font class="input">classavg***</font>:</td>
            <td>Class-average template.</td></tr>
    </table>

    <br />The first time you click on a class average, 
	a popup menu will appear to confirm filenames, 
	some of which are repeated from the initial popup menu. 
	(For this popup window, the file extensions are required, 
	but will be omitted from the list below.)
	The key files are:

	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">docclass***</font>:</td>
                <td>List of particles belonging to each class.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">Zerodegr/stkfiltered</font>:</td>
                <td>Filtered-image stack.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">goodclasses</font>:</td>
                <td>Output list of selected classes.</td></tr>
	</table>

    <p> When you click on a class average 
	(except for the first instance, when a popup menu appears), 
	a montage of individual particles will appear. 
    </p>

    <p> It is unnecessary to verify individual particles at this time. 
	Instead, simply select the class averages that you wish to use for 
	the next round of multireference alignment. 
	Select the unique classes averages by right-clicking on them. 
	Conversely, do not select similar-looking class averages, 
	which would then be used as separate references in the next round.
	When you are finished with a reference-view, save the selection by going to the 
	<i>File</i> menu and selecting <i>Save selection</i>.
	If there is only one distinct class for each reference-view, 
	proceed to the step of <a href="#verify">verifying individual particle images</a>.
    </p>

    <p> If there is an unwieldy number of classes on the main window of 
    <font class="guitool">verifybyview.py</font>, we can break the into subsets.
    Instead of the command above, type: </p>
                <code class="snippet">verifybyview Zerodegr/Multiref1/View001</code>
                
    <p>...which will show only the classes corresponding to reference 1.  
    You can proceed to the next reference by changing the directory number (e.g., <b>View002</b>)
    and pressing <i>Update</i> (after saving the class selection, if necessary).
    </p>

<li><p><b>Iterate multireference alignment and classification</b></p></li>

    <p> We will iterate multireference alignment, filtration, and classification until 
	we obtain stable classes, <i>i.e.,</i> no new classes appear. 
	For a sample that doesn't have many orientations/conformations, 
	only 2 or 3 iterations should be needed.
    </p>
    
    The specifics in the following example are for the second round of multireference alignment. 
    The 3 steps to be iterated are:
    
      <ol>
	<li><b>Run multireference alignment</b> </li>
	
	<p> The classes selected in the previous round of multireference alignment 
	    will be used as references for the next round. 
	    For example, if you selected a 2 class averages from reference-view #1, 
	    and one class average from reference-view #2, then 
	    this next iteration will have 3 references.
	</p>
	
        <p> The input file <font class="input">docmultiref</font> 
            keeps track of successfully executed iterations of multireference alignment, and is updated. 
            The default parameter <b><i>[multirefIterNum]</i></b> of <i>-1</i> will use 
            the most recent multireference alignment as input.  
            If you do not wish to use the last multireference alignment, 
            override this parameter with the iteration number that you wish to use.
            </p>

	<li><b>Filter the aligned particles</b> </li>
	
	    <p>Run <a href="../filtershrink.rct">filtershrink.rct</a> as previously.</p>
	
	<li><b>Classify the particles assigned to each reference</b> </li>
	
	    <p>Run <a href="../classifybyview.rct">classifybyview.rct</a>, 
                set the parameter <b><i>[multirefIterNum]</i></b> if 
                you do not wish to operate on the last iteration of multireference alignment. 
                This parameter will be present in many steps from this point.</p>
                
        <li><p><b>Check the classification results using <font class="guitool">verifybyview</font></b></p></li>

            <p> Select unique classes using <font class="guitool">verifybyview.py</font> 
                To open it, type: <br />
                        <code class="snippet">verifybyview Zerodegr/Multiref2/View001</code><br />
            </p>

            Remember to update number of the directory, i.e., 
            which iteration of multireference alignment you ran.

      </ol>
      
<!--        For a possible third iteration, the following changes would be needed:
      <ol>
	<li>In <a href="../multirefalign-descend.rct">multirefalign-descend.rct</a>, 
	    change input file label <b><i>[old_class_dir]</i></b> from 
	    <font class="input">Zerodegr/Multiref</font> to <font class="input">Zerodegr/Multiref2</font>
	    <br />An example, <a href="../multirefalign3plus.rct">multirefalign3plus.rct</a>, 
	    is present in the tarball.
	</li>
	<li>In <a href="../classifybyview.rct">classifybyview.rct</a>, 
	    change the label <b><i>[class_dir]</i></b> from 
	    <b>Zerodegr/Multiref2</b> to <b>Zerodegr/Multiref3</b>
	</li>
      </ol>-->
    
    <p> Iterate these 4 steps -- 
        <a href="../multirefalign-descend.rct">multirefalign-descend.rct</a>, 
        <a href="../filtershrink.rct">filtershrink.rct</a>,  
        <a href="../classifybyview.rct">classifybyview.rct</a>, and
        <font class="guitool">verifybyview</font> --
        until no new classes appear. </p>
    
<!--        <p> <u>NOTE</u>: In several steps below, I will assume that you run 2 iterations of multireference alignment. 
	If you ran a different number of iterations, pay attention to when this value is required. 
	There should be reminders in the steps below when to change filenames.
	</p>-->


<li><p><a name="verify"><b>Verify individual particles from last iteration of multireference alignment</a></b></p></li>

    <p> When we compute the 3D reconstruction, we will use only the highest-quality particles. 
	To select these particles, we will use <font class="guitool">verifybyview.py</font>. 
	To start it, assuming you performed 2 rounds of multireference alignment, type: <br />
	<code class="snippet">verifybyview Zerodegr/Multiref2/View001</code> </p>
	
    <p> You should have screened the class averages in the previous step, so 
	the filenames should be appropriate.  
	In fact, if the last directory where you viewed class averages was one of the 
	<font class="input">Zerodegr/Multiref2/View###</font> directories, 
	you do not need to include the directory name on the command line either.
    </p>
    
    <p> Now, when you open a montage of individual particle images, 
	select the images that you want to keep using the left mouse button. 
	Conversely, exclude the particles that don't resemble the reference image. 
	To crudely assist selection of the images, 
	the particles are sorted from highest CCC to worst. 
	A more thorough description of 
	<a href="https://spider-em.github.io/spire/tools-docs/verifybyview.html">
        verifybyview.py can be found here</a>. 
    </p>
    
    <b>Outputs:</b><br />
	
	<table class="outs">
	
	<tr valign="top"><td>&curren;</td>
	    <td><font class="output">Zerodegr/Multiref2/View###/goodclasses</font>:</td>
	    <td>List of classes with selected particles for each reference-view.</td></tr>
	<tr valign="top"><td>&curren;</td>
	    <td><font class="output">Zerodegr/Multiref2/View###/byhand***</font>:</td>
	    <td>List of selected particles for each class.</td></tr>
	</table>
    
    <p><u>NOTE:</u> When you finish going through the class averages for a particular reference-view, 
	be sure to save the list of good <u>classes</u> in addition to the list of good particles. 
	The good-class list can be saved by going to the <i>File</i> menu and selecting <i>Save selection</i>, 
	or by clicking on the <i>Save+Update</i> button, or with the shortcut <i>Alt-S</i>
    </p>


<li><p><b>Combine selected particles from selected classes</b></p></li>

    <p> Following the previous step, the selected particles are distributed over 
	multiple docfiles <font class="input">byhand***</font>, 
	listed in <font class="input">goodclasses</font>
	from multiple reference-views <font class="input">Zerodegr/Multiref2/View###</font>
	(once again assuming two iterations of multireference alignment + classification). 
	In this procedure file, <a href="../combinegoodclasses.rct">combinegoodclasses.rct</a>, 
	we will combine the <font class="input">byhand***</font> files into 
	one doc file for each reference-view.
    </p>
    
    <b>Output:</b><br />
    
	<table class="outs">
	
	<tr valign="top"><td>&curren;</td>
	    <td><font class="output">Zerodegr/Multiref2/goodsel***</font>:</td>
	    <td>List of selected particles in each reference-view.</td></tr>
	</table>
	
    <p> If in your final iteration of multireference alignment, 
	you set parameter <b><i>[mirror-option]</i></b> is set to <i>1</i>, 
	there will be additional outputs for the lists of flipped and un-flipped particle images, 
	called <font class="output">goodsel***-flip</font> and <font class="output">goodsel***-noflip</font>, 
	respectively, in the <font class="output">Zerodegr/Multiref2</font> directory.
	See the <a href="flipflop.htm">note about mirroring references</a> for more information.
    </p>
    
<!--    <p> <i>HINT</i>: It may be useful to re-classify only the good particles, 
	if, for example, there's an asymmetry present that is washed out by the bad particles.  
	In that case, re-run classifyview, setting <b><i>[verified-yn]</i></b> to 1, 
	which will read <b>goodsel***</b> instead of <b>selview***</b>.
	You will overwrite the previous classes (but not verified particles), 
	so you may want to change the output filenames, 
	<i>e.g.</i>, add <b>good-</b> to the beginning of the filenames. 
	If you find a new class, using the names of the new doc files, re-run
	<a href="../multirefalign.rct">multirefalign.rct</a>. 
	It might be useful to classify the bad particles too.
    </p>-->
    

<li><p><b>Average selected images</b></p></li>

    <p> In this step, we will generate averages of the good particle images. 
	These new averages should look cleaner than those from the multireference alignment, 
	which also included bad particles. 
	(Because of model bias, however, the bad particles may not have degraded the old average too much.)
    </p>
    
    <p> The procedure file <a href="../viewaverages.rct">viewaverages.rct</a> 
	and its subroutine <a href="../viewaverage1.rct">viewaverage1.rct</a> 
	read the aligned-image stack <font class="input">Zerodegr/stk3-aligned</font> 
	and averages the images according to the good-particle selection files
	<font class="input">Zerodegr/Multiref2/goodsel***</font> 
	(assuming again that you performed 2 rounds of multi-reference alignment).
    </p>
    
    <b>Outputs:</b><br />
    
	<table class="outs">
	
	<tr valign="top"><td>&curren;</td>
	    <td><font class="output">Zerodegr/Multiref2/stkgoodavg</font>:</td>
	    <td>Stack of average images for each view.</td></tr>
	<tr valign="top"><td>&curren;</td>
	    <td><font class="output">Zerodegr/Multiref2/stkgoodvar</font>:</td>
	    <td>Stack of variance images for each view.</td></tr>
	</table>

    <p> If in your final iteration of multireference alignment, 
	you set parameter <b><i>[mirror-option]</i></b> is set to <i>1</i>, 
	there will be separate outputs for the flipped and un-flipped particle images, 
	ending in <font class="output">-flip</font> and <font class="output">-noflip</font>, 
	respectively, in the <font class="output">Zerodegr/Multiref2</font> directory.
	See the <a href="flipflop.htm">note about mirroring references</a> for more information.
    </p>
    
<li><p><b>Select well-populated classes</b></p></li>
    
    <p> Following particle-verification, 
	not all of the classes will have an adequate number of particles for a 3D reconstruction.  
	(This exact number will depend on the size, symmetry, etc., of the particle, and 
	on the specimen-preparation technique, i.e., negative stain or cryo.) 
	We will select only the classes with enough particles.
	Type:
	<br /><code class="snippet">cd Zerodegr/Multiref2/ ; montagefromdoc sorted-viewaverage.spi stkgoodavg.spi</code>
	<br />(assuming you performed 2 rounds of multireference alignment)
	</p>
	
    <p> Set the output filename to <font class="output">goodviews</font>.
        To show the number of particles in each average, 
        set <b><i>doc file column for label</i></b> to <i>2</i>.
	Select the classes for which you wish to compute a 3D reconstruction, 
	and save that selection (e.g., using <i>CTRL-s</i>).
	</p>

	
    
<li><p><b>Center tilted-specimen particles</b></p></li>

    <p> The goal of any 3D reconstruction technique is, for each 2D image, 
    to obtain 2 translational parameters, and 3 orientational parameters.  
    By this stage, we have all 3 orientation parameters. 
    (One is the magnitude of the tilt, 
    the second is the direction of the tilt axis with respect to the coordinate axes, and 
    the third is the in-plane rotation angle of the untilted-specimen images.) 
    The 2D alignment of the untilted-specimen images cannot be applied to the tilted-specimen images, 
    so we will need to translationally align the tilted-specimen images separately.
    </p>

    <p> The procedure file <a href="../centertilt.rct">centertilt.rct</a> 
	uses a reference-free alignment to align the images in stack
	<font class="input">Tilted/stk2-winrot</font> translationally but not rotationally. 
	It is adapted from <a href="../pairwise.rct">pairwise.rct</a>, which was used above.
    </p>
    
    <b>Outputs:</b><br />
	
	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Tilted/Pairwise/stkcentavg</font>:</td>
                <td>Stack of centered intermediate averages.
                    <br />See note about centering below.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Tilted/stk3-cent</font>:</td>
                <td>Stack of translationally aligned tilted-specimen images.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Tilted/Pairwise/rfreeavg001</font>:</td>
                <td>Final average of all images.
                    <br />Note that the images are not rotationally aligned.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Tilted/docpairalign</font>:</td>
                <td>Alignment doc file.</td></tr>
	</table>

    <p><u>NOTE</u>: The parameter <b><i>[cg-option]</i></b>, 
    specifies how the center of gravity for the intermediate average will be computed, if at all.  
    The options are:</p>
    
    <ol>
      <li>No centering performed                                                              </li>
      <li>Centering performed using 
          <a href="../../../man/cgph.html">'CG PH'</a> </li>
      <li>Centering performed by rotating the image 180 degrees and aligning to itself        </li>
    </ol>
    
    <p>All three options are written to <font class="output">Zerodegr/Pairwise/stkcentavg</font>
    If one is significantly better than the one you used, re-run this with the better option.</p>
        
    <p> If this procedure file runs slowly, you can save time by centering only the selected particles.  
	Change the parameter <b><i>[verified-yn]</i></b> to <i>1</i>. 
	This will change the input from <font class="input">listparticles</font> 
	to <font class="input">Zerodegr/Multiref2/combinedgood</font> 
	(assuming once again that you ran 2 iterations of multireference alignment). 
    </p>
    
    <p> To look at the centered tilted particles, type:<br />
	<code class="snippet">montagefromdoc listparticles.spi Tilted/stk3-cent.spi</code>
    </p>


<li><p><b>Store Euler angles</b></p></li>

    <p> In this step, the procedure file <a href="../storeangles.rct">storeangles.rct</a>
	collects information about the 3 Euler angles from the 
	micrograph-parameter doc files <font class="input">Micrographs/dcb****</font> 
	and the last multireference alignment doc file 
	<font class="input"> Zerodegr/Multiref#/docalign</font> 
	This Euler-angle doc file will be used in the 3D-reconstruction step.
    </p>
    
    <b>Outputs:</b><br />
	
	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Tilted/dangles</font>:</td>
                <td>Euler-angle doc file to be used for the 3D reconstruction.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Tilted/dang-unrot</font>:</td>
                <td>More informative Euler-angle doc file for instructional purposes.
                    <br />See <a href="eulers.htm">note about Euler angles</a>.</td></tr>
	</table>
	
    <p> Changing parameter <b><i>[mirror-yn]</i></b> will reverse the handedness of the structure. 
	Whether this flag should be set to 0 or 1 depends on numerous variables in the data collection and processing, 
	such as the direction in which the goniometer is rotated, how the micrographs are digitized, <i>etc.</i> 
	Unfortunately, it is difficult to determine from first principles whether the handedness needs to be flipped, 
	so the safest way to know how to set this parameter is to generate a RCT reconstruction of a sample with known handedness.  
	Once the data-collection &amp; image-processing conventions are set, change them as seldom as possible, or else 
	you may need to re-test for flips in handedness.
    </p>


<li><p><b>[Optional] Generate symmetry files</b></p></li>

    <p> This step is primarily for the 
        <a href="../../../protocol_download.html">
        Nature Protocols RCT data set</a>, but can be tailored for other symmetric samples. 
        The procedure file <a href="../d6symmetry.rct">d6symmetry.rct</a> will generate files that 
        contain the Euler angles for equivalent positions in each asymmetric unit. 
    </p>

    <p> The worm hemoglobin used in the Nature Protocols data set has D6 symmetry, 
        and has two main types of views: top views and side views. 
        There were also 4 particles that were neither top views nor side views, 
        but they will not be used for the reconstruction. 
        Also, there were two types of side views in that data set, but 
        both can use the identical symmetry file since 
        the symmetry axis is in the same direction in both.
    </p>
    
    <b>Outputs:</b><br />

        <table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">d6top</font>:</td>
                <td>Symmetry doc file where the 6-fold axis is along <i>z</i>.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">d6side</font>:</td>
                <td>Symmetry doc file where the 6-fold axis is in the <i>xy</i> plane.</td></tr>
        </table>
        
    <p> To generate a doc file corresponding to a different symmetry, use the command 
        <a href="../../../man/sy.html">
        'SY DOC'</a>.
    </p>


<li><p><b>Compute 3D reconstructions for each class</b></p></li>
    
    <p> The procedure file <a href="../bpclass.rct">bpclass.rct</a> and 
	its subroutine     <a href="../bp3f.rct">bp3f.rct</a> will compute 3D reconstructions for each class, 
	whose particles are listed in each <font class="input">Zerodegr/Multiref#/goodsel***</font>, 
	The aligned tilted-specimen images <font class="input">Tilted/Aligned/cent*****</font> 
	will be reconstructed using the Euler angles found in <font class="input">Tilted/dangles</font>. 
	An optional symmetry file can be given, but 
	in the absence of symmetry the default <font class="input">*</font> is given.
    </p>
    
    <b>Outputs:</b><br />
	
	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Volumes/vcla***</font>:</td>
                <td>Reconstructions for each class.</td></tr>
	</table>
    
    <p> For the <a href="http://www.wadsworth.org/spider_doc/spider/protocol_download.html">Nature Protocols RCT data set</a>, 
	instead run <a href="../bpclass.rct">bpclass.rct</a>.
	Make sure that the parameters <b><i>[sideViewClassA]</i></b> and <b><i>[sideViewClassB]</i></b> 
	(by default in the procedure file, classes 1 &amp; 2) correspond to side views, 
	to which the side-view symmetry file <font class="input">Volumes/d6side</font> will be applied.
	Similarly, make sure that the parameter <b><i>[topViewClass]</i></b> corresponds to the top view, 
	(by default, class 4) to which the top-view symmetry file <font class="input">Volumes/d6top</font> 
	will be applied. 
    </p>
	

<li><p><b>Filter 3D reconstructions</b></p></li>

    <p> The procedure file <a href="../volfilt.rct">volfilt.rct</a> Fourier filters one or all reconstructions 
	<font class="input">Volumes/vcla***</font>. 
     </p>
   
   <b>Outputs:</b><br />

	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Volumes/vflt***</font>:</td>
                <td>Filtered reconstructions.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Volumes/docvolfilt</font>:</td>
                <td>Editable doc file containing filter parameters.
                    <br />See note below.</td></tr>
	</table>
	
	<br /><i>Parameters:</i>
	
	<table class="outs">
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[single-class]</i></b>:                      </td>
		<td>Class number whose reconstruction will be filtered.
		    <br />The default value of <b><i>0</i></b> will filter all class volumes.
		    <br />To filter a single volume, perhaps to fine-tune a specific class, 
		        enter the number of that class</td></tr>
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[header-type]</i></b>
		    <br /><b><i>[header-param1]</i></b>
		    <br /><b><i>[header-param2]</i></b>:                      </td>
		<td>Filter parameters.
		    <br />The defaults, respectively, are <b><i>7</i></b> (for Butterworth low-pass) 
		    <br />and <b><i>37.6</i></b> &amp; <b><i>28.2</i></b> f
			or pass-band and stop-band (in Angstroms)</td></tr>
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[override-yn]</i></b>:                      </td>
		<td>If pre-existing doc file <font class="output">Volumes/docvolfilt</font> 
                    exists, setting this parameter to <i>1</i>
		    <br />will override the filter parameters in the procedure-file 
                    header and will use the values in the docfile instead.
		    <br />More below.</td></tr>
	</table>
	
    <p> The reason for the usage of the file <font class="output">Volumes/docvolfilt</font> is that 
	you may want to fine-tune the filter parameters for a single class volume 
	without having to filter all of them. 
	Also, it may be the case that different class volumes warrant different filter parameters 
	(if, for example, the number of particles varies). 
	This doc file can serve as a record of what filter parameters were used.
    </p>


<li><p><b>[Optional] Run projection onto convex sets (POCS)</b></p>

    <p> Detailed <a href="misc.htm#pocs">information about POCS can be found here</a>. 
	Briefly, POCS is an iterative way to try to minimize the effects of the missing cone. 
	<br />The steps involved in POCS are:
    </p>
    
      <ol>
	<li>Generate a binary mask</li>
	<li>[Optional] Choose a projection by which to gauge the progress of POCS</li>
	<li>Run POCS</li>
      </ol>

<li><p><b>[If multiple classes] Align volumes to each other</b></p>
    
    <p> If you have multiple classes, it remains to be seen whether the classes correspond to the same structure. 
	You should have a rough idea after playing with the volumes in Chimera. 
	The procedure file <a href="../volalignprj.rct">volalignprj.rct</a> and 
	its subroutine <a href="../montageprj.rct">montageprj.rct</a> 
	attempt to find a rigorous alignment between two volumes 
	<font class="input">Volumes/vflt***</font> (or <font class="input">Volumes/volpocs***-filt</font>). 
    </p>
    
    <p>Note that this procedure file aligns two volumes to each other.
       Choose one volume as an alignment reference, to which the rest of class volumes will be aligned.  
       After an initial alignment using a coarse search grid using 
       <a href="../../../man/pj3q.html">'PJ 3Q'</a>,
       a finer search will be performed using
       <a href="../../../man/or3q.html">'OR 3Q'</a>
       (which needs an initial estimate for optimal function).
    </p>

    <i>Parameters:</i>
	
	<table class="outs">
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[exp-num]</i></b>:                      </td>
		<td>Class number for the volume to be aligned.</td></tr>
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[ref-num]</i></b>:                      </td>
		<td>Class number for the reference volume.</td></tr>
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[num-solns]</i></b>:                      </td>
		<td>Number of solutions that you wish to compare (as 2D projections)
		    <br />Note that multiple solutions may converge to the same refined solution.</td></tr>
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[dtheta]</i></b>:                      </td>
		<td>Angular increment for coarse search.
		    <br />A value of 15 degrees corresponds to 83 projection directions.</td></tr>
	    <tr valign="top"><td>&curren;                                   </td>
		<td><b><i>[shift-range]</i></b>, 
		    <b><i>[shift-step]</i></b>, 
		    <b><i>[first-ring]</i></b>:                      </td>
		<td>2D search parameters as described in 
		    <a href="../../../man/apsh.html">
		    'AP SH'</a>.</td></tr>
	</table>

    <br /><b>Outputs:</b><br />
	
	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Volumes/Alignment/dalv***</font>:</td>
                <td>Doc file with initial and refined alignment parameters.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Volumes/Alignment/vali***</font>:</td>
                <td>Aligned class volume.
                    <br />Only written for the best match, but see note below.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Volumes/Alignment/mproj</font>:</td>
                <td>Stack file of projections for each projection direction, 
                    and for the best <b><i>[num-solns]</i></b> solutions.
                    <br />More below.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Volumes/Alignment/prj_***</font>:</td>
                <td>Reprojections of the reference and experimental volumes.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Volumes/Alignment/list2merge</font>:</td>
                <td>Editable list of aligned class volumes with preferred alignment solution.
                    <br />More below.</td></tr>
	</table>

    <p>The first row of each slice in <b>mproj***</b> shows the reference projection. 
       Each additional row corresponds to one alignment solution, from "best" to "worst." 
       The left-hand image is the re-projection following the initial, coarse alignment, and 
       the right-hand image is the re-projection following the refined alignment using 
       <a href="../../../man/or3q.html">'OR 3Q'</a>.</p>
    
    <p>If the better alignment solution is not solution #1, then 
       edit in <font class="output">Volumes/Alignment/list2merge</font> column #2, labelled <i>SOLUTIONNUM</i>.  
       If you do wish exclude the aligned class volume in the merging step altogether, 
       set this value to <i>0</i> in <font class="output">Volumes/Alignment/list2merge</font>.</p>
       
    <p> The aligned class volume <font class="output">Volumes/Alignment/vali***</font> 
	is written only for the bit fit as judged by CCC, but 
	the lower-ranked solutions can be used when merging the class volumes as described above 
	by editing the <font class="output">Volumes/Alignment/list2merge</font> file.
	A class volume using your preferred volume-alignment parameters can be optionally written 
	in the next step, <a href="../mergevols.rct">mergevols.rct</a>, 
	by setting the parameter in that procedure file <b><i>[classvols-yn]</i></b> is set to <b><i>1</i></b>. 
    </p>
    
    <p>The re-projections <b>prj_***</b> will illustrate the missing-cone artifact better than 
       isosurface presentations.</p>


<li><p><b>[Optional] Merged particles from aligned class volumes into one reconstruction</b></p></li>

    <p> You will need to decide subjectively whether the aligned class volumes are sufficiently similar to merge. 
	The procedure file <a href="../mergevols.rct">mergevols.rct</a> combines data from many steps.</p>
	
    <b>Inputs:</b><br />
    
	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">Tilted/stk3-cent</font>:</td>
                <td>Aligned-image stack.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">Zerodegr/Multiref#/goodsel***</font>:</td>
                <td>Good-particle selection files.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">Tilted/dangles</font>:</td>
                <td>Euler-angle doc file.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">Volumes/Alignment/dalv***</font>:</td>
                <td>Volume-alignment doc files.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">Volumes/Alignment/list2merge</font>:</td>
                <td>List of classes to merge.</td></tr>
	</table>
	
    <br /><b>Outputs:</b><br />
	
	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Tilted/dang-merged</font>:</td>
                <td>Euler angles taking into account the volume alignment.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Zerodegr/Multiref#/mergedsel</font>:</td>
                <td>Selection file containing particle numbers for merged classes.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Volumes/vtot999</font>:</td>
                <td>Merged reconstruction.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Volumes/vtot999-flt</font>:</td>
                <td>Filtered merged reconstruction.</td></tr>
	</table>
	
    <p>If the parameter <b><i>[classvols-yn]</i></b> is set to <b><i>1</i></b>, 
       volumes for each class will be reconstructed of the form <font class="output">Volumes/vtot***</font>,
       using the merged Euler angles. 
       They should look very similar to the <b>vali***</b> reconstructions from the previous step, 
       <a href="../volalignprj.rct">volalignprj.rct</a>, although 
       in this case the volume will have undergone one fewer interpolation. 
       Also, if you did use the best-fit solution in <a href="../volalignprj.rct">volalignprj.rct</a>, 
       then this aligned class volume will be the only version.
    </p>
    
    <p>Filter parameters are used like in <a href="../volfilt.rct">volfilt.rct</a> above.</p>
    

<li><p><b>Prepare files for reference-based alignment</b></p></li>

    <p> Now that you have a low-resolution structure to used a reference, 
	you can use model-based alignment to perform subsequent alignments. 
    </p>
    
    <p> Before running the next procedure file, 
	download the 
	(<a href="../../../techs/recon1a/spiproject.tar.gz">
        reference-based alignment tarball</a>
	and unpackage by typing:                          <br />
	<code class="snippet">tar -zxvf  spiproject.tar.gz </code>
    </p>
    
    <p> The tarball will create a directory called <font class="output">myproject/</font>
	<br />For the example here, it will be assumed that the tarball was extracted while in the toplevel RCT directory, 
	in which case <font class="output">myproject/</font> is a subdirectory. 
	Feel free to change the name, but remember to change it in the ensuing procedure file.
    </p>
    
    <p> The procedure file <a href="../prepare-prjmatch.rct">prepare-prjmatch.rct</a> 
	converts the files from the RCT protocol into a form that can be used 
	in the reference-based alignment protocol.
    </p>
    
    <b>Inputs:</b><br />
	
	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">params</font>:</td>
                <td>Parameter doc file.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">Volumes/vtot999-flt</font> :</td>
                <td>Filtered, merged volume
                    <br />If you didn't merge classes, 
                    use a <font class="input">Volumes/vflt***</font> class volume.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">docmicpairs</font>:</td>
                <td>Micrograph-pairing doc file.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">listparticles</font>:</td>
                <td>List of particles.
                    <br />See note below.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">order_picked</font>:</td>
                <td>micrograph-to-particle lookup-table.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">Micrographs/dct****</font>:</td>
                <td>Tilted-specimen coordinates doc file.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="input">Tilted/stk2-winrot</font>:</td>
                <td>Tilted-specimen particle image stack.
                    <br />See note below.</td></tr>
	</table>
	
	<p> The total list of particles <font class="input">listparticles</font> will be used 
	    instead of only the particles that were included in the reconstruction 
	    in case the previously-excluded particles can have their orientations determined 
	    now that there is a model.
	</p>

	<p> Only the tilted particles will be used in the projection-matching step. 
	    With the untilted particles, most likely they would be overrepresented, 
	    which would cause problems in the reconstruction. 
	    Also, instead of <font class="input">Tilted/stk2-winrot</font>, 
	    you could opt to use <font class="input">Tilted/stk0-unrot</font>, 
	    which have undergone one fewer interpolation. 
	    However, if you needed to high-pass filter the <b>stk2-winrot</b> images, 
	    you will need to go back and filter the <b>stk0-unrot</b> images similarly.
	</p>
	
	<b>Outputs</b> (assumed to be in <font class="output">myproject/</font>):<br />
	    
	<table class="outs">
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">params</font>:</td>
                <td>Parameter doc file (identical to input).</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">reference_volume</font>:</td>
                <td>Reference volume.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Power_Spectra/sel_group</font>:</td>
                <td>Dummy list of defocus groups.
                    <br />See note about CTF-correction below.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">sel_micrograph</font>:</td>
                <td>List of micrographs.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Power_Spectra/def_avg</font>:</td>
                <td>Dummy list of defocus values.
                    <br />See note about CTF-correction below.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Particles/win/winser_****</font>:</td>
                <td>Particle stacks, for each micrograph.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Particles/good/ngood****</font>:</td>
                <td>Particle selection doc file, for each micrograph.
                    <br />If you plan to re-verify the particles, 
                    instead call these files <font class="output">Particles/win/sel_particle_****</font>.</td></tr>
            <tr valign="top"><td>&curren;</td>
                <td><font class="output">Particles/coords/sndc****</font>:</td>
                <td>Coordinate doc files.</td></tr>
	</table>

	<p> As of yet, CTF-correction is not implemented in this RCT implementation. 
	    A few dummy files related to defocus and defocus groups 
	    will be written by <a href="../prepare-prjmatch.rct">prepare-prjmatch.rct</a> anyway. 
	    (Set your expectations for the resulting reconstruction accordingly.) 
	    When you reach a step where there is an option to account for the CTF or not, 
	    be sure to use the option that disregards the CTF, namely 
	    <a href="../../../techs/recon1a/Procs/apsh.spi">
	    apsh.spi</a> instead of 
	    <a href="../../../techs/recon1a/Procs/apshgrp.spi">
	    apshgrp.spi</a>. 
	</p>
	
	<p> You should now have the files in a form that can be understood by the 
	    <a href="../../../techs/Procs/mr1.html">  reference-based alignment protocol.</a>

	    Begin with the section entitled 
	    <a href="../../../techs/recon1a/Docs/mr1.html#SH">
             "Alignment"</a> with the step 
	    <a href="../../../techs/recon1a/Procs/sel_by_group.spi">  sel_by_group.spi</a>. 
	    
	    If you are going to re-verify the particles 
	    (in which case you should have named the output particle lists 
	    <font class="output">Particles/win/sel_particle_****</font> instead of 
            <font class="output">Particles/good/ngood****</font>), 
	    then you should begin in the section entitled 
	    "<a href="../../../techs/recon1a/Docs/mr1.html#AUTO">
            Particle Picking and Selection</a>" with either the (optional) step 
	    <a href="../../../techs/recon1a/Procs/pfilt.spi">
	    pfilt.spi</a> or 
	    the next step, entitled <b>"Verify the automatically selected particles"</b>. 
	    
	    Alternatively, if you are going to use 
	    <a href="../../../techs/verify/Docs/instr-apsh.htm">
	    classification-based particle verification</a>, then begin in the section entitled 
	    "<a href="../../../techs/verify/Docs/instr-apsh.htm#particles">
            Particle-picking</a>"  with the step 
	    <a href="../../../techs/verify/Docs/Particles/numberparticles.spi">
	    numberparticles.spi</a>.
	</p>
	
	<p>Good luck!</p>
</ul>

<hr />

<b><p><a name="misc"><a href="misc.htm">Miscellaneous procedure files</a></a></p></b>

<ul>
    <li><a href="misc.htm#pocs">Projection onto convex sets</a></li>
</ul>

<hr />

<b><p><a name="mods">Modifications log</a></p></b>

<ul>
    <li>2015-08-13 -- refproj.rct shows power spectra of re-projections, to illustrate missing cone</li>
    <li>2015-08-10 -- classes from multirefalign.rct and classifybyview.rct can be viewed (and selected) all at the same time</li>
    <li>2015-08-06 -- centering of tilted images now uses pyramidal scheme</li>
    <li>2015-08-05 -- pairwise.rct and centertilt.rct draw circles on averages corresponding to inner and outer alignment radii</li>
    <li>2015-08-05 -- ca-pca.rct and classifybyview.rct get image dimension automatically
    <li>2015-07-29 -- windowparticles.rct allows choice of selected noise image from makesomenoise.rct
    <li>2015-07-16 -- separated Nature Protocols reconstruction procedure, bpwormhb.rct, from bpclass.rct        </li>
    <li>2015-07-16 -- number of CPUs is now user-defined     </li>
    <li>2015-07-14 -- added procedure and Python script to covert from EMAN2's e2RCTboxer.py (under construction)</li>
    <li>2015-03-17 -- bug fix in volalignprj/montageprj      </li>
    <li>2014-03-06 -- using stacks for the windowed particles</li>
    <li>2014-03-06 -- changed assumed extension to '.spi'. 
                  <br />(Conversion/display programs sometimes expect this extension for SPIDER files.)</li>
    <li>2014-03-04 -- automatically looks for last iteration of multireference alignment</li>
    <li>2014-02-04 -- pairwise.spi -- using named registers, error-checking for alignment radius</li>
    <li>2013-12-12 -- tar archive, cosmetic changes          </li>
    <li>2012-12-20 -- posted to local Techniques directory   </li>
    <li>2012-12-20 -- made SPIRE configuration file          </li>
</ul>

<hr />

<b><p><a name="refs">References</a></p></b>
<ol>
    <a name="jf2006">
    <li>Frank J. (2006) 
        <i>Three-Dimensional Electron Microscopy of Macromolecular Assemblies</i>.
        (Oxford University Press, New York, NY).             </li>
    </a>
    
    <li>Marco S, Chagoyen M, de la Fraga LG, Carazo JM, Carrascosa JL. (1996) 
        A variant to the random approximation of the reference-free algorithm.
        <i>Ultramicroscopy</i> <b>66</b>: 5-10.               </li>
	
    <a name="mr1987">
    <li>Radermacher M, Wagenknecht T, Verschoor A, Frank J. (1987) 
        Three-dimensional reconstruction from a single-exposure, random conical 
	tilt series applied to  the 50S ribosomal subunit of <i>Escherichia coli</i>.
        <i>J Microsc.</i>  <b>146</b>:113-36.                 </li>
    </a>
    
    <li>Shaikh TR, LeBarron JS, Trujillo R, Baxter WT, and Frank J. (2008a) 
        Particle-verification for single-particle reconstruction using multivariate data analysis and                classification.
        <i>J Struct Biol </i> <b>161</b>: 41-48.              </li>
	
    <li>Shaikh TR, Gao H, Baxter WT, Asturias F, Boisset N, Leith A, and Frank J. (2008b) 
        SPIDER image-processing for single-particle reconstruction of biological macromolecules from                 electron micrographs.
        <i>Nature Protocols</i> <b>3</b>: 1941-74.           </li>
	
    <li>Huang T, Shaikh TR, Gupta K, Contreras-Martin LM, Grassucci RA, Van Duyne GD, Frank J, Belfort M.
        (2011) The group II intron ribonucleoprotein precursor is a large, loosely packed structure. 
        <i>Nucleic Acids Res.</i> <b>39</b>: 2845-54.        </li>

<!--    <li>AUTHOR 1, AUTHOR 2. (YEAR) 
        TITLE.
        <i>JOURNAL</i> <b>VOLUME</b>: PG0-PG.</li>-->
</ol>

<hr />

<small>
  <p>
  Source: rct.htm          &nbsp;&nbsp;&nbsp;
  Page updated: 2015/07/29 &nbsp;&nbsp;&nbsp;
  Tapu Shaikh
  </p>
</small>

</body>
</html>
