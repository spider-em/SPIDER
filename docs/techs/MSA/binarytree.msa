; GENERATE FILES FOR BINARY-TREE
;
; REQUIRES averagenode.rct and update_lut.rct

; ----------------- Parameters -----------------
[start_depth] = 1    ; starting depth (TO DO: be able to start from >1)
[end_depth]   = 9    ; ending depth (--> 2**[end_depth] class averages)

[debug]      = 0     ; debug flag (1==ON)
[top_branch] = 100   ; height of top two branches in dendrogram
;                    ; (Starting with version 17.13 it's 100.  Previously it was 1.)

; --------------------- Inputs ---------------------

[dendro_doc] = 'Hierarchical/docdendro'   ; dendrogram document
[particles]  = 'stkfiltered@*****'        ; particle template

; -------------------- Outputs --------------------

[binary_dir]  = 'Tree'                       ; output directory
[node_lut]    = '[binary_dir]/node2termini'  ; node-to-particle lookup table
[node_doc]    = '[binary_dir]/docclass***'   ; particles-per-node list template
[node_avg]    = '[binary_dir]/classavg***'   ; node average
[labeled_avg] = '[binary_dir]/labeled***'    ; labeled node average (2D only)
[class_list]  = '[binary_dir]/listclasses'   ; list of classes

; --------------- END BATCH HEADER ---------------

IQ DIR [dir_exists]
[binary_dir]

IF ( [dir_exists] .EQ. 0 ) THEN
  SYS
  echo ; mkdir -pv [binary_dir] | sed 's/^/  /'
ENDIF

; Temporary files
[temp_lut] = '[node_lut]_unrenum'


; DETERMINE LABEL-DIMENSION

IF ( [end_depth] .GE. 10 ) THEN
  SYS M
  echo "   WARNING: Requested tree depth, {**[end_depth]}, may require more than the default 3-digit filenumbers for the outputs of this batch file." ;
  echo "            Also, for the next step, multiref.rct, the input template [node_doc] will need to be updated."
.
ENDIF

; Get number of termini
UD N [num_termini]
[dendro_doc]

; Add number of digits in highest class# and in biggest class (node #1)
[max_class_digits] = INT(LOG(2**[end_depth])) + 1
[max_class_digits]   ; diagnostic
IF ( [max_class_digits] .LT. 3 ) [max_class_digits] = 3

[max_parts_digits] = INT(LOG([num_termini])) + 1
[max_parts_digits]   ; diagnostic
IF ( [max_parts_digits] .LT. 3 ) [max_parts_digits] = 3

[num_digits] = [max_class_digits] + [max_parts_digits]

IF ( [num_digits] .LE. 6 ) [label_dim] = 115
IF ( [num_digits] .EQ. 7 ) [label_dim] = 128
IF ( [num_digits] .EQ. 8 ) [label_dim] = 136
IF ( [num_digits] .GE. 9 ) [label_dim] = 144
; (If there are more than 100,000 particles or 10,000 classes, things are going to break.)


; Initialize
[node_num]       = 2**([start_depth]-1)
[first_terminus] = 1

; Clean up pre-existing files
DE A
[node_doc][node_num]
DE A
[node_avg][node_num]
DE A
[labeled_avg][node_num]
DE
[node_lut]
DE
[temp_lut]
DE
[class_list]

; WHOLE DENDROGRAM==CLASS #1, DEPTH==1

IF ( [start_depth] .EQ. 1 ) THEN
  SYS
  echo "  Depth 01"; date | sed 's/^/  /'

  ; Copy dendrogram to first node doc
  DOC REN
  [dendro_doc]
  [node_doc][node_num]

  ; Average images
  @averagenode([node_num],[max_class_digits],[max_parts_digits])
  [particles]    ; INPUT: particle template
  [node_doc]     ; INPUT: list of particles in each node
  1              ; PARAMETER: first terminus
  [num_termini]  ; PARAMETER: last terminus
  [label_dim]    ; PARAMETER: temporary dimension for labelling
  [class_list]   ; OUTPUT: class list
  [node_avg]     ; OUTPUT: output average template
  [labeled_avg]  ; OUTPUT: labeled average template (2D only)

  ; Update node-to-terminus lookup-table
  @update_lut([node_num])
  [temp_lut]     ; INPUT: node-to-particle lookup table
  [node_avg]     ; INPUT: node-average template
  [labeled_avg]  ; INPUT: labeled-average template
  1              ; PARAMETER: first terminus
  [num_termini]  ; PARAMETER: last terminus
  [node_avg]     ; OUTPUT: average
ENDIF


; LOOK FOR TWO PRIMARY BRANCHES, DEPTH==2

SYS
echo "  Depth 02"; date | sed 's/^/  /'

; Initialize
[terminus_counter] = 0
[first_terminus]   = 1

IF ( [start_depth] .LE. 2 ) THEN
  ; Loop through termini
  DO LB7 [dendrogram_key] = 1,[num_termini]
    ; get particle#, height
    UD IC [dendrogram_key], [part_num],[dendrogram_height]
    [dendro_doc]

    ; Increment terminus counter
    [terminus_counter] = [terminus_counter] + 1

    ; Save particle# to node doc
    SD [terminus_counter], [part_num],[dendrogram_key]
    [node_doc][node_num]

    ; Check for top two branches in dendrogram
    ; (Height used to be 1, but now is 100.)
    IF ( [dendrogram_height] .EQ. [top_branch] ) THEN
      ; Average images & update counters
      @averagenode([node_num],[max_class_digits],[max_parts_digits])
      [particles]       ; INPUT: particle template
      [node_doc]        ; INPUT: list of particles in each node
      [first_terminus]  ; PARAMETER: first terminus
      [dendrogram_key]  ; PARAMETER: last terminus
      [label_dim]       ; PARAMETER: temporary dimension for labelling
      [class_list]      ; OUTPUT: class list
      [node_avg]        ; OUTPUT: output average template
      [labeled_avg]     ; OUTPUT: labeled average template (2D only)

      @update_lut([node_num])
      [temp_lut]        ; INPUT: node-to-particle lookup table
      [node_avg]        ; INPUT: node-average template
      [labeled_avg]     ; INPUT: labeled-average template
      [first_terminus]  ; PARAMETER: first terminus
      [dendrogram_key]  ; PARAMETER: last terminus

      ; Reset terminus-counter, first-terminus
      [terminus_counter] = 0
      [first_terminus]   = [dendrogram_key] + 1
    ENDIF
  LB7
  ; End terminus loop
ENDIF


; GENERATE BRANCHES FOR DEPTH>=3

IF ( [start_depth] .LT. 3 ) [start_depth] = 3  ; start at depth at least 3

; Loop through node-depths
DO LB2 [current_depth] = 3,[end_depth]
  [do_continue] = 0  ; Will be set to 1 if there are splittable nodes remaining
  ; This will be the case if any parents' nodes at a given depth have at least 3 particles.

  ; Calculate first and last parents nodes to split
  [first_parent] = 2**([current_depth]-2)      ; first node at next highest depth
  [last_parent]  = 2**([current_depth]-1) - 1  ; last node at next highest depth

  SYS
  echo "  Depth {**[current_depth]}"; date | sed 's/^/  /'

  ; Loop through parent nodes
  DO LB3 [parent_node] = [first_parent],[last_parent]
    ; Initialize maximum height, corresponding terminus
    [max_height]          = -9
    [max_height_terminus] = 0

    ; Read first, last termini under parent node
    UD [parent_node], [first_parent_terminus],[last_parent_terminus]
    [temp_lut]
    UD E

    [last_search_terminus] = [last_parent_terminus] - 1
    [num_search_termini]   = [last_parent_terminus] - [first_parent_terminus] + 1

    ; If parent node has only one particle, write dummy entries to lookup table and skip
    IF ( [num_search_termini] .LT. 1 ) THEN
      ; Write empty left-hand node
      @update_lut([node_num])
      [temp_lut]     ; INPUT: node-to-particle lookup table
      [node_avg]     ; INPUT: node-average template
      [labeled_avg]  ; INPUT: labeled-average template
      0              ; PARAMETER: first terminus
      0              ; PARAMETER: last terminus

      ; Write empty right-hand node
      @update_lut([node_num])
      [temp_lut]     ; INPUT: node-to-particle lookup table
      [node_avg]     ; INPUT: node-average template
      [labeled_avg]  ; INPUT: labeled-average template
      0              ; PARAMETER: first terminus
      0              ; PARAMETER: last terminus

      GOTO LB3  ; loop to next parent node
    ENDIF

    IF ( [num_search_termini] .GE. 3 ) [do_continue] = 1
    ; If any parents at this depth have at least 3 particles, at least one child can be split further.


    ; SEARCH FOR BRANCH POINT IN PARENT

    ; Loop through termini
    DO LB4 [parent_terminus] = [first_parent_terminus],[last_search_terminus]
      ; Read height
      UD IC [parent_terminus], [part_num],[dendrogram_height]
      [dendro_doc]

      ; If height greater than maximum...
      IF ( [dendrogram_height] .GT. [max_height] ) THEN
        ; update maximum
        [max_height] = [dendrogram_height]

        ; Update corresponding terminus
        [max_height_terminus] = [parent_terminus]
      ENDIF
    LB4
    ; End terminus loop

    [right_first_terminus] = [max_height_terminus] + 1
    ; First terminus of eventual rightward branch


    ; LEFT-BRANCH CHILD NODE

    ; Loop through left-branch termini
    DO LB5 [left_key] = [first_parent_terminus],[max_height_terminus]
      ; Read particle#
      UD IC [left_key], [part_num],[dendrogram_height]
      [dendro_doc]

      [terminus_counter] = [left_key] - [first_parent_terminus] + 1

      ; Write particle#
      SD [terminus_counter],[part_num],[dendrogram_key]
      [node_doc][node_num]
    LB5
    ; End left loop

    ; Average images
    @averagenode([node_num],[max_class_digits],[max_parts_digits])
    [particles]              ; INPUT: particle template
    [node_doc]               ; INPUT: list of particles in each node
    [first_parent_terminus]  ; PARAMETER: first terminus
    [max_height_terminus]    ; PARAMETER: last terminus
    [label_dim]              ; PARAMETER: temporary dimension for labelling
    [class_list]             ; OUTPUT: class list
    [node_avg]               ; OUTPUT: output average template
    [labeled_avg]            ; OUTPUT: labeled average template (2D only)

    @update_lut([node_num])
    [temp_lut]               ; INPUT: node-to-particle lookup table
    [node_avg]               ; INPUT: node-average template
    [labeled_avg]            ; INPUT: labeled-average template
    [first_parent_terminus]  ; PARAMETER: first terminus
    [max_height_terminus]    ; PARAMETER: last terminus

    IF ( [debug] .GE. 0.5 ) THEN
      SYS M
      echo "  DEBUG left: depth {**[current_depth]}, firstParentTerminus {%i0%[first_parent_terminus]}" ;
      echo "  DEBUG left: depth {**[current_depth]}, maxHeightTerminus {%i0%[max_height_terminus]}" ;
.
    ENDIF


    ; RIGHT-BRANCH CHILD NODE

    ; Sanity check
    IF ( [right_first_terminus] .GT. [num_termini] ) THEN
      SYS M
      echo ;
      echo "  WARNING!" ;
      echo "    Program trying to extend past end of dendrogram." ;
      echo "    New trap (2020-12-13) attempts workaround." ;
      echo "    If binarytree et al., show odd behavior, let developers know." ;
      echo "    depth: {**[current_depth]}" ;
      echo "    firstParentTerminus: {%i0%[first_parent_terminus]}" ;
      echo "    rightFirstTerminus (requested, to be skipped): {%i0%[right_first_terminus]}" ;
.
    ELSE
      ; Loop through right-branch termini
      DO LB6 [right_key] = [right_first_terminus],[last_parent_terminus]
          ; read particle#
          UD IC [right_key], [part_num],[dendrogram_height]
          [dendro_doc]

          [terminus_counter] = [right_key] - [right_first_terminus] + 1

          ; Write particle#
          SD [terminus_counter], [part_num],[dendrogram_key]
          [node_doc][node_num]
      LB6
      ; End right loop

      ; Average images
      @averagenode([node_num],[max_class_digits],[max_parts_digits])
      [particles]             ; INPUT: particle template
      [node_doc]              ; INPUT: list of particles in each node
      [right_first_terminus]  ; PARAMETER: first terminus
      [last_parent_terminus]  ; PARAMETER: last terminus
      [label_dim]             ; PARAMETER: temporary dimension for labelling
      [class_list]            ; OUTPUT: class list
      [node_avg]              ; OUTPUT: output average template
      [labeled_avg]           ; OUTPUT: labeled average template (2D only)

      @update_lut([node_num])
      [temp_lut]              ; INPUT: node-to-particle lookup table
      [node_avg]              ; INPUT: node-average template
      [labeled_avg]           ; INPUT: labeled-average template
      [right_first_terminus]  ; PARAMETER: first terminus
      [last_parent_terminus]  ; PARAMETER: last terminus

      IF ( [debug] .GE. 0.5 ) THEN
        SYS M
        echo "  DEBUG right: depth {**[current_depth]}, rightFirstTerminus {%i0%[right_first_terminus]}" ;
        echo "  DEBUG right: depth {**[current_depth]}, lastParentTerminus {%i0%[last_parent_terminus]}" ;
        echo
.
      ENDIF
      ; End debug if-then
    ENDIF
    ; End sanity if-then
  LB3
  ; End parent-loop

  IF ( [do_continue] .EQ. 0 ) GOTO LB9
LB2
; End depth-loop

LB9  ; Jump here if parent node can't be split further

; CLEAN UP

DOC REN
[temp_lut]
[node_lut]

SD /       FIRST         LAST      POPULATION
[node_lut]
SD E
[node_lut]
DE
[temp_lut]
UD ICE
[dendro_doc]
SD E
[class_list]
DOC REN
[class_list]
[class_list]
SD /       NODENUM      NUM_PARTS
[class_list]
SD E
[class_list]

SYS M
echo ; echo "  Done!" ; date | sed 's/^/  /' ;
echo "  Depth requested: {**[end_depth]}" ;
echo "  Depth completed: {**[current_depth]}" ; echo
.

EN D

; Modified 2025-02-24
;    TO DO: add ability to start correctly from depth >1
;    TO DO: change TEMP_LUT to in-core file
;    2025-02-21 (trs) -- can operate on volumes
;    2020-12-13 (trs & dq) -- workaround when trying to extend past end of dendrogram
;    2015-09-09 (trs) -- added case for >10,000 particles
;    2015-07-30 (trs) -- LISTCLASSES keys now numbered consecutively -- was crashing verifybyview
;    2014-03-06 (trs) -- reading images from stacks
;    2012-12-14 (trs) -- automatic label dimension
;    2012-12-14 (trs) -- added list of classes for verifybyview
;    2009-06-02 (trs) -- leaves gap in image series if parent node can't be split
;    2009-06-02 (trs) -- improved annotation
