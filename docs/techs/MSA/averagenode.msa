([node_num],[max_class_digits],[max_parts_digits])

FR
?particle template?[particles]
FR
?list of particle in each node?[node_doc]

RR [first_terminus]
?first terminus?

RR [last_terminus]
?last terminus?

RR [label_dim]
?temporary dimension of labelling?

FR
?output class list?[class_list]
FR
?output average template?[node_avg]
FR
?labeled average template (2D only)?[labeled_avg]

MD
RESULTS OFF

; --- Input Parameters ---
; [node_num]        node number
; [label_dim]       minimum width for labeling
; [first_terminus]  first terminus
; [last_terminus]   last terminus
; -------- Input --------
; [particles]       particle template
; [node_doc]        list of particle in each node (modified/labelled)
; ------- Outputs -------
; [class_list]      class list
; [node_avg]        output average template
; [labeled_avg]     labeled average template

; -- END BATCH HEADER --

; Temporary files
[temp_big] = '_1'
[temp_var] = '_2'
[temp_lab] = '_4'

; label node doc (at bottom)
IF ( [node_num] .EQ. 1 ) THEN
  ; Is a copy of the dendrogram
  SD /        PARTNUM   DENDRO_HEIGHT
  [node_doc][node_num]
ELSE
  SD /       PARTNUM      DENDROKEY
  [node_doc][node_num]
ENDIF

SD E  ; close doc
[node_doc][node_num]

; Get number of particles
UD N [num_parts_node]
[node_doc][node_num]

; update class list
SD [node_num], [node_num],[num_parts_node]
[class_list]

; average images
AS R
[particles]
[node_doc][node_num]
A                     ; _A_ll
[node_avg][node_num]  ; OUTPUT
[temp_var]


; CHECK IF AVERAGE NEEDS TO BE RESIZED FOR LABELING

; Get image dimension
FI H [orig_img_dim],[iform]
[temp_var]
NX, IFORM

; Only label 2D averages
IF ( [iform] .EQ. 1 ) THEN
  ; If smaller than minimum, interpolate
  IF ( [orig_img_dim] .LT. [label_dim] ) THEN
    IP
    [node_avg][node_num]
    [temp_big]
    [label_dim],[label_dim]
  ELSE
    CP
    [node_avg][node_num]
    [temp_big]
  ENDIF

  MD
  RESULTS ON

  ; LABEL

  ; Get #particles
  [num_particles] = [last_terminus] - [first_terminus] + 1
  ; (*Should* be the same as [num_parts_node], but...)

  ; DETERMINE FORMAT OF LABEL

  IF ( [max_class_digits] .LE. 3 ) THEN
    IF ( [max_parts_digits] .LE. 3 ) THEN
      LA B
      [temp_big]  ; INPUT: average
      [temp_lab]
      {***[node_num]},n={%i0%[num_particles]}
    ENDIF

  ; If #class-digits is >=4
  ELSE
    IF ( [max_parts_digits] .LE. 3 ) THEN
      LA B
      [temp_big]  ; INPUT: average
      [temp_lab]
      {%i0%[node_num]},n={%i0%[num_particles]}
    ENDIF
  ENDIF
  ; End class-digits IF-THEN (not considering 10,000+ classes)

  ; if average was resized, then re-resize
  IF ( [orig_img_dim] .LT. [label_dim] ) THEN
    ; Get new y-dimension (should be +36)
    FI H [labeled_ydim]
    [temp_lab]
    NY

    ; Calculate new y-dimension
    [new_ydim] = [labeled_ydim] * [orig_img_dim] / [label_dim]

    ; Interpolate back to original width
    IP
    [temp_lab]  ; INPUT: labelled average
    [labeled_avg][node_num]
    [orig_img_dim],[new_ydim]
  ELSE
    CP
    [temp_lab]
    [labeled_avg][node_num]
  ENDIF
ELSE
  MD
  RESULTS ON
ENDIF
; End 2D IF-THEN

RE

; Modified 2025-02-24
;    2025-02-20 (trs) -- works on 3D averages, skips labelling
;    2015-09-09 (trs) -- added case for >10,000 particles
;    2012-12-14 (trs) -- intelligent label-dimension
;    2012-12-14 (trs) -- writes to class list
;    2009-06-02 (trs) -- improved annotation
