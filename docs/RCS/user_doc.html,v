head	1.85;
access;
symbols;
locks;
comment	@# @;


1.85
date	2018.12.31.17.01.46;	author leith;	state Exp;
branches;
next	1.84;

1.84
date	2018.10.25.17.56.32;	author leith;	state Exp;
branches;
next	1.83;

1.83
date	2017.01.20.15.36.12;	author leith;	state Exp;
branches;
next	1.82;

1.82
date	2015.12.07.16.01.46;	author leith;	state Exp;
branches;
next	1.81;

1.81
date	2015.09.25.14.26.37;	author leith;	state Exp;
branches;
next	1.80;

1.80
date	2012.09.19.13.54.40;	author leith;	state Exp;
branches;
next	1.79;

1.79
date	2012.07.27.17.54.42;	author leith;	state Exp;
branches;
next	1.78;

1.78
date	2012.01.06.17.45.38;	author leith;	state Exp;
branches;
next	1.77;

1.77
date	2012.01.06.17.45.05;	author leith;	state Exp;
branches;
next	1.76;

1.76
date	2011.04.04.13.34.24;	author leith;	state Exp;
branches;
next	1.75;

1.75
date	2011.02.14.14.21.49;	author leith;	state Exp;
branches;
next	1.74;

1.74
date	2010.12.20.15.29.27;	author leith;	state Exp;
branches;
next	1.73;

1.73
date	2010.11.24.17.07.16;	author leith;	state Exp;
branches;
next	1.72;

1.72
date	2010.07.19.15.50.44;	author leith;	state Exp;
branches;
next	1.71;

1.71
date	2010.01.20.20.18.12;	author leith;	state Exp;
branches;
next	1.70;

1.70
date	2009.11.10.20.06.41;	author leith;	state Exp;
branches;
next	1.69;

1.69
date	2009.07.30.17.51.14;	author leith;	state Exp;
branches;
next	1.68;

1.68
date	2009.05.13.12.27.43;	author leith;	state Exp;
branches;
next	1.67;

1.67
date	2008.11.03.15.11.39;	author leith;	state Exp;
branches;
next	1.66;

1.66
date	2008.06.03.17.46.11;	author leith;	state Exp;
branches;
next	1.65;

1.65
date	2008.05.30.18.31.13;	author leith;	state Exp;
branches;
next	1.64;

1.64
date	2008.05.30.18.24.19;	author leith;	state Exp;
branches;
next	1.63;

1.63
date	2008.03.20.18.08.08;	author leith;	state Exp;
branches;
next	1.62;

1.62
date	2007.05.30.14.18.10;	author leith;	state Exp;
branches;
next	1.61;

1.61
date	2007.01.26.13.57.30;	author leith;	state Exp;
branches;
next	1.60;

1.60
date	2007.01.18.15.27.59;	author leith;	state Exp;
branches;
next	1.59;

1.59
date	2006.11.02.17.36.27;	author leith;	state Exp;
branches;
next	1.58;

1.58
date	2006.10.06.13.28.20;	author leith;	state Exp;
branches;
next	1.57;

1.57
date	2006.03.08.13.57.21;	author leith;	state Exp;
branches;
next	1.56;

1.56
date	2006.02.16.19.55.45;	author leith;	state Exp;
branches;
next	1.55;

1.55
date	2005.12.19.15.08.40;	author leith;	state Exp;
branches;
next	1.54;

1.54
date	2005.10.26.15.03.23;	author leith;	state Exp;
branches;
next	1.53;

1.53
date	2005.04.28.14.39.36;	author leith;	state Exp;
branches;
next	1.52;

1.52
date	2005.01.19.15.47.19;	author bbaxter;	state Exp;
branches;
next	1.51;

1.51
date	2004.07.29.15.14.57;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2004.07.29.14.58.01;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2004.07.29.14.09.44;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2004.07.29.14.09.29;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2004.07.09.13.43.40;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2003.01.24.13.55.18;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2002.08.13.21.08.57;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2002.06.28.18.15.38;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2001.03.27.15.20.52;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2001.03.12.14.07.23;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2001.01.08.21.11.51;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2001.01.08.21.09.34;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2001.01.08.14.33.18;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2001.01.04.19.03.30;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2000.11.08.18.47.10;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2000.10.30.19.19.01;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2000.10.25.15.25.55;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2000.09.05.18.50.32;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2000.08.31.15.17.44;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2000.08.14.16.06.24;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2000.05.01.13.01.56;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2000.03.28.15.03.03;	author pawel;	state Exp;
branches;
next	1.29;

1.29
date	99.11.04.17.56.36;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	99.10.20.13.39.46;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	99.09.17.18.02.17;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	99.09.17.17.34.15;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	99.09.14.17.31.55;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	99.08.17.17.36.30;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	99.07.27.16.26.21;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	99.04.12.19.58.49;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	98.11.18.14.36.32;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	98.08.04.17.55.35;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	98.04.22.17.50.13;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	98.04.22.15.50.05;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	98.04.17.15.36.33;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	98.03.30.16.27.30;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	98.02.05.18.33.59;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	98.01.29.17.23.05;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	98.01.29.16.45.29;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	98.01.28.16.03.29;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	97.12.29.15.52.21;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	97.11.03.14.17.54;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	97.09.18.14.37.21;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	97.08.29.18.37.21;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	97.08.29.14.41.29;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	97.08.12.14.48.43;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	97.06.26.15.50.43;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	97.06.26.14.32.37;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	97.06.26.13.40.26;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	97.06.05.16.47.59;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	97.05.29.20.13.35;	author leith;	state Exp;
branches;
next	;


desc
@@


1.85
log
@recon --> recon1a
@
text
@<html>
<head>
   <title>SPIDER: WORKING WITH SPIDER - A USER'S GUIDE</title>
   <link rel='stylesheet' href='user.css' type='text/css' />
</head>

<body>

<p></p>
<h2 align="center">WORKING WITH SPIDER - A USER'S GUIDE</h2>

<p>This Guide covers issues relating to the syntax, conventions,
   and running of SPIDER.  It also has a section that discusses
   <a href="#procedures">procedures</a> and how to write them.</p>

<p><a href="errors.html">Error handling</a>, 
   specialized <a href="documents.html">techniques and tools</a>,
   details on <a href="formats.html">file formats</a>, and 
   <a href="installation.html">distribution and installation</a>, and
   <a href="release.html">release notes</a>
   are discussed elsewhere.</p>

<p>This guide is organized under the following headings:
<ul>
<li><a href="#interactive">Running SPIDER Interactively</a>
	<ul>
	<li><a href="#starting">Starting a Session</a></li>
	<li><a href="#cmd_line">Optional Command Line Parameters</a></li>
	<li><a href="#input_cmd">The Operation Input Status</a></li>
	<li><a href="#input_info">User-Solicited Information</a></li>
            <ul>
            <li><a href="#file_names">File Names</a></li>
            <li><a href="#file_handling">File Handling</a></li>
            <li><a href="#file_opening">File Opening</a></li>
            <li><a href="#file_image">Image File Storage</a></li>
            <li><a href="#file_inline">Inline Files</a></li>
            <li><a href="#file_stack">Image Stack Files</a></li>
            <li><a href="#file_inline_stack">Inline Stack Files</a></li>
            <li><a href="#indexed_stack">Indexed Stack Files</a></li>
            <li><a href="#params">Parameter Values</a></li>
            </ul>
	<li><a href="#completion">Completion of an Operation</a></li>
	<li><a href="#ending">Ending a SPIDER Session</a></li>
	<li><a href="#file_nonimage">Non-Image files used by SPIDER</a></li>
            <ul>
            <li><a href="#file_results">RESULTS File</a></li>
            <li><a href="#file_log">LOG File</a></li>
            <li><a href="#file_doc">Document Files</a></li>
            </ul>
	<li><a href="#variables">Variables</a>
	<li><a href="#register_variables">Register (Numerical) Variables</a>
            <ul>
            <li><a href="#registers_input">Register Variables as Input Parameters</a></li>
            <li><a href="#registers_output">Register Variables as Output Parameters</a></li>
            <li><a href="#registers_saving">Saving and Unsaving Register Variables</a></li>
            </ul>
	<li><a href="#pocketcalc">SPIDER's Pocket Calculator</a></li>
            <ul>
            <li><a href="#arithmetic">Arithmetic Operations</a>
            <li><a href="#expressions">Expressions</a>
            <li><a href="#math_functions">Mathematical Functions</a>
            </ul>

	<li><a href="#symbolic_variables">Symbolic (String) Variables)</a>

	<li><a href="#comments">Comments</a></li>
	</ul>

<li><a href="#procedures">Running SPIDER in Procedure Mode</a></li>
	<ul>
	<li><a href="#control">Procedure Control Files</a></li>
	<li><a href="#arguement">Argument Transfer</a></li>
	<li><a href="#execution">Execution Rules</a></li>
        <li><a href="#parameter">Parameter & Variable Transfer</a></li>
	<li><a href="#writing">Writing Interactive Procedures</a></li>
            <ul>
            <li><a href="#using_register">Using Register Variables in Nested Procedures</a></li>
            </ul>
	<li><a href="#loops">DO-Loops</a></li>
            <ul>
            <li><a href="#loops_filenames">Variable Filenames in DO-Loops</a></li>
            <li><a href="#loops_variables">Variable Parameter Input Inside DO-Loops</a></li>
            </ul>
	<li><a href="#proc_loops">Procedure Calls in DO-Loops</a></li>
	</ul>


<li><a href="#memory">Memory Allocation & Multiprocessors</a></li>

<li><a href="#unix">Submitting Batch Jobs on UNIX systems</a></li>
</ul> 

<hr />

<p>SPIDER can be run either interactively or in a procedure mode.
   Interactive mode means that user input on the terminal is solicited by
   messages appearing on  the  screen.  In the procedure mode, control
   input is taken from a procedure control file where it has to appear in
   exactly the same sequence as in an interactive session.</p>

<h2><a name="interactive">Running SPIDER Interactively</a></h2>

<p>We call a session the entire sequence of operations  from
   the  start  of  SPIDER  to  the  execution  of  the 
   <a href="man/en.html">EN</a> (End) operation.</p>

<a name="starting"><h3>Starting The Session</h3></a>

    	<p>Log on in your directory, then start SPIDER by typing:
            <dl>
            <dd>spider</dd>
            <dd>&nbsp;&nbsp;&nbsp;or</dd>
            <dd>spider &lt;Prj&gt;/&lt;Dat&gt;</dd>
            </dl></p>

        <p>SPIDER will then print some introductory information including:
            <dl>
            <dd>The version number and version issue date.</dd>
            </dl></p>

        <p>If the PROJECT/DATA EXTENSION is not given on the command line,
	   SPIDER will then respond with:
            <dl>
	    <dd>.ENTER PROJECT/DATA EXTENSION:
                  &lt;Prj&gt;/&lt;Dat&gt; </dd>
            </dl></p>

        <p>The  project  extension &lt;Prj&gt;  consists  of  a  three
	letter sequence, e.g, 'GLS', is used to identify procedure
	files, the LOG  file, and the RESULTS file  by attaching this
	sequence to the file names as an extension.</p>

        <p>The data extension &lt;Dat&gt; is optional.  It consists of a  three
        letter sequence, e.g., 'SCI', and is used to identify the data
        files by attaching this sequence to  data  file  names  as  an
        extension.</p>

        <p>For example, an image file specified as <i>'ACF001'</i>  during
        the  SPIDER  session will have as a full filename <i>'ACF001.SCI'</i>
        if the above data extension <i>'SCI'</i> is used.</p>

        <p>A file created as an output file of  a  SPIDER  operation
        will  have  the  &lt;Dat&gt;  extension  attached to its SPIDER file
        name.  If no data extension is given, the system uses  the  project
        extension as data extension.</p>

        <p>[Note that the new extension operation 
        <a href="man/nc.html">NC</a> (New  Code)
        may  be  used  within  the  SPIDER run to redefine the project
        extension/data extension.]</p>

        <p>If more than one SPIDER session is being run in the same
        directory, different project extensions should be used.</p>

        <p>Each input line typed by the user is echoed by SPIDER  on
        the subsequent line so that typing errors become apparent.</p>

        <p>Each line produced by SPIDER that requires input is
        preceded by a period, e.g., '.INPUT FILE:'.</p>

<a name="cmd_line"><h3><dt>Optional Command Line Parameters</dt></h3></a>

        <p>SPIDER can accept optional command line parameters
         in addition to the PROJECT/DATA EXTENSION.</p>
  
            <dl><dl>
            <dt>procedure</dt>
            <dd> Initial procedure to be run when starting SPIDER. 
                 The '@@' sign is necessary.</dd>

            <dt> Result file version number</dt>
            <dd> Version number for the results file created by 
                 the SPIDER run.  This will superceed the value
                 determined by incrementing current version number.</dd>

            <dt> Variable assignments.</dt>
            <dd> Inital variable assignments when starting SPIDER.
                 These assignments will be inherited by any 
                 inital procedure. The variable names do NOT have
                 to be enclosed in '[]' on this line.</dd>
            </dl></dl></p>

            <p><dl>
            <dt>An example of a SPIDER run with optional command line 
                parameters follows:</dt>
            <dd><i> spider prj/dat @@procname 17 loop=3 size=4</i></dd>
            </dl></p>

<a name="input_cmd"><h3>The Operation Input Status</h3></a>

        <p>The  system  now  asks:
            <blockquote>
            .OPERATION:
            </blockquote></p>

        <p>All available operations are specified  by two or more
        letter operations, e.g. <a href="man/li.html">LI</a>
        for Listing selected rows of an image.  A list of the operations
        and their meanings is available in the
	<a href="operations_doc.html">index of operations</a> which
        is part of this SPIDER documentation.  You may want to
        obtain a hardcopy listing and post it next to your
	terminal for reference.]</p>

<a name="input_info"><h3>User-Solicited Information</h3></a>

        <p>After an operation is entered, additional information needed
        to carry out the operation is solicited from the user.  This
        information may be grouped into the following
        categories:  (a) File information on input and output (mostly
        image) files, and  (b) Values of parameters.  These types of
        input are described in what follows.</p>

 <a name="file_names"><h4>File  Names</h4></a>

        <p>These  are  sequences of alphanumeric characters,   
        often  (but not  necessarily) of the form &lt;ABC&gt;&lt;###&gt; 
        where &lt;ABC&gt;  is any sequence of three or more
        characters  (the  prefix),  and  &lt;###&gt;  is three or more digit
        number.  If this convention is followed, files can be easily accessed
        under  control  of  SPIDER  <a href="#loops">DO-loops</a>.  The file name
        (without extension) can have  up  to  77  characters  and  the
        prefix  can  contain  directory information. For example,
        <i>../usr/myself/A12BCDE001</i> is an acceptable filename. In order to
        still support a legacy naming convention <b>do not use the letter
        'x' or 'X' within file names</b> or you may get odd substitutions. </p>

        <p>SPIDER can substitute for any portion of the file name at
	run time using a  value contained in a 
        <a href="#symbol">symbolic variable</a> or
        <a href="#registers">register variable</a>. Any text entered as part of a 
        filename which is enclosed between "{" and "}" or "[]" brackets is 
        presumed to be part of a desired substitution request.</p>

        <p>To substitute a symbolic variable value into a file 
        name, place the sequence symbol at the desired location within the
        filename.  E.g. if the the file name entered is: ABC[file_suffix],
        and the content of symbolic variable: [file_suffix] is the value
        <i>_rotated</i>, then the resulting file name is: ABC_rotated.</p>

        <p>To substitute a register variable value into a file 
        name, use the sequence {****[register_var]} where the "*" string
        denotes the number of digits for the substitution and the "[register_var]" 
        denotes the register variable whose numerical value is to be substituted 
        in place of the astericks.  E.g. if the the file name entered is: 
        ABC6{***[filenum]} and the run time content of register variable [filenum] 
        is the value: 
        <i>34</i>, then the resulting filename is: ABC6034.
        This mechanism can also be used inside a 
        <a href="#loops">DO-loop</a> to substitute 
        the current DO-loop index value into a filename.</p>

        <p>There may be any number of substitution strings within a single
	filename, e.g. the following is a valid filename: 
        /usr/dir{*[dirnum]}/abcd{****[filenum]}, if the value in [dirnum]
	only contains a single digit and the value in [filenum] has less than
	5 digits.  If the register variable value (converted to an integer) to 
        be substituted contains more digits
	than the number of astericks specified an <b>error will occur</b>.</p>

        <p>A few SPIDER operations such as <a href="man/apsh.html">AP SH</a>  
        are designed to operate on a whole series of images.  In this case
        the user is asked for a file name template in which the variant portion
        of the file name is indicated by astericks '*'.  E.g. a file name 
        template: dir/ABC****.   The user is also
        prompted for a list or (document file) containing the numbers of the
        files to be operated on.  This
        same formalism may be used in procedures.</p>

 
       <p>The full file name is the base character string  amended
        with  .&lt;Dat&gt;,  where  &lt;Dat&gt;  is the data extension specified at the
        beginning of the session.</p>

        <p>The use of the  character '*'  as  the  first  character
        (subsequent ones are ignored) of the file name terminates the
        current operation and makes the system ready to accept  a  new
        operation.   Some  operations with implied DO-loops continue to
        solicit input files until the escape character '*' is used  as
        a file name.  Examples include <a href="man/ad.html">AD</a> and  
	<a href="man/su.html">SU</a>.</p>

   <a name="file_handling"><h4>File Handling</h4></a> 
 
        <p>The file whose  name  is  typed  in  is either an input
        or an output file.</p>

        <p>Input files are assumed to exist and contain data used as
        input  to the operation.  The fact that a file is input to the
        operation does not necessarily exclude changes to the file;
        An example of an operation that alters the input file is 
        <a href="man/ppll.html">PP LL</a> (Put Lines in image from 
        doc file).</p>

        <p>Output files can be either files that already  exist, or
        files that are to be created under the name specified by the
        user.  Already existing files having the same name are
        overwritten without a warning message!</p>

        <p>The dimensions of the output file are dependent on the
        operation, and are either copied from the input file (e.g
        <a href="man/sh.html">SHift</a>, <a href="man/rt.html">RoTate</a>)
	or are solicited from the user (e.g.
        <a href="man/ip.html">InterPolate</a>, <a href="man/wi.html">WIndow</a>).</p>

<a name="file_opening"><h4>File Opening</h4></a>
  
        <p>After each input file or output file specification,  
        SPIDER will attempt to open the file.  After the file is opened, 
        a statement is written on the terminal which has the following 
        form:</p>

        <blockquote>
           <p>&lt;ABC###&gt; /&lt;Title&gt;<br>
               (&lt;T&gt;) &lt;NX&gt; &lt;NY&gt; &lt;NZ&gt; 
               CREATED &lt;Date&gt;  AT
               &lt;Time&gt; &lt;D&gt; HEADER BYTES: &lt;BYTES&gt; </p>
        </blockquote>

        <p>Where:</p>
           <blockquote>

           <dl>
           <dt>&lt;ABC###&gt;</dt>
           <dd>Is the file name.</dd>

           <dt>&lt;Title&gt;</dt>
           <dd>Is a title entered by the user with <a href="man/tt.html">TT</a>.</dd>

           <dt>&lt;T&gt;</dt>
           <dd>Is the data type code and has the following values:

              <table padding-left="12%" cellpadding="2">
              <tr><td>'O2'</td><td>Mixed radix -2D Fourier data 
                      corresponding to odd-length real image data.</td></tr>
              <tr><td>'E2'</td><td>Mixed radix -2D Fourier data 
                      corresponding to even-length real image data.</td></tr>
              <tr><td>'O3'</td><td>Mixed radix -3D Fourier data 
                      corresponding to odd-length real volume data.</td></tr>
              <tr><td>'E3'</td><td>Mixed radix -3D Fourier data corresponding 
                      to even-length real volume data.</td></tr>
              <tr><td>'R2'</td><td>2D real image data.</td></tr>
              <tr><td>'R3'</td><td>3D real volume data.</td></tr>
              <tr><td>'S2'</td><td>Stacked 2D real image data.</td></tr> 
              <tr><td>'S3'</td><td>Stacked 3D real volume data.</td></tr> 
              <tr><td>'I2'</td><td>Indexed, stacked 2D real image data.</td></tr> 
              <tr><td>'I3'</td><td>Indexed, stacked 3D real volume data.</td></tr>
              </table></p>

              <p>The data type code in the file label is used to prevent
              operations inconsistent with the data format from
              being carried out (e.g., Real data cannot be
              inversely Fourier transformed).</p>

           <dt>&lt;NX&gt;,&lt;NY&gt;,&lt;NZ&gt; </dt>
           <dd>Is the number of sampling points (columns),
                    number of rows, and number of slices in the
                    image.  In the case of Fourier transforms, 
                    the numbers correspond to those of the 
                    transformed image.</dd>

           <dt>&lt;Date&gt;,&lt;Time&gt;</dt> 
           <dd>Is the date and time of file creation.</dd>

           <dt>&lt;D&gt; </dt>
           <dd>Is the disposition of the file.  The following codes 
               are used:

               <dl> 
               <dd>'N' if file is newly created<br>
                   'O' if file is old
               </dl></dd>

            <dt>&lt;BYTES&gt;</dt>
            <dd>is the number of bytes in the SPIDER header for
                this file</dd>
        </dl>
        </blockquote>

        <p>Example --- :
           <table class="opl">
           <tr><td><a href="man/pt.html">PT</a></td><td> ; Put pixel in image</td></tr>
           <tr><td>PIC001</td> <td> ; Output file</td></tr>
           <tr><td>44,44</td>  <td> ; X and Y size</td></tr>
           <tr><td>P</td>      <td> ; Put point</td></tr>
           <tr><td>1</td>      <td> ; Number of points</td></tr>
           <tr><td>20,20</td>  <td> ; Location</td></tr>
           <tr><td>N</td>      <td> ; Do not continue</td></tr>
           </table></p> 

        <p> Gives output: <br />
        PIC001 <br />
        (R )   44   44 CREATED 08-NOV-2005 AT 12:26:40  N HEADER BYTES: 1056 </p>
 
        <p>In case of abnormal termination of the session, the  user  should
        carefully check the opening information of all files that were
        open when the program failed.  This will tell him/her  if  the
        image  format  was  correct, and if the correct image file has
        been accessed.</p>

  <a name="file_image"><h4>Image File Storage</h4></a>

        <p>The exact format in  which  images and volumes  are stored
	on disk along with their headers, and the contents of the
	headers is detailed <a href="formats.html#image">elsewhere</a>.
	The only operation that  accesses the image or volume files by
	explicit record numbers is <a href="man/li.html">LI</a>
	(List). This operation is useful for dumping image contents 
        or for debugging purposes.</p>

<a name="file_inline"><h4>Inline Files</h4></a>

        <p>Many SPIDER uses involve the creation of temporary image
        files which undergo further processing later in the
	session.  Computer access to these files is faster when they
	are kept in memory instead of being written out to disk.  A
	inline file is referred to as:  <i>_#</i>.  Where <i>_#</i>
	is one to three underscore symbol(s) followed by one or two
	digits.  Any such file is stored in memory as an "inline file".
	Ninety-nine inline files are available and they can hold any size
	image. An example of a filename that denotes an inline file
	number <i>2</i> is: <i>_2</i>.</p>

<a name="file_stack"><h4>Image Stacks</h4></a>

     <p>Multiple images can be stored within a single SPIDER "stack
     file".  A stack file differs from a SPIDER volume in that each
     image keeps its own full header. A stacked image is referred to
     as:  &lt;ABC&gt;@@&lt;###&gt; where &lt;ABC&gt; is a
     sequence of alphanumeric characters and &lt;###&gt; is a sequence
     of digits. The digits after the '@@' symbol represent the image
     number within a stack.  Stacked images can be used anywhere a
     normal SPIDER file name would be used.  An example of a filename
     that denotes image number <i>4056</i> inside stack file
     <i>fil001</i> is: <i>fil001@@4056</i>.</p>

<a name="file_inline_stack"><h4>Inline Stack Files</h4></a>

     <p>Inline stack files are available and should be useful on 
     machines with large physical memory. An inline stacked image is 
     referred  to as: &lt;_#&gt;@@&lt;###&gt;.  Where &lt;_#&gt; is 
     one to three underscore symbol(s) followed by a one or two digits 
     and <i>###</i> is a sequence of digits. The digits afer the '@@'
     symbol represent the image number within a stack.
      Inline stacked images can be used anywhere a normal
     SPIDER file name would be used.  In this case, the first
     time a particular inline stack is referenced you will be asked for
     the total number of images in the stack. Alternatively, a stack can
     be created using the <a href="./man/ms.html">MS</a>  (Make Stack) 
     operation.
     An example of a filename that denotes image number <i>4056</i>
     inside inline stack number two is: <i>_2@@4056</i>.</p>

<a name="indexed_stack"><h4>Indexed Stack Files</h4></a>

     <p>Both disk based and inline stack files are available with
     an index and may be  used like normal SPIDER stack files. An
     indexed stack may be useful if you have a sparsely populated large
     stack.  In an indexed stack there is an extra set of records 
     following the overall header that stores the indices.  Unlike a
     normal stack there is no space wasted for a missing image in
     the stack.  For indexed stacks the first
     time a particular indexed stack is referenced you will be asked for
     the maximum number of any image in the index.  For indexed inline
     stacks this number is usually different
     from the maximum number of images that can be held in the stack.
     An indexed stack 
     can only be created using the <a href="./man/msi.html">MS I</a> or
     <a href="./man/cpi.html">CP I</a> operations.</p>

<a name="params"><h4>Parameter Values</h4></a> 
 
        <p>Values of parameters solicited by an operation can be real, 
        integer, or alphanumeric.  Alphanumeric parameters are  used  to  
        specify options (e.g., (S)ine or (C)osine).</p>

        <p>Real and integer parameters are read in without
        formatting  rules;  they can be at any place on the line,
        separated by commas or any number of blanks, and spread  out
        over any number of (non-blank) lines.  They are checked for
        correct type and possible typing errors.  Such errors and type
        inconsistencies result in an error message:</p>

             <p><dl>      
             <dd>.BAD INPUT PARAMETER(S).  RE-ENTER:</dd>
             </dl></p>

        <p>The user then has to re-enter the entire line containing the
        error.  For example, in <a href="man/ip.html">IP</a> (InterPolate), 
	the user enters the dimensions of the output file:</p>

             <p><dl>     
             <dd>41 50.0</dd>
             </dl></p>
    
        where only integer input is allowed.  After the error message,
        the user has to re-enter:</p>
             <p><dl>              
             <dd>41 50</dd>
             </dl></p>

<a name="completion"><h3>Completion of an Operation</h3></a>

        <p>After successful completion of the operation, the  system
        returns to the  operation input status, by printing  the
        solicitation message '.OPERATION:' on the screen.</p>

<a name="ending"><h3>Ending a SPIDER Session</h3></a>

        <p>If you want to terminate the session, you sign  off  with
        the  <a href="man/en.html">EN</a> operation. 
	SPIDER then responds with the terminal message:
               <dl>  
               <dd>**** SPIDER NORMAL STOP</dd>             
               </dl></p>

<a name="file_nonimage"><h3>Non-Image files used by SPIDER</h3></a>

        <p>SPIDER produces  two  files  as  a  result  of  the  user
        session:  the <a href="#file_results">RESULTS</a> file and the 
	<a href="#file_log">LOG</a> file. For some operations SPIDER 
        also produces and/or uses <a href="#file_doc">document files</a>.</p>

<a name="file_results"><h4>RESULTS file</h4></a>  

        <p>During an interactive  session,  any  listings  generated
        that are too lengthy to be listed at the terminal are written
        instead to the RESULTS file, RESULTS.&lt;Prj&gt;.&lt;Version&gt;. 
        Where &lt;Version&gt; is a sequential version number applied
        by SPIDER to differentiate successive runs within a directory. 
        This file also
        contains the protocol of any procedure started interactively.</p>

        <p>During a procedure session, the  RESULTS  file  contains  the
        protocol of the operation sequence executed, as well as lists
        generated by it in their logical order.</p>

        <p>The <a href="./man/md.html">'MD'</a> operation with 'VB OFF' 
        with option: <i>Verbose Off</i> can be used to decrease the amount of output
        from DO-loops, file opening, and from the 'SD' and 'UD IC' operations.
        This can decrease the length of RESULTS files by thousands of 
        lines in long procedures.</p>

        <p>The <a href="./man/myfl.html">'MY FL'</a> operation can be used 
        to force a write from any accumulation in the systems output buffer 
        to the RESULTS file.</p>

<a name="file_log"><h4>LOG file</h4></a>
 
        <p>The  LOG  file, LOG.&lt;Prj&gt;, is a complete record of
        everything that has been typed in by the user during an
        interactive session.  It is sometimes useful as a record  of
        the session.</p>

<a name="file_doc"><h4>Document files</h4></a>

        <p>Document files are keyed, <a href="docfile.html">formatted</a>, 
        sequential files  created  by
        executing  the  <a href="man/sd.html">SD</a> operation and certain 
        additional operations.  Document files are used to  permanently
        store  the  contents  of  a  group  of  register variables (e.g., shift
        coordinates, angles, etc.) as  realized  in  different  images
        (specified  by  keys).  Any subsequent SPIDER run can retrieve
        these variable values by their keys.</p>

        <p>Document files are also used for communication between Web
        and SPIDER.  For example the "Particle Picking" operation in Web
        creates a set of document files used by certain operations in
        SPIDER.</p>

	<p>Document files may also be used to switch  on  and  off  the
	execution  of procedure files, or include/exclude images of  a
	series  from processing depending on the result of previous
	operations. </p>

<a name="variables"><h3>Variables</h3></a>
 
        <p>Two types of variables are available in SPIDER. 
         <a href="#register_variables">Register (numerical) Variables</a> 
         can contain any floating point value. 
         <a href="#symbolic_variables">Symbolic (String) Variables</a> are strings of
         characters.  
         Both types of variables are denoted with '[]' brackets. You should
         <b>not</b> simultaneously use the same variable name for both a 
         symbolic variable 
         and a register variable within a single procedure.  Variable names can 
         contain alphanumeric characters plus
         '_' and '-'.  Variable names should start with a alphabetic letter not
         a digit.  Other special characters including a blank
         may work but are not supported and may cease to work in the
         future. Names are case-sensitive.</p>

<a name="register_variables"><h4>Register Variables</h4></a>

        <p><i>Register variables</i> are used for storing and transferring 
        numerical values during a SPIDER session. Internally they are stored as 
        double precison values.  Register variables now have user specifed names. 
        These variables are denoted with '[]' brackets e.g. [pi].  <small>For
        backward compatibility we still allow the use of the numerical register
        notations (e.g. X11) present in older releases of SPIDER, but we recommend that
        you switch to this newer convention.</small>    
        The number of register variables may be increased using the 
        <a href="man/md.html">MD</a> operation with option "SET VARS". 
        However the number of usable register variables in SPIDER is 
        also limited by the combined length of all the defined variable names 
        and this limit can only be increased by recompiling SPIDER.  However 
        the amount is quite generous.</p>

        <p>Register variables may appear in 
        <a href="#arithmetic">arithmetic expressions</a>, and
	<a href="#math_functions">mathematical functions</a>.</p>

        <p>A register variable can be created in five ways:</p>

	<p><ol>
           <li>By being explicitly set equal to a value or a value from an 
               arithmetic expression, e.g. 
               <i> <a href="man/var.html">[var]</a> = 34.0</i>.   </li>

           <li>As output resulting from an operation, e.g.
               <i> <a href="man/var.html">UD IC</a> 10,[var]</i>.   </li>

           <li>When used as an index in a <a href="#loops">do-loop</a>, e.g. 
               <i> <a href="man/do.html">DO</a> [var]=1,10</i>.   </li>

           <li>Using the <a href="man/rr.html">RR</a> operation, e.g.
               <i> <a href="man/rr.html">RR</a> [var]</i>.   </li>

           <li>When received as a <a href="#argument">procedure argument</a> from
               a calling procedure. </li>

	</ol></p>

        <p>Example --- 1:</p>

        <p>When SPIDER  asks  '.OPERATION:', the user may explicity create and set
           a register variable:</p>

             <p><table class="opl">
             <tr><td> <a href="man/var.html">[pi] = 3.14159</a> </td></tr>
             </table></p>

        <p>Register variable <i>pi</i> will then  take on  the  value:  3.14159. 
        To examine  the  contents  of a variable, the user need only type
        the name of the variable he/she wishes to examine.  
        E.g. enter: [pi] at the operation prompt and the value of variable
        [pi], 3.14159, will be printed on the terminal or in the RESULTS file.</p>

        <p>Example --- 2:</p>

        <p>Some operations can create and set a register variable:</p>

             <p><table class="opl">
             <tr><td><a href="man/fs.html">FS</a> [max]</td> 
                 <td> ; Read image maximum into variable [max]</td></tr>
             <tr><td>FIL008</td> <td> ; File name</td></tr>
             </table></p>


        <p>Example --- 3:</p>

        <p>A '<a href="man/do.html">DO Loop</a> can create and set a register variable:</p>

             <p><table class="opl">
             <tr><td><a href="man/rr.html">DO</a> [img]=1,100</td> 
                 <td> ; Loop to set [img] from 1...100</td></tr>
             </table></p>


        <p>Example --- 4:</p>

        <p><a href="man/rr.html">RR</a> can create and set a register variable:</p>

             <p><table class="opl">
             <tr><td><a href="man/rr.html">RR</a> [pi]</td> 
                 <td> ; Read variable</td></tr>
             <tr><td>3.14159</td> <td> ; Variable value</td></tr>
             </table></p>

        <p><small>Older releases of SPIDER used numerical system registers called 
        x0...x100 for storing register variables. These system registers
        were denoted by the appearance of the 'x' or 'X' followed by digits. For
        backward compatibility we still allow the use of the numerical system
        register notation present in older releases of SPIDER, but we suggest  
        that you switch to this newer convention with named register variables.  
        Registers: X0...X10 contained special values.
        X0 contained the most recent content of the DO-loop index (updated
        after each execution of the <a href="man/enddo.html">ENDDO</a> or
        <a href="man/lb.html">LB</a># statement). 
        Register: X9 held an Error flag (0 if no error occurred and 1 if an 
        error occured in the most recent operation).
        You will still see numerical system registers in use in many procedures 
        distributed with SPIDER.  The values of all the numerical system register 
        variables could be saved and retrieved using the 'SR' operation.  
        The 'SR' operation is no longer available in SPIDER.
        </small>.</p>     


 <a name="registers_input"><h4>Register variables (or Arithmetic Expressions) as 
             Input Parameters</h4></a>

	<p>Register variables or arithmetic 
        <a href="#expressions">expressions</a>  containing register variables 
        may be used wherever integer or floating point values
	are solicited by operations.</p>

        <p>Example --- 1:
           <table class="opl"></p>

       <p><tr><td>[size]=33</td>     <td> ; Create register variable</td></tr>
           <tr><td><a href="man/mo.html">MO</a></td><td> ; Create model image</td></tr>
           <tr><td>PIC002</td>        <td> ; Output file</td></tr>
           <tr><td>[size], [size]</td><td> ; Image x and y size</td></tr></tr>
           <tr><td>T</td>             <td> ; Sine wave image</td></tr>
	</table></p> 

        <p>Here the contents of register variable: [size] are interpreted as
	   X and Y size of image.</p>

        <p>Example --- 2:</p>
           <table class="opl">
           <tr><td>[offset]=29</td>                 <td> ; Create register variable</td></tr>
           <tr><td><a href="man/sh.html">SH</a></td><td> ; Shift image</td></tr>
           <tr><td>PIC002</td>                      <td> ; Input file</td></tr>
           <tr><td>PIC003</td>                      <td> ; Output file</td></tr>
           <tr><td> ([size]-[offset]), SQR([size]-2)</td><td> ; Shifts </td></tr>
	</table></p> 
 
        <p>Here each arithmetic <a href="#expressions">expression</a> 
        is evaluated  first,
	and  the resulting  values are interpreted as components of
	a shift vector.</p>

        <p>Note that the register variable is always a floating point
        number. If read in as an integer, the closest integer value
        is used, e.g. 4 for 3.8, 3 for 3.2, -4 for -4.25, etc.</p>


   <a name="registers_output"><h4>Register Variables as Output Parameters</h4></a>

        <p>Some operations such as <a href="man/fs.html">FS</a>, and  
	<a href="man/pk.html">PK</a> allow the
        specification  on the operation line of  register variables to accept 
        output parameters. <a href="man/pk.html">PK</a> is  an  operation that 
        searches for the peak positions in a file.  It allows
        specification of output parameters on the operation line (in the  example, 
        [locx] and [locy]) where the peak coordinates are to be stored.   These 
        variables may be used by subsequent operations needing floating  point or
        integer parameter input. A minus sign may be used to invert the sign of 
        the value input from a variable.</p>

        <p>Example --- :
            <p><table class="opl">
            <tr><td><a href="man/pk.html">PK</a> [locx],[locy]</td></tr>
            <tr><td>PIC001</td>  <td> ; Input file</td></tr>
            <tr><td>1</td>       <td> ; Number of peaks to be found</td></tr>

            <tr><td> </td></tr>
            <tr><td><a href="man/sh.html">SH</a></td><td> ; Shift</td></tr>
            <tr><td>PIC001</td>         <td> ; Input file</td></tr>
            <tr><td>PIC003</td>         <td> ; Output file</td></tr>
            <tr><td>-[locx],-[locy]</td><td> ; Shifts </td></tr>
            </table></p> 

 <a name="registers_saving"><h4>Saving and Unsaving Register Variables</h4></a>

        <p>Any number of register variable values can be saved in a permanent file 
        using the <a href="man/sd.html">SD</a> (Save Document) operation. 
        A subsequent <a href="man/ud.html">UD</a> or <a href="man/udic.html">UD IC</a> 
        operation issued in a different (or the same) session, refering  to the same 
        document file, retrieves these variable values.  For details on saving
        and unsaving variables, see the <a href="man/sd.html">SD</a>,
        <a href="man/ud.html">UD</a> and <a href="man/udic.html">UD IC</a> manual 
        chapters.</p> 

 <a name="pocketcalc"><h3>SPIDER's Pocket Calculator</h3></a>

        <p>SPIDER incorporates a "pocket calculator" 
	which evaluates 
        <a href="#arithmetic">arithmetic operations</a>,
	<a href="#expressions">expressions</a>, and
	<a href="#math_functions">mathematical functions</a>.</p>

  <a name="arithmetic"><h4>Arithmetic Operations</h4></a>

	 <p>At the operation prompt in SPIDER, the user may
         type:</p>

            <p><table class="opl">
            <tr><td>2*3+5</td></tr>
            </table></p>

        <p>SPIDER will then respond with '11.0000'.</p>

	<p>Available arithmetic operations are:</p>

            <p> <table border="0">
            <tr><td> + </td><td>Addition</td></tr>       
            <tr><td> - </td><td>Subtraction</td></tr>        
            <tr><td> * </td><td>Multiplication</td></tr>       
            <tr><td> / </td><td>Division</td></tr>            
            <tr><td> ** </td><td>Exponentiation</td></tr>
            <tr><td><a href="#math_functions">Mathematical function</td><td>  </td> </tr>       	
            </table></p>

 <a name="expressions"><h4>Expressions</h4></a>

        <p>Expressions can be used within the SPIDER calculator and
        also in certain operations such as 
        <a href="man/if.html">IF</a>,  
        <a href="man/if_goto.html">IF...GOTO</a>,  
        <a href="man/if_then.html">IF... THEN</a>, and  
        <a href="man/elseif_then.html">ELSEIF... THEN</a>.</p> 
 
	<p>Expressions are evaluated from left to right with
        standard rules of precedence with one important exception:
        <b>a string of adjacent arithmetic operators are not allowed</b>. 
        In addition, the user may
        specify negative numbers and parentheses just as he/she would
        normally.  For example, if the user typed:</p>

            <p> <table class="opl">
            <tr><td>(3*(-2))*(2+6)</td></tr>
            </table></p>

        <p>SPIDER would respond with '-48.0000'.</p>

        <p>Scientific notation (i.e., 2.3E-4) is allowed.</p>

        <p>These operations may be used to manipulate register variables as well.
        For example, if the user typed the following sequence:</p>

            <p> <table class="opl">
            <tr><td>[var]=4.1</td></tr>
            <tr><td>2*[var]</td></tr>
            </table></p>

        <p>SPIDER would respond with 8.2000. </p>

        <p>In addition, the user may set a register variables equal to the
        value of an expression. For example, if the user typed:</p>

            <p> <table class="opl">
            <tr><td>[var]=9.6</td></tr>
            <tr><td>[var]=[var]+5</td></tr>
            </table></p>

        <p>SPIDER would store the value: 14.6 in [var].</p>

        <p>If the user types an expression  that  does  not  conform
        with  the syntax rules of the conversion routines, SPIDER will
        respond with:</p>

            <p><dl> 
            <dd>*** ERROR: INVALID ARITHMETIC EXPRESSION</dd>
            </dl></p>

        <p>Examples of valid expressions are:</p>

            <p> <table class="opl">
            <tr><td><dt>
            <tr><td>2*(-6)</td></tr>
            <tr><td>((3+6)*(7*3))**9.1</td></tr>
            <tr><td>[var0]=([var1]+7)*([var2]/[var2])</td></tr>
            <tr><td>[var1]=3.4e-4*6.0</td></tr>
            </table></p>

        <p>Examples of invalid expressions are:</p>

            <p> <table class="opl">
            <tr><td>[var]=(2+3</td><td> ; [Unbalanced parenthesis]</td></tr>
            <tr><td>(2+3/6))  </td><td> ; [Unbalanced parenthesis]</td></tr>    
            <tr><td>2*-6      </td><td> ; [Adjacent arithmetic operators]</td></tr>
            <tr><td>2*(-6E2)  </td><td> ; [No dot in the number]</td></tr>
            <tr><td>1 - 4     </td><td> ; [No blanks allowed inside]</td></tr>
            </table></p>

   <a name="math_functions"><h4>Mathematical functions</h4></a>

	<p>Available mathematical functions are:</p>
            <p><dl><dd>
            <table border="0")
	    <tr><td>PAD(&lt;Expression&gt;)  </td><td> Next highest power of two of expression</td></tr>	
            <tr><td>SIN(&lt;Expression&gt;)  </td><td> Sine of expression                     </td></tr>
            <tr><td>COS(&lt;Expression&gt;)  </td><td> Cosine of expression                   </td></tr>
            <tr><td>EXP(&lt;Expression&gt;)  </td><td> Exponential of expression              </td></tr>
            <tr><td>LOG(&lt;Expression&gt;)  </td><td> Logarithm (Base 10) of expression      </td></tr>
            <tr><td>LON(&lt;Expression&gt;)  </td><td> Natural log of expression              </td></tr>
            <tr><td>SQR(&lt;Expression&gt;)  </td><td> Square root of expression              </td></tr>
            <tr><td>INT(&lt;Expression&gt;)  </td><td> Truncates to integer                   </td></tr>
            <tr><td>ABS(&lt;Expression&gt;)  </td><td> Absolute value of expression           </td></tr>
            <tr><td>ATA(&lt;Expression&gt;)  </td><td> Arc tangent of expression (in degrees) </td></tr>
            <tr><td>ASI(&lt;Expression&gt;)  </td><td> Arc sine of expression (in degrees)    </td></tr>
            <tr><td>ACO(&lt;Expression&gt;)  </td><td> Arc cosine of expression (in degrees)  </td></tr>
            <tr><td>TAN(&lt;Expression&gt;)  </td><td> Tangent of expression                  </td></tr>
            <tr><td>RAN(&lt;Any variable&gt;)</td><td> Pseudo random uniform number generator in range from 0 to 1.   </td></tr>
            <tr><td>RNN(&lt;Any variable&gt;)</td><td> Pseudo random number generator, with normal distribution (0,1).</td></tr>
  	    </table></dd></dl></p>

      <p>where  &lt;Expression&gt;  stands for any   
           <a href="#expressions">valid SPIDER math expression</a>.</p>

      <p>All trigonometric functions use arguments (or give results) in degrees.</p>

      <p>Examples of valid usage:</p>

         <table class="opl")
	    <tr><td>[var] = SIN(4.5/([var]-100.))                          </td>
	    <tr><td>[var] = EXP(-400./[var1]**2)                           </td></tr>		
	    <tr><td>[var] = [var1]-SIN(45./180.*[var2])                    </td></tr>
	    <tr><td>[var] = SIN(45./180.*[var1])                           </td></tr>
	    <tr><td>[var] = [var1] - COS(LON([var2]))                      </td></tr>
 	    <tr><td>[var] = RAN([dummy])                                   </td>
                <td> ; Value of [dummy] not altered nor used for anything! </td></tr>
	    <tr><td>IF (INT([i]/2)==[i]/2) [even] = 1 	
                <td> ; Finding even/odd                                    </td></tr>
         </table></p>

 <a name="symbolic_variables"><h3>Symbolic (String) Variables</h3></a>

        <p><i>Symbolic (String) Variables</i> are denoted with '[]' brackets e.g. [filename].
        The number of symbolic variables in SPIDER is dependent upon the combined
        length of the variable names and their associated values and can only
        be increased by recompiling SPIDER.  However the amount is quite generous.
        Symbolic variables are used for storing and substituting character strings.
        Symbolic variables can be  either <i>global</i> or <i>local to a procedure</i>.
        Symbolic variables are commonly used to store file names.
        Symbolic variables can be nested so as to contain register variables or other symbolic variables.
        A symbolic variable can be created in the following ways:</p>

	<p><ol>
           <li>Explicitly <a href="man/var.html"> setting the symbolic variable </a> 
               equal to a string value.  
               <small>Older releases of SPIDER used the obsolete  
               <a href="man/frl.html">FR L</a> and <a href="man/frg.html">FR G</a>'
               operations for this purpose.  </small></li>

            <li>Using: <a href="man/fr.html">FR</a> operation which creates a
               local symbolic variable by reading the value from a calling procedure or the
               interactive session.</li>

           <li>Using: ?PROMPT?[variable] which creates a local symbolic variable by 
               reading the value from a calling procedure or the
               interactive session.</li>

           <li>When received as a <a href="#argument">procedure argument</a>.</li>
        </ol></p>

        <p>Example --- 1:</p>

            <p><table class="opl">
            <tr><td><a href="man/var.html">[filename]</a> = 'PIC001'</td><td>; Set a string variable</td> </tr>
            </table></p>

            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <small> This is equivalent to the obsolete sequence: </small>
            <table class="opl">
            <tr><td><small><a href="man/frl.html">FR L</a></small></td>
                <td><small>; Set a string variable</small></td></tr>
            <tr><td><small>[filename]PIC001</small></td></tr>
            </table>

        <p>Example --- 2:</p>
            <table class="opl">
            <tr<td><a href="man/var.html">[filename]</a> = 'PIC{***[filenum]}'</td>
               <td>; Set a string variable</td></tr>
            <tr><td><a href="man/var.html">[filenum]</a> = 2</td> 
                <td>; Set a register variable</td> </tr>

            <tr><td><a href="man/fi.html">FI</a></td>
                <td>; File information operation</td></tr>
            <tr><td>[filename]</td>                  
                <td>; File name</td></tr>
            </table>

        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Where [filename] will be resolved at run time to: <i>PIC002</i></p>
        </p>

        <p>Example --- 3:</p>

            <p>
            <table class="opl">
            <tr><td>GLOBAL <a href="man/var.html">[dir]</a> = 'img' </td>               <td>; Set a global string variable</td></tr>
            <tr><td>GLOBAL <a href="man/var.html">[global_file]</a>= '[dir]/IMG055'</td><td>; Set a global string variable</td></tr>

            <tr><td>VM</td><td>; Echo current value for the global string variable</td></tr>
            <tr><td>echo [global_file]</td><td> </td><td></tr>
            </table>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;At run time will output: <i>img/IMG055</i></p>
        </p>

        <p>Other uses of symbolic variables are discussed in the 
           <a href="#procedures">Procedure Mode</a> section below.</p>

 <a name="comments"><h3>Comments</h3></a>

      <p>A comment is a non-executable statement that will  simply  be
      printed out in the RESULTS file.  Comments may be inserted anywhere 
      during a SPIDER run, including on any lines that carry SPIDER
      operations and parameters, but they are usually used only in 
      SPIDER procedure files. 
      A comment is initiated with a semicolon ';' and anything appearing
      on a line after a semicolon is ignored during processing.  A comment
      has the form:</p>

           <p><blockquote>
           ; This is a comment
           </blockquote></p>

     <p>Examples ----:</p>

           <p><table class="opl">
           <tr><td><a href="man/pd.html">PD</a></td><td>; Now pad input image </td></tr> 
           <tr><td>PIC001</td>                      <td>; From previous window            </td></tr>
           <tr><td>PAD005</td>                      <td>; Output will be used for FT      </td></tr>
           <tr><td>128,128</td>                     <td>; Next power of two dimensions    </td></tr>
           <tr><td>Y</td>                           <td>; Use average for padding         </td></tr>
           <tr><td>1,1</td>                         <td>; Top left coord. arbitrary in this case</td></tr>
           </table></p>

<hr />

<h2><a name="procedures">Running SPIDER in Procedure Mode</a></h2>

   <a name="control"><h3>Procedure Files</h3></a>

        <p>Procedure files are user-created files or scripts containing
        sequences of operations and parameter values.  Procedure files
        can have any alphanumeric name up to 77 characters but the
        name must begin with a letter.  Instead of taking
        the input from the terminal, SPIDER uses the control sequence
        as it appears in the procedure file.  All output that would
        normally appear on the terminal is directed to the RESULTS
        file, and no <i>LOG</i> file is created.</p>

        <p>To invoke a procedure when SPIDER asks '.OPERATION:', 
        the  user  types an "at" sign <i>@@</i> 
        followed by the name of the procedure file without its extension.</p>  

            <table class="opl">
            <tr><td>.OPERATION: @@ALIGN10</td></tr>
            </table>

        <p>Procedures may be called:</p>

            <p><ol>
            <li>From another procedure.</li>
            <li>From an interactive session.</li>
            <li>At initial SPIDER startup.</li>
            </ol></p>

	<p>If a procedure is called from interactive session, when a
	'RE' operation is encountered inside a procedure, control
	will return to the terminal.  If a procedure is called from
	another procedure file, control will be passed  to the
	operation following the procedure call.</p>

       <p>Procedure files can be used in many different styles within SPIDER including:</p>

            <p><ol>
            <li>As <a href="./techs/recon1a/Docs/mr1.html">standalone processing control.</a></li>
            <li>Under control of <a href="../spire/spire-docs/spire.html">Spire</a>.</li>
            <li>In an <a href="#writing">interactive session.</a></li>
            </ol></p>


<a name="execution"><h4>Execution Rules</h4></a>
	
       <p>Some standard  procedures  are  contained  in the 
       <a href="../proc/">SPIDER system's procedure directory</a> 
       with the extension <i>'spi'</i>.  
       These procedures form the standard procedure library for SPIDER.</p>

       <p>For any procedure call, SPIDER will first scan the user's
       directory.   If  a procedure file under the given name
       is found, then this procedure is used in  the  call.
       If  no  such  procedure is found, SPIDER will attempt to
       locate the given file with a <i>.spi</i> extension in the SPIDER 
       system's procedure directory.</p>

<a name="argument"><h4>Register Variable Argument Transfer</h4></a>

        <p>To pass initial arguments from the procedure caller to the
        called procedure, the user puts the
        arguments  (if  any)  needed  by  the procedure behind the
        procedure name, enclosed in parenthesis, in the same order  as  they  
        appear  in  the
        called procedure file. Procedures may pass up to 12 
        register variable arguments if
        these  are  matched  by  a  defining  argument sequence in the
        procedure called.  The defining argument sequence must  appear
        as the first line of the called procedure, and must be of the 
        form:</p>

            <table class="opl">
            <tr><td><b>(</b>[&lt;N1&gt;],[&lt;N2&gt;],[&lt;N3&gt;],...<b>)</b></td></tr>
            </table>

        <p>Where: [&lt;N1&gt;],[&lt;N2&gt;],[&lt;N3&gt;],...  are register variables  
        appearing  in  the procedure.  
        <small> NOTE: Prior to 2004 '[]' brackets were used instead of '()'.</small> 
        The calling sequence must have the same number of
        registers, and must be of the form:</p>

            <table class="opl">
            <tr><td>@@&lt;PROCNAME&gt;><b>(</b>[&lt;M1&gt;],[&lt;M2&gt;],[&lt;M3&gt;],...<b>)</b>.
            </table>

        <p>Register variable values are passed in both  directions;
        i.e., from the upper to the lower level and vice-versa.</p>

       <p>Example ---  :</p>

       <p>If the procedure <i>TEST_ARGS</i> is defined as follows:</p>
            <table class="opl">
            <tr><td>([v10],[v11],[v12])</td></tr>
            <tr><td>[v10]=[v10]*2</td></tr>
            <tr><td>[v11]=[v11]*[v12]</td></tr>
            <tr><td>[v12]=[v12]/2</td></tr>
            <tr><td><a href="man/re.html">RE</a></td></tr>
            </table>

        <p>invoking <i>TEST_ARGS</i> as follows:</p>

            <table class="opl">
            <tr><td>[v20]=1</td></tr>
            <tr><td>[v30]=5</td></tr>
            <tr><td>[v40]=-4</td></tr>
            <tr><td>@@TEST_ARGS([v20],[v30],[v40])</td></tr>
            </table>

        <p>will result in the following values within the caller:</p>
            <table class="opl">
            <tr><td>[v20] = 2</td></tr>
            <tr><td>[v30] = -20</td></tr>
            <tr><td>[v40] = -2</td></tr>
            </table>

<a name="parameter"><h4>Symbolic (String) Variable Transfer to Procedures</h4></a>

        <p>There are two methods to pass symbolic variables to a called procedure.</p>

	<ol>
        <li><p>Replace the desired parameters inside the called procedure
           with  a solicitation prompt and variable name for the parameters.
           Place the variable names behind the procedure  calling statement in the 
           exact same order  as  they  will be queried  in  the 
           called procedure. Inside the called procedure
           indicate that the variables  should be obtained from the caller by placing a 
           solicitation prompt enclosed in question marks followed by a symbolic variable
           name  e.g., ?ROTATION ANGLE?[angle] in place of the variable that 
           the user wishes to read.</p>

           <p>If the procedure <i>TEST_MASTER</i> contains the following:</p>

           <p> <table class="opl">
             <tr><td>@@TEST_VAR                     </td> <td> ; Procedure</td></tr>
             <tr><td>PIC002                        </td> <td> ; 1'st solicited parameter (input filename)</td></tr>
             <tr><td>30                            </td> <td> ; 2'nd solicited parameter (angle)</td></tr>
             <tr><td><a href="man/en.html">EN</a>  </td></tr></p>
           </table></p>

           <p>and procedure: <i>TEST_VAR</i> contains the following:</p>

           <p><table class="opl">
             <tr><td><a href="man/rt.html">RT</a></td> <td>; Rotate images operation</td></tr>
             <tr><td>?INPUT FILE?                </td> <td>; Solicit input  filename</td></tr>
             <tr><td>OUT007                      </td> <td>; Output filename</td></tr>
             <tr><td>?ROTATION ANGLE?[angle]     </td> <td>; Solicit rotation angle and assign 
                                                             to symbol: [angle]</td></tr>
             <tr><td><a href="man/re.html">RE</a></td></tr>
           </table></p>

	   <p>Then '.OPERATION: @@TEST_MASTER will read the image PIC002, rotate it by
              30 degrees and store it in: OUT007.</p>
        </li>

        <li>
           <p>Use the <a href="man/fr.html">FR</a> operation inside the
           called procedure to create a local symbolic variable by reading its 
           value from a calling procedure.</p> 

           <p>If the procedure <i>TEST_MASTER2</i> contains the following:</p>

           <p><table class="opl">
             <tr><td>@@TEST_VAR2                    </td> <td> ; Procedure</td></tr>
             <tr><td>PIC002                        </td> <td> ; 1'st solicited parameter (input filename)</td></tr>
             <tr><td>30                            </td> <td> ; 2'nd solicited parameter (angle)</td></tr>
             <tr><td><a href="man/en.html">EN</a>  </td></tr></p>
             </table></p>

           <p>and procedure: <i>TEST_VAR2</i> contains the following:</p>

           <p><table class="opl">
             <tr><td><a href="man/fr.html">FR</a></td></tr></p>
             <tr><td>?ROTATION ANGLE?[angle]     </td> <td>; Solicit rotation angle and 
                                                             assign to symbolic variable: [angle]</td></tr>

             <tr><td><a href="man/rt.html">RT</a></td> <td>; Rotate images operation</td></tr>
             <tr><td>?INPUT FILE?                </td> <td>; Solicit input  filename</td></tr>
             <tr><td>OUT007                      </td> <td>; Output filename</td></tr>
             <tr><td>[angle]                     </td> <td>; Solicit rotation angle and assign 
                                                             to symbolic variable: [angle]</td></tr>
             <tr><td><a href="man/re.html">RE</a></td></tr>
           </table></p>

	  <p>Again '.OPERATION: @@TEST_MASTER2 will read the image PIC002, rotate it by
             30 degrees and store it in: OUT007.</p>
          </li>
        </ol>


 <a name="loops"><h3>DO-Loops</h3></a>

       <p>DO-Loops are control loops similar to those in FORTRAN.  
          They are initiated with the statement:</p>

           <p><blockquote>
              <a href="man/do.html">DO</a> 
                  &nbsp;&nbsp; &lt;C&gt;=&lt;M&gt;,&lt;N&gt;,&lt;O&gt;
           </blockquote></p>

      <p>and terminated with:</p>

           <p><blockquote><a href="man/enddo.html">ENDDO</a></blockquote></p>

      <p>Where:</p>

           <p><blockquote><dl>
           <dt>&lt;C&gt;</dt>
               <dd>is a <a href="#register_variables">register variable</a> 
               for the DO-loop index.</dd>
           <dt>&lt;M&gt;,&lt;N&gt;,&lt;O&gt; 
               <dd>are integers or variables defining beginning, the end of the DO-loop, 
               and the loop counting increment. 
               Successively, the index &lt;C&gt; will be assigned 
               the values &lt;M&gt;, &lt;M&gt;+&lt;O&gt, &lt;M&gt;+2*&lt;O&gt, 
               ... &lt;N&gt;.  (We advise against using  non-integers for
               these values as their definition may vary in the future.)</dd>
           </dd>
           </dl></blockquote></p>

     <p>DO-loops may be nested, but they must be distinguished by
        different index variables. Maximum nesting is depth is
        '</i>'MAXPRC'</i>'. See source file: 
          '<a href='"'../src/CMLIMIT.INC'"'>''CMLIMIT.INC'</a>' 
          for current value of '</i>'MAXPRC'</i>'. </p> 

     <p> <blockquote><small>
          Prior to SPIDER release 15.0 there was an earlier syntax for
         initiating and ending DO-Loops which is still supported but deprecated.
        <dl>
           <dt>Loops were initiated:</dt>
           <dd>
              <a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>
                  &lt;L&gt;&nbsp;&nbsp; &lt;C&gt;=&lt;M&gt;,&lt;N&gt;,&lt;O&gt;
           </dd>

        <dt>and terminated with:</dt>
           <dd><a href="man/lb.html">LB</a>&lt;L&gt;</dd>

       <dt>Where:</dt>
           <dd> &lt;L&gt;&nbsp;&nbsp;
               was a one or two digit integer used for distinguishing 
               the terminating label for this DO-loop. </dd>
          </dl>
      </small></blockquote></p>

        <p>There are two basically different uses of DO-loops in an image  
        processing application:</p>

        <ol>
          <p><li> Applying the same sequence of  operations  with  the
                 same parameter values to different images,
                 distinguished by numbered file names.</li></p>

          <p><li> Applying  the  same  sequence  of  operations   with
                 different parameter values to the same image. </li></p>
        </ol>

   
<a name="loops_filenames"><h4>Variable Filenames in DO-Loops</h4></a>

     There are two conventions for entering file names containing a 
        variable numerical value:
        <ol>
        <li><p> 
          &lt;ABC&gt;{&lt;****&gt;&lt;C&gt;} &nbsp;&nbsp; E.g.:  IMG{****[filenum]} <br />
          This convention is suitable for use in self-contained procedures.</p>
        </li>
        <li><p>
            &lt;ABC&gt;&lt;****&gt;&lt;C&gt; &nbsp;&nbsp;&nbsp; E.g.:  IMG****[filenum]
            <br />
            This convention is more convenient when using 
            <a href="#template">variable filenames in interactive procedures</a>. </p>
        </li>
        </ol>
       

        Where:
            <blockquote>
            <p><dl>   
            <dt>&lt;ABC&gt;</dt>
                <dd>is a alphanumerical file prefix</dd>
            <dt>&lt;***&gt;</dt>
                <dd>denotes the number of digits to be substituted</dd>
            <dt>&lt;C&gt; </dt>
               <dd>is the DO-loop count variable defined above.</dd> 
             </dl></p></blockquote>

        <p> Example --- :</p>

         <p><table class="opl">
            <tr><td><a href="man/do.html">DO</a> [filenum]=1,4</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/mr.html">MR</a></td><td> ; Mirror operation</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; PIC{****[filenum]}          </td><td> ; Input file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}          </td><td> ; Output file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; Y                           </td><td> ; Mirror axis</td></tr>
            <tr><td><a href="man/enddo.html">ENDDO</a>                             </td></tr>
	 </table></p>
        
 

   <a name="loops_variables"><h4>Variable Parameter Input Inside DO-Loops</h4></a>

        <p>Inside a DO-Loop, the user may either wish to enter the same
        parameter (or set of parameters) on each iteration of the loop
        or alternatively change the parameters with each iteration.</p>

        <p>As of SPIDER release 19.+, if the user wants to enter the same numerical 
        parameter(s) on each iteration of a loop the user <strong>no longer</strong> has to 
        surround the parameter(s) set with "()" parenthesis.
        If the user has confusing, legacy SPIDER procedures which require this 
        error prone capabilty then he/she can use the <a href="man/md.html">MD</a> operation
        with option: <i>() ON</i> to reactivate this legacy convention
        and require the ()'s. </p>

        <p> Current Example --- :</p>
            <p><table class="opl">
            <tr><td><a href="man/do.html">DO</a> [filenum]=1,4</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/rt.html">RT</a></td><td> ; Rotate operation</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; PIC{***[filenum]}          </td><td> ; Input file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}         </td><td> ; Output file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; 45.                        </td><td> ; Rotation angle</td></tr>
            <tr><td><a href="man/enddo.html">ENDDO</a>                            </td></tr>
	    </table></p>
        
        <p>Here the same value  (45.) is to be used for each iteration of the loop.</p>  
 
        <p>There are various methods to change the parameter values used on 
           different iterations of the loop.  For example to successively use 
           the angles 45, 61 and 78 degrees in a <a href="man/rt.html">RT</a> 
           operation loop with the pictures PIC001, PIC002, and PIC003:</p>
 
        <p><ol>

           <li>Values may  be entered before any operation by using the
               <a href="man/rrs.html">RR S</a> operation. 

            <p><table class="opl">
            <tr><td><a href="man/do.html">DO</a>  [filenum]=1,3                  </td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/rrs.html">RR S</a> [rotang] </td><td> ; Read values</td> </tr>  
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; 45, 61, 78                </td>               <td> ; List</td>        </tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; [filenum]                 </td>               <td> ; Position within list (45,..)</td></tr>
 
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/rt.html">RT</a></td>             <td> ; Rotate operation</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; PIC{****[filenum]}          </td>             <td> ; Input file</td>      </tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}          </td>             <td> ; Output file</td>     </tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; [rotang]                    </td>             <td> ; Rotation angles</td> </tr>
            <tr><td><a href="man/enddo.html">ENDDO</a>                             </td> </tr>
            </table>
            </p>
            </li>

         
            <li>Values may  be read in from a document file before any operation using the
               <a href="man/udic.html">UD IC</a> operation.</li>

            <p><table class="opl">
            <tr><td><a href="man/do.html">DO</a>  [filenum]=1,3                          </td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/udic.html">UD IC</a> [filenum], [rotang] </td><td> ; Retrieve value</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; DOC001                          </td><td> ; Document file that holds values</td></tr>
            <tr><td class="i">&nbsp; </td></tr>

            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/rt.html">RT</a></td><td> ; Rotate operation</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; PIC{****[filenum]}          </td><td> ; Input file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}          </td><td> ; Output file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; [rotang]                   </td><td> ; Rotation angles</td></tr>
            <tr><td><a href="man/enddo.html">ENDDO</a>                                  </td></tr>
            </table>
            </p>

         </ol>

 


<a name="writing"><h4>Writing Interactive Procedures</h4></a>

        <p>Procedure files can be used in many ways within SPIDER. One such
        use is to create a interactive procedure which prompts the
        user at the terminal for relevant input when necessary.  This input
        can be customized by the procedure writer to correspond to the specific
        purpose of the procedure. To create 
        this sort of interactive procedure file the user:</p>

	    <p><ol>
            <li>Puts a solicitation message enclosed in question marks, 
               e.g., ?PICTURE TO BE ROTATED? in the procedure file 
               in place of the parameter(s) that the user
               wishes to specify at run time.</li>

            <li>Ends the precedure with a 
	       <a href="man/re.html">RE</a> operation to continue
                execution after the end of the procedure.</li>
            </ol></p>

	<p>At  execution  time, the user-specified solicitation
	messages are the only messages that will appear  on the
	terminal.</p>

      <p>Example ---  :</p>

      <p>If the procedure <i>TEST_INTER</i> is called from an
	an interactive session and contains the following: </p>

            <p><table class="opl">
            <tr><td><a href="man/ad.html">AD</a></td></tr>
            <tr><td>PIC001                      </td></tr>
            <tr><td>?PICTURE TO BE ADDED?       </td></tr>
            <tr><td>OUT001                      </td></tr>
            <tr><td>*                           </td></tr>
            <tr><td><a href="man/re.html">RE</a></td></tr>
            </table></p>

        <p>Then SPIDER will print '?PICTURE TO BE ADDED?' at the terminal and
        wait for  the user to specify the file to be added to PIC001.
        It would then add the two pictures and place the result in: OUT001, 
        and will return to interactive input.</p>
	    
        <p>Frequently, one encounters  the situation where more 
        same information is required in the procedure more than once.
        SPIDER allows the user to associate a symbolic variable with any solicitation 
        message (marked  by  a  ?...? ).  
        Later this symbolic variable can be used to instead of repeating the 
        solicitation message.</p>

      <p>Example ---  :</p>

      <p>If the procedure <i>TEST_IVAR</i> which needs to solicit the name 
        of the unaligned image twice from the user  is called from an
	an interactive session and contains the following: </p>

            <p><table class="opl">
            <tr><td>; PROCEDURE TO ALIGN IMAGE WITH REFERENCE</td></tr>
            <tr><td> </td></tr>

            <tr><td><a href="man/pd.html">PD</a></td></tr>
            <tr><td>?UNALIGNED IMAGE? [unaligned]</td><td>; Set symbolic variable</td></tr>
            <tr><td>PAD001</td>  <td> ; Output image</td></tr>
            <tr><td>66,66</td>   <td> ; Output image size</td></tr>
            <tr><td>Y</td>       <td> ; Use average for padding value</td></tr>
            <tr><td>16,16</td>   <td> ; Image location within output</td></tr>

            <tr><td><a href="man/pd.html">PD</a></td></tr>
            <tr><td>?REFERENCE IMAGE?[reference] </td></tr>
            <tr><td>PAD002</td>  <td> ; Output image</td></tr>
            <tr><td>66,66</td>   <td> ; Output image size</td></tr>
            <tr><td>Y</td>       <td> ; Use average for padding value</td></tr>
            <tr><td>16,16</td>   <td> ; Image location within output</td></tr>
            <tr><td> </td></tr>

            <tr><td><a href="man/ac.html">AC</a></td></tr>
            <tr><td>PAD001</td>  <td> ; Input image</td></tr>
            <tr><td>ALI001</td>  <td> ; Output image</td></tr>

            <tr><td><a href="man/ac.html">AC</a></td></tr>
            <tr><td>PAD002</td>  <td> ; Input image</td></tr>
            <tr><td>ALI002</td>  <td> ; Output image</td></tr>
            <tr><td> </td></tr>

            <tr><td><a href="man/or2.html">OR 2</a> [angle]</td></tr>
            <tr><td>ALI001</td> <td> ; Input image</td></tr>
            <tr><td>ALI002</td> <td> ; Reference image</td></tr>
            <tr><td>5,15</td>   <td> ; First and last ring radius</td></tr>
            <tr><td>1</td>      <td> ; Ring skip</td></tr>
            <tr><td>F</td>      <td> ; Full circle</td></tr>
            <tr><td> </td></tr>

            <tr><td><a href="man/rt.html">RT</a></td></tr>
            <tr><td>[unaligned]</td>  <td> : <b>Reuse symbolic variable that was set above</b></td></tr>
            <tr><td>?OUTPUT IMAGE?[output]</td></tr>
            <tr><td>[angle]</td></tr> 
            <tr><td> </td></tr>

            <tr><td><a href="man/re.html">RE</a></td></tr>
            </table></p>

        <p>In the interactive session the user will enter:</p>

            <p><table class="opl">
            <tr><td>.OPERATION: @@TEST_IVAR</td></tr>
            <tr><td>.?UNALIGNED IMAGE?: PIC002</td></tr>
            <tr><td>.?REFERENCE IMAGE?: PIC003</td></tr>
            <tr><td>.?OUTPUT IMAGE?:    OUT009</td></tr>
            </table></p>


        <p>The second potential occurrence of ?UNALIGNED IMAGE? was  
        avoided by reusing the [unaligned] symbolic variable, which was  
        the symbolic variable assigned at the occurance of the ?UNALIGNED IMAGE? prompt.</p>

        <a name="template"></a>

        <p>Symbolic variables that represent a file name template may be modified 
        at run time by appending the value from register variable. The specified  
        digits of the filename are then replaced by new digits 
        according to the current value in the register variable.</p>

        <p>Example --- 1:</p>

        <p>If the procedure <i>TEST_NAME</i> is called from an
	an interactive session and contains the following: </p>

           <p><table class="opl">
            <tr><td> ; Procedure to list file statistics for a file series</td></tr>
            <tr><td><a href="man/fr.html">FR</a></td></tr>
            <tr><td>?ENTER IMAGE FILE TEMPLATE?[file_template]</td></tr>
            <tr><td> </td></tr>

            <tr><td><a href="man/do.html">DO</a> [filenum]=2,5</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/fs.html">FS</a></td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; [file_template][filenum]</td></tr>
            <tr><td><a href="man/enddo.html">ENDDO</a></td></tr>
            <tr><td><a href="man/re.html">RE</a></td></tr>
            </table></p>

        <p>and the user enters the following from an interactive session:</p>

            <p><table class="opl">
            <tr><td>@@TEST_NAME</td></tr>
            <tr><td>PIC***</td></tr>
	    </table></p>

        <p>In the <a href="#loops">DO-loop</a>,  PIC*** will then be replaced 
           by PIC002,PIC003, ...  , PIC010.<dl>

        <p>Example --- 2:</p>

        <p>If the procedure <i>TEST_NAME2</i> is called from an
	an interactive session and contains the following: </p>

            <p><table class="opl">
            <tr><td>; Procedure to list file statistics for a file series</td></tr>
            <tr><td><a href="man/rr.html">RR</a>[filenum]
            <tr><td>?OUTPUT FILE NUMBER?</td></tr>
            <tr><td> </td><tr>

            <tr><td><a href="man/fi.html">FI</a></td></tr>
            <tr><td>PIC{***[filenum]}</td></tr>
            <tr><td><a href="man/re.html">RE</a></td></tr>
	    </table></p>

        <p>and the user enters the following from an interactive session:</p>

            <p><table class="opl">
            <tr><td>@@TEST_NAME2</td></tr>
            <tr><td>5</td></tr>
	    </table></p>

        In this example, the operation <a href="man/fi.html">FI</a> 
        is applied to PIC005.<dl>

        <p>Example --- 3:</p>

        <p>If the procedure <i>TEST_NAME3</i> is called from an
	an interactive session and contains the following: </p>

            <p><table class="opl">
            <tr><td><a href="man/fr.html">FR</a></td></tr>
            <tr><td>?ENTER FILE NAME TEMPLATE? [template]</td></tr>
            <tr><td>  </td></tr>

            <tr><td><a href="man/rr.html">RR</a>[filenum]</td></tr>
            <tr><td>?PICK OUT FILE NUMBER?[filenum]</td></tr>

            <tr><td><a href="man/fs.html">FS</a></td></tr>
            <tr><td>[template][filenum}</td></tr>
            </table></p>

        <p>and the user enters the following from an interactive session:</p>

            <p><table class="opl">
            <tr><td>TEST_NAME3</td></tr>
            <tr><td>PIC***</td></tr>
            <tr><td>3</td></tr>
            </table></p>

        <p>In this example, the operation <a href="man/fs.html">FS</a> 
        is applied to PIC003.</p>


<a name="using_register"><h3>Using Register Variables in Nested Procedures</h3></a>

        <p>Normal register variables are local to a procedure and are independent the
        of register variables  within other procedures.
        Register variables can be  transferred  from a calling
        procedure to a called  procedure, using 
        <a href="#argument">argument transfer</a> or
        by using the operation: <a href="man/rr.html">RR</a>.</p>       

<hr />

<h2><a name="memory">Memory Allocation & Multiprocessors</a></h2>

    <p>Most memory intensive operations make use of run time
    allocation (and deallocation) of necessary memory.</p>

    <p>SPIDER contains Open Multiprocessing directives which can be used by 
    <i>OpenMP</i>  capable Fortran compilers.  The 
    <a href="./man/md.html">MD</a> operation with option: 'SET MP' can be used to 
    control the number of processors used during SPIDER execution on such machines. </p>

    <p>A few operations in SPIDER contain <i>MPI</i> parallelizing directives
    which can be activated by appropriate compilation.  If you are interested
    in using <i>MPI</i> please contact us for further info. 
    </p>

<hr />

<h2><a name="unix">Submitting Batch Jobs on UNIX systems</a></h2>

    <p>Unix systems have queues available for scheduling execution of
    batch jobs and methods of placing a process in the background.  Some
    old notes on this are contained in:  
    <a href="batch-unix_doc.html">batch-unix_doc.html.</a></p>

<hr /> 

<p><small>
  Source:      user_doc.html  &nbsp;&nbsp;&nbsp;  
  Last update: 27 Oct. 2018    &nbsp;&nbsp;&nbsp;
  ArDean Leith  
</small>
</p>

</body>
</html>
@


1.84
log
@spire link fixed
@
text
@d1061 1
a1061 1
            <li>As <a href="./techs/recon/mr.html">standalone processing control.</a></li>
@


1.83
log
@no agl
ls
@
text
@d1062 1
a1062 1
            <li>Under control of <a href="../../spire/index.html">SPIRE</a>.</li>
d1642 1
a1642 1
  Last update: 7 Dec. 2015    &nbsp;&nbsp;&nbsp;
@


1.82
log
@MOD division wron
@
text
@d1641 3
a1643 3
Source:      user_doc.html    &nbsp;&nbsp;&nbsp;  
Last update: 7 Dec. 2015    &nbsp;&nbsp;&nbsp;
<a href="agl.html">ArDean Leith</a>  
@


1.81
log
@mod
@
text
@a914 2
	    <tr><td>[var] = [i]-(INT([i]/3)                                </td> 
                <td> ; For simulating MOD([i],3)                           </td></tr>
d1642 1
a1642 1
Last update: 25 Sept. 2015    &nbsp;&nbsp;&nbsp;
@


1.80
log
@MOD() info
@
text
@d574 1
a574 1
	operations.</p>
d883 15
a897 17
	    <tr><td>PAD(&lt;Expression&gt;)  </td><td> next highest power of two of expression</td></tr>	
            <tr><td>SIN(&lt;Expression&gt;)  </td><td> sine of expression</td></tr>
            <tr><td>COS(&lt;Expression&gt;)  </td><td> cosine of expression</td></tr>
            <tr><td>EXP(&lt;Expression&gt;)  </td><td> exponential of expression</td></tr>
            <tr><td>LOG(&lt;Expression&gt;)  </td><td> logarithm (Base 10) of expression</td></tr>
            <tr><td>LON(&lt;Expression&gt;)  </td><td> natural log of expression</td></tr>
            <tr><td>SQR(&lt;Expression&gt;)  </td><td> square root of expression</td></tr>
            <tr><td>INT(&lt;Expression&gt;)  </td><td> truncates to integer</td></tr>
            <tr><td>ABS(&lt;Expression&gt;)  </td><td> absolute value of expression</td></tr>
            <tr><td>ATA(&lt;Expression&gt;)  </td><td> arc tangent of expression (in degrees)</td></tr>
            <tr><td>ASI(&lt;Expression&gt;)  </td><td> arc sine of expression (in degrees)</td></tr>
            <tr><td>ACO(&lt;Expression&gt;)  </td><td> arc cosine of expression (in degrees)</td></tr>
            <tr><td>TAN(&lt;Expression&gt;)  </td><td> tangent of expression</td></tr>
            <tr><td>RAN(&lt;Any variable&gt;)</td><td> pseudo random uniform number generator in the 
                                                       range from 0 to 1.</td></tr>
            <tr><td>RNN(&lt;Any variable&gt;)</td><td> pseudo random number generator, normal distribution 
                                                       (0,1).</td></tr>
d907 13
a919 12
            <table class="opl")
	    <tr><td>SIN(4.5/([var]-100.))                        </td></tr>
	    <tr><td>[var]=EXP(-400./[var1]**2)                   </td></tr>		
	    <tr><td>[var]=[var1]-SIN(45./180.*[var2])            </td></tr>
	    <tr><td>[var]=SIN(45./180.*[var1])                   </td></tr>
	    <tr><td>[var]=[var1] - COS(LON([var2]))              </td></tr>
	    <tr><td>[var]=IF (INT([i]/2) .EQ. [i]/2 ) [even] = 1 </td>                </td>
                <td> ; For  MOD([i],2)                           </td></tr>
 	    <tr><td>[var]=RAN([dummy])                           </td>
                <td> ; Value of [dummy] is not changed nor is
                     it used for anything!                       </td></tr>
  	    </table></p>
d923 1
a923 2
        <p><i>Symbolic (String) Variables</i> are denoted with '[]' brackets 
        e.g. [filename].
d930 1
a930 2
        Symbolic variables can be nested so as to contain register variables or other
        symbolic variables.
d938 1
a938 1
               operations for this purpose.</small></li>
d1643 2
a1644 2
Source:      user_doc.html  &nbsp;&nbsp;&nbsp;  
Last update: 19 Sept. 2012    &nbsp;&nbsp;&nbsp;
d1646 2
a1647 1
</small></p>
@


1.79
log
@*** empty log message ***
@
text
@d910 8
a917 6
	    <tr><td>SIN(4.5/([var]-100.))             </td></tr>
	    <tr><td>[var]=EXP(-400./[var1]**2)        </td></tr>		
	    <tr><td>[var]=[var1]-SIN(45./180.*[var2]) </td></tr>
	    <tr><td>[var]=SIN(45./180.*[var1])        </td></tr>
	    <tr><td>[var]=[var1] - COS(LON([var2]))  </td></tr>
	    <tr><td>[var]=RAN([dummy])                </td>
d919 1
a919 1
                     it used for anything!</td></tr>
d1647 1
a1647 1
Last update: 27 July 2012    &nbsp;&nbsp;&nbsp;
@


1.78
log
@*** empty log message ***
@
text
@d640 1
a640 1
             <tr><td> <a href="man/var.html">[pi]=3.14159</a> </td></tr>
d651 1
a651 1
        <p>Some operations can output a register variable:</p>
d662 1
a662 1
        <p>A '<a href="man/do.html">DO Loop</a> can set a register variable:</p>
d672 1
a672 1
        <p><a href="man/rr.html">RR</a> can set a register variable:</p>
d1645 1
a1645 1
Last update: 5 Jan. 2012    &nbsp;&nbsp;&nbsp;
@


1.77
log
@nx
@
text
@d1645 1
a1645 1
Last update: 5 Apr. 2011    &nbsp;&nbsp;&nbsp;
@


1.76
log
@spire link broken
@
text
@d315 1
a315 1
               (&lt;T&gt;) &lt;NSAM&gt; &lt;NROW&gt; &lt;NSLICE&gt; 
d355 1
a355 1
           <dt>&lt;NSAM&gt;,&lt;NROW&gt;,&lt;NSLICE&gt; </dt>
@


1.75
log
@rr s
@
text
@d1065 1
a1065 1
            <li>Under control of <a href="../spire/index.html">SPIRE</a>.</li>
d1645 1
a1645 1
Last update: 14 Feb. 2011    &nbsp;&nbsp;&nbsp;
@


1.74
log
@() OFF
@
text
@d1365 3
a1367 2
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/rrs.html">RR S</a> [rotang] </td><td> ; Read values</td></tr>  
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; 45., 61., 78.             </td></tr>
d1369 5
a1373 5
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/rt.html">RT</a></td><td> ; Rotate operation</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; PIC{****[filenum]}          </td><td> ; Input file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}          </td><td> ; Output file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; [rotang]                    </td><td> ; Rotation angles</td></tr>
            <tr><td><a href="man/enddo.html">ENDDO</a>                             </td></tr>
d1645 1
a1645 1
Last update: 20 Dec. 2010    &nbsp;&nbsp;&nbsp;
@


1.73
log
@spire loc.
@
text
@d1333 7
a1339 4
        <p>In order to enter the same numerical parameter(s) the user <strong>must</strong>
        surround the parameter(s) set with "()" parenthesis. However, if the
        parameter(s) contain a register variable or expression the "()"
        can be omitted.  </p>
d1341 1
a1341 1
        <p> Example --- :</p>
d1347 1
a1347 1
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; (45.)                      </td><td> ; Rotation angle</td></tr>
d1351 2
a1352 8
        <p>Here the "()" parenthesis surrounding the rotation angle are
        needed to specify that the same value  (45.) is to be used for each
        iteration of the loop.  
        If you find this traditional SPIDER convention to be a 
        source of errors you can use the <a href="man/md.html">MD</a> operation
        with option: <i>() OFF</i> to do away with this confusing archaic convention
        and skip the ()'s. </p>

d1395 1
a1395 15
            <li>Values may  be entered  as  arrays,  to  be  
                picked  according to the DO-loop count. The array is <b>NOT</b> surrounded by ()'s.
                This method is <b>no longer recommended</b> and may disappear in a future
                SPIDER release.</li>

            <p><table class="opl">
            <tr><td><a href="man/do.html">DO</a>  [filenum]=1,3               </td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/rt.html">RT</a></td><td> ; Rotate operation</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; PIC{****[filenum]}          </td><td> ; Input file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}          </td><td> ; Output file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; 45., 61., 78                </td><td> ; Rotation angles</td></tr>
            <tr><td><a href="man/enddo.html">ENDDO</a>                                  </td></tr>
            </table></p>
            </li>
        </ol>
d1644 1
a1644 1
Last update: 24 Nov. 2010    &nbsp;&nbsp;&nbsp;
@


1.72
log
@*** empty log message ***
@
text
@d93 1
a93 1
<hr>
d1065 1
a1065 1
            <li>Under control of <a href="./spire/index.html">SPIRE</a>.</li>
d1631 1
a1631 2

<hr \>
d1639 2
a1640 3
    <i>OpenMP</i>  parallelizing
    Fortran compilers available on most modern machines.  The 
    <a href="./man/md.html">MD</a> operation with 'SET MP' can be used to 
d1645 1
a1645 1
    in using <i>MPI</i> please contact us  for further info. 
d1648 1
a1648 1
<hr>
d1657 2
a1658 1
<hr> 
d1661 1
a1661 1
Last update: 20 Jul. 2010    &nbsp;&nbsp;&nbsp;
@


1.71
log
@var changes
@
text
@d1662 1
a1662 1
Last update: 10 Jan. 2010    &nbsp;&nbsp;&nbsp;
@


1.70
log
@var link
@
text
@d617 2
a618 5
               arithmetic expression.</li>
           <li>As output resulting from an operation.</li>
           <li>When used as an index in a <a href="#loops">do-loop</a>.</li>
           <li>Using the <a href="man/rr.html">RR</a> operation.</li>
           <li>When received as a <a href="#argument">procedure argument</a>.
d620 12
d1662 1
a1662 1
Last update: 10 Nov. 2009    &nbsp;&nbsp;&nbsp;
@


1.69
log
@'FR L'... changes
@
text
@d257 2
a258 1
	5 digits.  If the register variable value (converted to an integer) to be substituted contains more digits
d598 1
a598 1
        These variables are denoted with '[]' brackets e.g. [pi].  For
d601 1
a601 1
        you switch to this newer convention.  
d631 1
a631 1
             <tr><td>[pi]=3.14159</td></tr>
d685 3
a687 7
        variables could be saved using the <a href="man/sr.html">SR</a>
        operation with the "save" option.  Any subsequent operations on these 
        register variables did not affect this stored variable set. Execution of 
        the <a href="man/sr.html">SR</a> operation 
        with "unsave" option would fetch the stored variable set into the 
        working variables.</small>.  These operations are no longer available
        for use with named registers.</p>     
d1653 1
a1653 1
Last update: 31 Jul. 2009    &nbsp;&nbsp;&nbsp;
@


1.68
log
@Argument Transfer cosmetic
@
text
@d51 1
a51 1
	<li><a href="#register_variables">Register Variables</a>
d64 1
a64 1
	<li><a href="#symbol">Symbols (Symbolic Parameters)</a>
d230 1
a230 1
        <a href="#symbol">symbol</a> or
d235 1
a235 1
        <p>To substitute a symbol value into a file 
d238 1
a238 1
        and the content of symbol: [file_suffix] is the value
d578 1
a578 1
         <a href="#registers">Register Variables</a> are true variables and 
d580 2
a581 4
         <a href="#symbol">Symbols or Symbolic Parameters</a> are strings of
         characters. (Strictly speaking symbols are not really variables since
         their values can not be altered once they are created, that is why
         we refer to them as <i>symbols</i>.) 
d583 4
a586 3
         <b>not</b> simultaneously use the same variable name for both a symbol 
         and a register variable within a single procedure.  Variable 
         and symbol names can contain alphanumeric characters plus
d652 10
d890 4
a893 2
            <tr><td>RAN(&lt;Any variable&gt;)</td><td> pseudo random uniform number generator in the range from 0 to 1.</td></tr>
            <tr><td>RNN(&lt;Any variable&gt;)</td><td> pseudo random number generator, normal distribution (0,1).</td></tr>
d914 1
a914 1
 <a name="symbols"><h3>Symbols</h3></a>
d916 1
a916 1
        <p><i>Symbols</i> or symbolic paraameters are denoted with '[]' brackets 
d918 2
a919 2
        The number of symbols in SPIDER is dependent upon the combined
        length of the symbol names and their associated values and can only
d921 6
a926 4
        Symbols are used for storing and substituting character strings.
        Symbols can be  either <i>global</i> or <i>local to a procedure</i>.
        Symbols are commonly used to store file names.
        A symbol can be created in the following ways:</p>
d929 5
a933 2
           <li>Using: <a href="man/frl.html">FR L</a> operation which creates a
               local symbol accessible within the defining procedure only.</li>
a934 3
           <li>Using: <a href="man/frg.html">FR G</a> operation which creates a
               global symbol henceforth accessible to all procedures.</li>

d936 1
a936 1
               local symbol by reading the value from a calling procedure or the
d939 1
a939 1
           <li>Using: ?PROMPT?[variable] which creates a local symbol by 
d941 3
a943 1
               interactive session..</li>
a945 3
        <p>Symbols can be nested so as to contain register variables or other
          symbols.</p>

d949 1
a949 6
            <tr><td><a href="man/frl.html">FR L</a></td></tr>
            <tr><td>[filename]PIC{***[filenum]}</td></tr>
            <tr><td>[filenum]=2</td><td>; Set a register variable</td> </tr>

            <tr><td><a href="man/fi.html">FI</a></td></tr>
            <tr><td>[filename]</td></tr>
d952 7
a958 1
        Where [filename] will be resolved at run time to: <i>PIC002</i></p>
d961 14
d976 2
d980 2
a981 5
            <tr><td><a href="man/frg.html">FR G</a></td></tr>
            <tr><td>[dir]img</td></tr>

            <tr><td><a href="man/frg.html">FR G</a></td></tr>
            <tr><td>[global_file][dir]/IMG055</td></tr>
d983 2
a984 2
            <tr><td>VM</td></tr>
            <tr><td>echo [global_file]</td></tr>
d986 2
a987 3
            </p>

        <p>At run time will output: <i>img/IMG055</i></p>
d989 1
a989 1
        <p>Other uses of symbols are discussed in the 
d1136 1
a1136 1
<a name="parameter"><h4>Symbolic Parameter Transfer to Procedures</h4></a>
d1138 1
a1138 1
        <p>There are two methods to pass symbolic parameters to a called procedure.</p>
d1142 2
a1143 2
           with  a solicitation prompt and symbol name for the parameters.
           Place the parameters behind the procedure  calling statement in the 
d1146 3
a1148 3
           indicate that the parameters  should be obtained from the caller by placing a 
           solicitation prompt enclosed in question marks followed by a symbol
           name  e.g., ?ROTATION ANGLE?[angle] in place of the parameter that 
d1166 2
a1167 1
             <tr><td>?ROTATION ANGLE?[angle]     </td> <td>; Solicit rotation angle and assign to symbolr: [angle]</td></tr>
d1177 1
a1177 1
           called procedure to create a local symbol by reading its 
d1183 1
a1183 1
             <tr><td>@@TEST_VAR2                     </td> <td> ; Procedure</td></tr>
d1193 2
a1194 1
             <tr><td>?ROTATION ANGLE?[angle]     </td> <td>; Solicit rotation angle and assign to symbolr: [angle]</td></tr>
d1199 2
a1200 1
             <tr><td>[angle]                     </td> <td>; Solicit rotation angle and assign to symbolr: [angle]</td></tr>
d1228 1
a1228 1
               <dd>is a <a href="#register">register variable</a> 
d1231 2
a1232 3
               <dd>are integers or variables 
               defining beginning, the end of the DO-loop, and the loop 
               counting increment. 
d1456 1
a1456 1
        SPIDER allows the user to associate a symbol with any solicitation 
d1458 1
a1458 1
        Later this symbol can be used to instead of repeating the 
d1472 1
a1472 1
            <tr><td>?UNALIGNED IMAGE? [unaligned]</td><td>; Set symbol</td></tr>
d1504 1
a1504 1
            <tr><td>[unaligned]</td>  <td> : <b>Reuse symbol that was set above</b></td></tr>
d1523 2
a1524 2
        avoided by reusing the [unaligned] symbol, which was  
        the symbol assigned at the occurance of the ?UNALIGNED IMAGE? prompt.</p>
d1528 1
a1528 1
        <p>Symbols that represent a file name template may be modified 
d1656 1
a1656 1
Last update: 31 Mar. 2009    &nbsp;&nbsp;&nbsp;
@


1.67
log
@set vars
@
text
@d1053 1
a1053 1
<a name="argument"><h4>Argument Transfer</h4></a>
d1055 1
a1055 1
        <p>To pass initial arguments from the procdure caller to the
d1058 2
a1059 1
        procedure name the same order  as  they  appear  in  the
d1068 1
a1068 1
            <tr><td>([&lt;N1&gt;],[&lt;N2&gt;],[&lt;N3&gt;],...)</td></tr>
d1073 1
a1073 1
        <b> NOTE: Prior to 2004 '[]' brackets were used instead of '()'.</b> 
d1078 1
a1078 1
            <tr><td>@@&lt;PROCNAME&gt;([&lt;M1&gt;],[&lt;M2&gt;],[&lt;M3&gt;],...).
d1111 1
a1111 1
<a name="parameter"><h4>Parameter Transfer to Procedures</h4></a>
d1113 1
a1113 1
        <p>There are two methods to pass parameters to a called procedure.</p>
d1629 1
a1629 1
Last update: 3 Nov. 2008    &nbsp;&nbsp;&nbsp;
@


1.66
log
@"cosmetic about loops and ()"
@
text
@d603 1
a603 1
        <a href="man/md.html">MD</a> operation with option "SET REGS". 
d1628 1
a1628 1
Last update: 2 June 2008    &nbsp;&nbsp;&nbsp;
@


1.65
log
@reverted to () LEgacy
@
text
@d174 1
a174 1
                 determined by incrementing current version number</dd>
d1188 1
a1188 1
                  &lt;L&gt;&nbsp;&nbsp; &lt;C&gt;=&lt;M&gt;,&lt;N&gt;,&lt;O&gt;
d1193 1
a1193 1
           <p><blockquote><a href="man/enddo.html">ENDDO</a>&lt;L&gt;</blockquote></p>
d1207 1
a1207 1
               ... &lt;N&gt;.  (We advise angainst using  non-integers for
d1218 2
a1219 1
     <p> <small>Prior to SPIDER release 15.0 there was an earlier syntax for
d1221 3
a1223 3
        Loops were initiated:

           <p><blockquote>
d1226 1
a1226 1
           </blockquote></p>
d1228 2
a1229 3
      <p>and terminated with:</p>

           <p><blockquote><a href="man/lb.html">LB</a>&lt;L&gt;</blockquote></p>
d1231 6
a1236 8
      <p>Where:</p>
           <p><blockquote><dl>
           <dt>&lt;L&gt;</dt>
               <dd>is a one or two digit integer used for distinguishing 
               the terminating label for this DO-loop.    </dd>
           <dt>&lt;C&gt;</dt>
          </dl></blockquote></p>
      </small>
d1628 1
a1628 1
Last update: 23 May. 2008    &nbsp;&nbsp;&nbsp;
@


1.64
log
@updates
@
text
@d77 1
a77 2
            <li><a href="#using_register">
                       Using Register Variables in Nested Procedures</a></li>
d82 1
a82 2
            <li><a href="#loops_variables">Variable Parameter Input 
                   Inside DO-Loops</a></li>
d271 2
a272 2
        with  .&lt;Dat&gt;, where &lt;Dat&gt; is the data extension specified 
        at the beginning of the session.</p>
d303 1
a303 2
        <a href="man/ip.html">InterPolate</a>, 
        <a href="man/wi.html">WIndow</a>).</p>
d538 1
a538 2
        with option: <i>Verbose Off</i> can be used to decrease the amount 
        of output
d600 2
a601 2
        notations (e.g. X11) present in older releases of SPIDER, but we 
        recommend that  you switch to this newer convention.  
d680 2
a681 2
        working variables..  These operations are no longer available
        for use with named registers.</small></p>     
d1231 7
a1237 3
      <p>Where: &lt;L&gt; was a one or two digit integer used for distinguishing 
               the terminating label for the DO-loop.    
      </p>
d1294 1
d1301 1
a1301 4
        <small>
        <p>In SPIDER releases prior to <i>Release: 16.*</i> in order to specify 
        that the same set of values  e.g. (45.) were to be used for each
        iteration of the loop, the user <strong>had</strong> to
d1303 20
a1322 10
        parameter(s) contained a register variable or expression the "()"
        could be be omitted.  This formalism was the number one source of errors
        in SPIDER programming and has been <B>discontinued</b> in this release.
        In the unlikely event that  you have old procedures where: 
        <i>1.0, 2.5</i> was used to input
        the value <i>1.0</i> on the first loop iteration and <i>2.5</i> on the
        second iteration and wish to preserve this formalism without rewriteing
        the procedure, then use: the <a href="man/md.html">MD</a> 
        operation with option <i>() OFF</i> to regain the old convention.<p> 
        </small>
d1347 2
a1348 1
       
d1609 1
a1609 1
    Fortran compilers available on most most modern computers.  The 
d1630 1
a1630 1
Last update: 23 May 2008    &nbsp;&nbsp;&nbsp;
@


1.63
log
@ENDDO # removed 5 places
@
text
@d77 2
a78 1
            <li><a href="#using_register">Using Register Variables in Nested Procedures</a></li>
d83 2
a84 1
            <li><a href="#loops_variables">Variable Parameter Input Inside DO-Loops</a></li>
d273 2
a274 2
        with  .&lt;Dat&gt;,  where  &lt;Dat&gt;  is the data extension specified at the
        beginning of the session.</p>
d305 2
a306 1
        <a href="man/ip.html">InterPolate</a>, <a href="man/wi.html">WIndow</a>).</p>
d541 2
a542 1
        with option: <i>Verbose Off</i> can be used to decrease the amount of output
d604 2
a605 2
        notations (e.g. X11) present in older releases of SPIDER, but we recommend that
        you switch to this newer convention.  
d684 2
a685 2
        working variables.</small>.  These operations are no longer available
        for use with named registers.</p>     
d1235 3
a1237 7
      <p>Where:</p>
           <p><blockquote><dl>
           <dt>&lt;L&gt;</dt>
               <dd>is a one or two digit integer used for distinguishing 
               the terminating label for this DO-loop.    </dd>
           <dt>&lt;C&gt;</dt>
          </dl></blockquote></p>
a1293 1

d1300 4
a1303 1
        <p>In order to enter the same numerical parameter(s) the user <strong>must</strong>
d1305 10
a1314 20
        parameter(s) contain a register variable or expression the "()"
        can be omitted.  </p>

        <p> Example --- :</p>
            <p><table class="opl">
            <tr><td><a href="man/do.html">DO</a> [filenum]=1,4</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/rt.html">RT</a></td><td> ; Rotate operation</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; PIC{***[filenum]}          </td><td> ; Input file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}         </td><td> ; Output file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; (45.)                      </td><td> ; Rotation angle</td></tr>
            <tr><td><a href="man/enddo.html">ENDDO</a>                            </td></tr>
	    </table></p>
        
        <p>Here the "()" parenthesis surrounding the rotation angle are
        needed to specify that the same value  (45.) is to be used for each
        iteration of the loop.  
        If you find this traditional SPIDER convention to be a 
        source of errors you can use the <a href="man/md.html">MD</a> operation
        with option: <i>() OFF</i> to do away with this confusing archaic convention
        and skip the ()'s. </p>
d1339 1
a1339 2

         
d1600 1
a1600 1
    Fortran compilers available on most SGI, DEC, and Linux  multiprocessor machines.  The 
d1621 1
a1621 1
Last update: 20 Mar. 2008    &nbsp;&nbsp;&nbsp;
@


1.62
log
@?
@
text
@d669 1
a669 1
        after each execution of the <a href="man/enddo.html">ENDDO</a># or
d1166 1
a1166 1
             <tr><td>?ROTATION ANGLE?[angle}     </td> <td>; Solicit rotation angle and assign to symbolr: [angle]</td></tr>
d1290 1
a1290 1
            <tr><td><a href="man/enddo.html">ENDDO</a>1                                  </td></tr>
d1311 3
a1313 3
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}          </td><td> ; Output file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; (45.)                       </td><td> ; Rotation angle</td></tr>
            <tr><td><a href="man/enddo.html">ENDDO</a>1                                  </td></tr>
d1342 2
a1343 2
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; [rotang]                   </td><td> ; Rotation angles</td></tr>
            <tr><td><a href="man/enddo.html">ENDDO</a>1                                  </td></tr>
d1362 1
a1362 1
            <tr><td><a href="man/enddo.html">ENDDO</a>1                                  </td></tr>
d1377 1
a1377 1
            <tr><td><a href="man/enddo.html">ENDDO</a>1                                  </td></tr>
d1521 1
a1521 1
            <tr><td><a href="man/enddo.html">ENDDO</a>5</td></tr>
d1630 1
a1630 1
Last update: 30 May. 2007    &nbsp;&nbsp;&nbsp;
@


1.61
log
@ "x filename notes"
@
text
@d796 3
a798 3
        <a href="man/if_goto.html">IF...GOTO</a>, and 
        <a href="man/if_then.html">IF THEN</a>.</p> 
        <a href="man/elseif_then.html">ELSEIF THEN</a>.</p> 
d839 3
a841 3
                   <p><dl> 
                   <dd>*** ERROR: INVALID ARITHMETIC EXPRESSION</dd>
		   </dl></p>
d1613 1
a1613 1
    <p>A few operation in SPIDER contain <i>MPI</i> parallelizing directives
d1630 1
a1630 1
Last update: 26 Jan. 2007    &nbsp;&nbsp;&nbsp;
@


1.60
log
@enddo, elseif, etc
@
text
@d179 1
a179 1
                 inital procedure. The varaible names do NOT have
d217 2
a218 2
        normally  (but not  necessarily) of the form &lt;XYZ&gt;&lt;###&gt; 
        where &lt;XYZ&gt;  is any sequence of three or more
d220 1
a220 1
        number.  If this convention is followed, files can be accessed
d224 3
a226 1
        <i>../usr/myself/A12BCDE001</i> is an acceptable filename.</p>
d237 1
a237 1
        filename.  E.g. if the the file name entered is: XYZ[file_suffix],
d239 1
a239 1
        <i>_rotated</i>, then the resulting file name is: XYZ_rotated.</p>
d246 1
a246 1
        XYZ6{***[filenum]} and the run time content of register variable [filenum] 
d248 1
a248 1
        <i>34</i>, then the resulting filename is: XYZ6034.
d264 1
a264 1
        template: dir/XYZ****.   The user is also
d313 1
a313 1
           <p>&lt;XYZ###&gt; /&lt;Title&gt;<br>
d323 1
a323 1
           <dt>&lt;XYZ###&gt;</dt>
d428 1
a428 1
     as:  &lt;XYZ&gt;@@&lt;###&gt; where &lt;XYZ&gt; is a
d1259 1
a1259 1
          &lt;XYZ&gt;{&lt;****&gt;&lt;C&gt;} &nbsp;&nbsp; E.g.:  IMG{****[filenum]} <br />
d1263 1
a1263 1
            &lt;XYZ&gt;&lt;****&gt;&lt;C&gt; &nbsp;&nbsp;&nbsp; E.g.:  IMG****[filenum]
d1274 1
a1274 1
            <dt>&lt;XYZ&gt;</dt>
d1630 1
a1630 1
Last update: 7 Nov. 2006    &nbsp;&nbsp;&nbsp;
@


1.59
log
@do loop increment
@
text
@d667 2
a668 1
        after each execution of the <a href="man/lb.html">LB</a># statement). 
d796 1
d895 1
a895 1
	    <tr><td>[var]= [var1] - COS(LON([var2]))  </td></tr>
d1185 1
a1185 1
              <a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>
d1191 1
a1191 1
           <p><blockquote><a href="man/lb.html">LB</a>&lt;L&gt;</blockquote></p>
a1195 4
           <dt>&lt;L&gt;</dt>
               <dd>is a one or two digit integer used for distinguishing 
               the terminating label and the associated 
               DO-loops.</dd>
d1211 26
a1236 1
        different labels and different index variables.</p> 
d1283 1
a1283 2
            <tr><td><a href="man/do.html">DO</a>         
                    <a href="man/lb.html">LB</a>1 [filenum]=1,4</td></tr>
d1288 1
a1288 1
            <tr><td><a href="man/lb.html">LB</a>1                                  </td></tr>
d1306 1
a1306 2
            <tr><td><a href="man/do.html">DO</a>         
                    <a href="man/lb.html">LB</a>2 [filenum]=1,4</td></tr>
d1311 1
a1311 1
            <tr><td><a href="man/lb.html">LB</a>2                                  </td></tr>
d1333 1
a1333 2
            <tr><td><a href="man/do.html">DO</a>         
                      <a href="man/lb.html">LB</a>3 [filenum]=1,3                  </td></tr>
d1341 1
a1341 1
            <tr><td><a href="man/lb.html">LB</a>3                                  </td></tr>
d1351 1
a1351 2
            <tr><td><a href="man/do.html">DO</a> 
                   <a href="man/lb.html">LB</a>4 [filenum]=1,3                          </td></tr>
d1360 1
a1360 1
            <tr><td><a href="man/lb.html">LB</a>4</td></tr>
d1370 1
a1370 2
            <tr><td><a href="man/do.html">DO</a>         
                      <a href="man/lb.html">LB</a>5 [filenum]=1,3                  </td></tr>
d1375 1
a1375 1
            <tr><td><a href="man/lb.html">LB</a>5                                  </td></tr>
d1516 1
a1516 1
            <tr><td><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>5 [filenum]=2,5</td></tr>
d1519 1
a1519 1
            <tr><td><a href="man/lb.html">LB</a>5</td></tr>
d1628 1
a1628 1
Last update: 3 Nov. 2006    &nbsp;&nbsp;&nbsp;
a1629 1
ArDean Leith  
@


1.58
log
@improved
@
text
@d64 1
a64 1
	<li><a href="#symbol">Symbols</a>
d578 1
a578 1
         <a href="#symbols">Symbols or Symbolic Parameters</a> are strings of
d1184 1
a1184 1
                  &lt;L&gt;&nbsp;&nbsp; &lt;C&gt;=&lt;M&gt;,&lt;N&gt;
d1201 4
a1204 3
           <dt>&lt;M&gt;,&lt;N&gt; 
               <dd>are positive-valued integers or variables 
               defining beginning and end of the DO-loop. 
d1206 4
a1209 3
               the values &lt;M&gt;, &lt;M&gt;+1, &lt;M&gt;+2, ... &lt;N&gt;.
               Note that &lt;N&gt; must be greater than &lt;M&gt;.  
               &lt;M&gt; and &lt;N&gt; must be &lt; 100,000.</dd>
d1610 1
a1610 1
Last update: 7 Oct. 2006    &nbsp;&nbsp;&nbsp;
@


1.57
log
@register name comment added
@
text
@a66 5
	<li><a href="#loops">DO-Loops</a></li>
            <ul>
            <li><a href="#loops_filenames">Variable Filenames in DO-Loops</a></li>
            <li><a href="#loops_variables">Variable Parameter Input Inside DO-Loops</a></li>
            </ul>
a76 1
            <li><a href="#using">Using Variables in Procedures</a></li>
d78 6
a83 1
           </ul>
d105 1
a105 1
   <a href="man/en.html">EN</a> (ENd) operation.</p>
d616 1
a616 1
          <li>As output resulting from an operation.</li>
a658 1

a988 185

 <a name="loops"><h3>DO-Loops</h3></a>

       <p>DO-Loops are control loops similar to those in FORTRAN.  
          They are initiated with the statement:</p>

           <p><blockquote>
              <a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>
                  &lt;L&gt;&nbsp;&nbsp; &lt;C&gt;=&lt;M&gt;,&lt;N&gt;
           </blockquote></p>

      <p>and terminated with:</p>

           <p><blockquote><a href="man/lb.html">LB</a>&lt;L&gt;</blockquote></p>

      <p>Where:</p>

           <p><blockquote><dl>
           <dt>&lt;L&gt;</dt>
               <dd>is a one or two digit integer used for distinguishing 
               the terminating label and the associated 
               DO-loops.</dd>
           <dt>&lt;C&gt;</dt>
               <dd>is a <a href="#register">register variable</a> 
               for the DO-loop index.</dd>
           <dt>&lt;M&gt;,&lt;N&gt; 
               <dd>are positive-valued integers or variables 
               defining beginning and end of the DO-loop. 
               Successively, the index &lt;C&gt; will be assigned 
               the values &lt;M&gt;, &lt;M&gt;+1, &lt;M&gt;+2, ... &lt;N&gt;.
               Note that &lt;N&gt; must be greater than &lt;M&gt;.  
               &lt;M&gt; and &lt;N&gt; must be &lt; 100,000.</dd>
           </dl></blockquote></p>

     <p>DO-loops may be nested, but they must be distinguished by
        different labels and different index variables.</p> 

        <p>There are two basically different uses of DO-loops in an image  
        processing application:</p>

            <p><ol>
            <li> Applying the same sequence of  operations  with  the
                 same parameter values to different images,
                 distinguished by numbered file names.</li>

            <li> Applying  the  same  sequence  of  operations   with
                 different parameter values to the same image. </li>
            </ol></p>

   
<a name="loops_filenames"><h4>Variable Filenames in DO-Loops</h4></a>

     <p>There are two conventions for entering file names containing a 
        variable numerical value:

            <blockquote>
            &lt;XYZ&gt;{&lt;****&gt;&lt;C&gt;}    
                  &nbsp;&nbsp;&nbsp;&nbsp; or  &nbsp;&nbsp;&nbsp;&nbsp;
            &lt;XYZ&gt;&lt;****&gt;&lt;C&gt;
            </blockquote><p>

        <p>Where:</p>
            <blockquote>
            <p><dl>   
            <dt>&lt;XYZ&gt;</dt>
                <dd>is a alphanumerical file prefix</dd>
            <dt>&lt;***&gt;</dt>
                <dd>denotes the number of digits to be substituted</dd>
            <dt>&lt;C&gt; </dt>
               <dd>is the DO-loop count variable defined above.</dd> 
             </dl></p></blockquote>

        <p>The first convention is suitable for use in self-contained procedures.</p>

            <p>Example --- :</p>

            <p><table class="opl">
            <tr><td><a href="man/do.html">DO</a>         
                    <a href="man/lb.html">LB</a>1 [filenum]=1,4</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/mr.html">MR</a></td><td> ; Mirror operation</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; PIC{***[filenum]}          </td><td> ; Input file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}          </td><td> ; Output file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; Y                           </td><td> ; Mirror axis</td></tr>
            <tr><td><a href="man/lb.html">LB</a>1                                  </td></tr>
	    </table></p>
        
        <p>The second convention is more convenient when using 
            <a href="#template">variable filenames in interactive procedures</a>.</p>

   <a name="loops_variables"><h4>Variable Parameter Input Inside DO-Loops</h4></a>

        <p>Inside a DO-Loop, the user may either wish to enter the same
        parameter (or set of parameters) on each iteration of the loop
        or alternatively change the parametes with each iteration.
        In order to enter the same numerical parameter(s) the user <strong>must</strong>
        surround the parameter(s) set with "()" parenthesis. However, if the
        parameter(s) contain a register variable or expression the "()"
        can be omitted.</p>

        <p> Example --- :</p>
            <p><table class="opl">
            <tr><td><a href="man/do.html">DO</a>         
                    <a href="man/lb.html">LB</a>2 [filenum]=1,4</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/rt.html">RT</a></td><td> ; Rotate operation</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; PIC{***[filenum]}          </td><td> ; Input file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}          </td><td> ; Output file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; (45.)                       </td><td> ; Rotation angle</td></tr>
            <tr><td><a href="man/lb.html">LB</a>2                                  </td></tr>
	    </table></p>
        
        <p>Here the "()" parenthesis surrounding the rotation angle are
        needed to specify that the same value  (45.) is to be used for each
        iteration of the loop</p>

        <p>There are three methods to change the parameter values used on 
           different iterations of the loop:</p>

        <p><ol>
           <li>Values may  be entered  as  arrays,  to  be  
               picked  according to the DO-loop count.</li>

           <li>Values may  be entered before any operation by using the
               <a href="man/rr.html">RR</a> operation.</li>

           <li>Values may  be read from a document file by using the
               <a href="man/udic.html">UD IC</a> operation.</li>
        </ol></p>

        <p> Example --- 1 :</p>

            <p><table class="opl">
            <tr><td><a href="man/do.html">DO</a>         
                      <a href="man/lb.html">LB</a>3 [filenum]=1,3                  </td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/rt.html">RT</a></td><td> ; Rotate operation</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; PIC{***[filenum]}           </td><td> ; Input file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}           </td><td> ; Output file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; 45., 61., 78                </td><td> ; Rotation angles</td></tr>
            <tr><td><a href="man/lb.html">LB</a>3                                  </td></tr>
            </table></p>

        <p>In this example, <a href="man/rt.html">RT</a> 
        uses the angles 45, 61 and 78 degrees
        with the pictures PIC001, PIC002, and PIC003, respectively.</p>

        <p>Example --- 2 :</p>

            <p><table class="opl">
            <tr><td><a href="man/do.html">DO</a> 
                    <a href="man/lb.html">LB</a>4 [filenum]=1,5                             </td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/rr.html">RR</a> [var11] </td><td> ; Read values</td></tr>  
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; 3.3, 1.5, 6.0, -8.1, 0.0             </td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/rr.html">RR</a> [var12] </td><td> ; Read values</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; -7.5, 5.1, 3.2, -0.4, 8.1            </td></tr>
            <tr><td class="i">&nbsp; </td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/shf.html">SH F</a>      </td><td> ; Shift operation</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; PIC{***[filenum]}                    </td><td> ; Input file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}                    </td><td> ; Output file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; [var11],[var12]                      </td><td> ; Use values read above</td></tr> 
            <tr><td><a href="man/lb.html">LB</a>4                                           </td></tr>
            </table></p>
 
        <p>In this example, <a href="man/shf.html">SH F</a> 
           uses the shifts:  3.3 and -7.5 for PIC001, 1.5 and 5.1  for PIC002,.......</p>

        <p>Example --- 3 :</p>

            <p><table class="opl">
            <tr><td><a href="man/do.html">DO</a> 
                   <a href="man/lb.html">LB</a>5 [filenum]=1,5                          </td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/udic.html">UD IC</a> [filenum], [var11],[var12] </td><td> ; Retrieve values</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; DOC001                          </td><td> ; Document file that holds values</td></tr>
            <tr><td class="i">&nbsp; </td></tr>

            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; <a href="man/shf.html">SH F</a> </td><td> ; Shift operation</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; PIC{***[filenum]}               </td><td> ; Input file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; OUT{****[filenum]}               </td><td> ; Output file</td></tr>
            <tr><td class="i">&nbsp;&nbsp;&nbsp;&nbsp; [var11],[var12]</td></tr>
            <tr><td><a href="man/lb.html">LB</a>5</td></tr>
            </table></p>
 
        <p>In this example, <a href="man/shf.html">SH F</a> 
           uses the shifts read from registers: 1 and 2 from docfile: <i>DOC001</i> under the key 
           for the iteration number.</p>

 
d1110 2
a1111 2
	<p><ol>
           <li><p>Replace the desired parameters inside the called procedure
d1113 30
a1142 2
           Place the parameters in the calling procedure following the
           procedure call in the same order as solicited.</li></p>
d1144 2
a1145 1
           <li><p>Use the <a href="man/fr.html">FR</a> operation inside the
d1147 12
a1158 2
           value from a calling procedure.</p> </li>
	</ol></p>
d1160 3
a1162 1
      <p>Example --- 1  :</p>
d1164 5
a1168 17
       <p>To pass parameters to a called procedure, place the  
       parameters behind the procedure  calling statement in the exact same order  as  they  appear  in  the 
       called procedure. Then inside the called procedures
       indicate that the parameters  should be obtained from the caller by placing a 
       solicitation prompt enclosed in question marks followied by a symbol
       name  e.g., ?rotation angle?[angle] in place of the parameter that 
       the user wishes to read.</p>

      <p>Example --- 1  :</p>

      <p>If the procedure <i>TEST_MASTER</i> contains the following:</p>

        <p><table class="opl">
           <tr><td>@@TEST_VAR                     </td> <td> ; Procedure</td></tr>
           <tr><td>PIC002                        </td> <td> ; 1'st solicited parameter (input filename)</td></tr>
           <tr><td>30                            </td> <td> ; 2'nd solicited parameter (angle)</td></tr>
           <tr><td><a href="man/en.html">EN</a>  </td></tr></p>
d1171 134
a1304 1
      <p>and procedure: <i>TEST_VAR</i> contains the following:</p>
d1306 2
a1307 7
        <p><table class="opl">
           <tr><td><a href="man/rt.html">RT</a></td> <td>; Rotate images operation</td></tr>
           <tr><td>?INPUT FILE?                </td> <td>; Solicit input  filename</td></tr>
           <tr><td>OUT007                      </td> <td>; Output filename</td></tr>
           <tr><td>?ROTATION ANGLE?[angle]     </td> <td>; Solicit rotation angle and assign to symbolr: [angle]</td></tr>
          <tr><td><a href="man/re.html">RE</a></td></tr>
           </table></p>
d1309 14
a1322 2
	<p>Then '.OPERATION: @@TEST_MASTER will read the image PIC002, rotate it by
           30 degrees and store it in: OUT007.</p>
d1324 3
a1326 1
      <p>Example --- 2  :</p>
d1328 6
a1333 1
      <p>If the procedure <i>TEST_MASTER2</i> contains the following:</p>
d1335 7
a1341 6
        <p><table class="opl">
           <tr><td>@@TEST_VAR2                     </td> <td> ; Procedure</td></tr>
           <tr><td>PIC002                        </td> <td> ; 1'st solicited parameter (input filename)</td></tr>
           <tr><td>30                            </td> <td> ; 2'nd solicited parameter (angle)</td></tr>
           <tr><td><a href="man/en.html">EN</a>  </td></tr></p>
           </table></p>
d1343 4
a1346 1
      <p>and procedure: <i>TEST_VAR2</i> contains the following:</p>
d1348 11
a1358 11
        <p><table class="opl">
             
           <tr><td><a href="man/fr.html">FR</a></td></tr></p>
           <tr><td>?ROTATION ANGLE?[angle}     </td> <td>; Solicit rotation angle and assign to symbolr: [angle]</td></tr>

           <tr><td><a href="man/rt.html">RT</a></td> <td>; Rotate images operation</td></tr>
           <tr><td>?INPUT FILE?                </td> <td>; Solicit input  filename</td></tr>
           <tr><td>OUT007                      </td> <td>; Output filename</td></tr>
           <tr><td>[angle]                     </td> <td>; Solicit rotation angle and assign to symbolr: [angle]</td></tr>
          <tr><td><a href="man/re.html">RE</a></td></tr>
           </table></p>
d1360 1
a1360 2
	<p>Again '.OPERATION: @@TEST_MASTER2 will read the image PIC002, rotate it by
           30 degrees and store it in: OUT007.</p>
d1587 2
a1588 2
    Fortran compilers available on most SGI, DEC, Linux, and NT multiprocessor machines.  The 
    <a href="./man/md.html">MD</a>  operation with 'SET MP' can be used to 
d1591 1
a1591 1
    <p>Some operation in SPIDER contain <i>MPI</i> parallelizing directives
d1593 1
a1593 1
    in using <i>MPI</i> please contact use for further info. 
d1608 1
a1608 1
Last update: 8 Mar. 2006    &nbsp;&nbsp;&nbsp;
@


1.56
log
@[] on command line start
@
text
@d533 1
a533 1
        protocol  of  the  operation sequence executed, as well as lists
d538 1
a538 1
        from DO-loops, file opening,  and from the 'SD' and 'UD IC' operations.
d585 6
a590 1
         and a register variable within a single procedure.</p>
d617 1
a617 3

           <li>As output resulting from an operation.</li>

a618 1

a619 1

d1616 2
a1617 1
Last update: 16 Feb. 2006    &nbsp;&nbsp;&nbsp;
@


1.55
log
@[] registers
@
text
@d154 1
a154 1
        directory,  different project extensions should be used.</p>
d171 1
d173 2
a174 2
            <dd> Result file version number version number to be 
                 used by SPIDER run.  This will superceed the value
d176 1
d180 2
a181 1
                 inital procedure. </dd>
d187 1
a187 1
            <dd><i> spider prj/dat @@procname 17 [loop]=3 [size]=4</i></dd>
d1596 5
a1600 1
    control the number of processors used during SPIDER execution on such machines. 
d1615 1
a1615 1
Last update: 18 Dec. 2005    &nbsp;&nbsp;&nbsp;
@


1.54
log
@*** empty log message ***
@
text
@d3 2
a4 3

<title>SPIDER: WORKING WITH SPIDER - A USER'S GUIDE</title>

d8 2
d12 10
a21 10
<p>
This Guide covers issues relating to the syntax, conventions,
and running of SPIDER.  It also has a section that discusses 
<li><a href="#procedures">procedures</a> 
and how to write them. <a href="errors.html">Error
handling</a>, specialized <a href="documents.html">techniques and tools</a>,
details on <a href="formats.html">file formats</a>, and 
<a href="installation.html">distribution and installation</a>, and
<a href="release.html">release notes</a>,
are discussed elsewhere.</p>
d23 1
a23 2
<p>
This guide is organized under the following headings:
d50 2
a51 1
	<li><a href="#registers">Registers</a>
d53 3
a55 4
            <li><a href="#registers_special">Special System Registers</a></li>
            <li><a href="#registers_input">Registers [or Arithmetic Expressions] as Input Parameters</a></li>
            <li><a href="#registers_output">Registers as Output Parameters</a></li>
            <li><a href="#registers_saving">Saving and Unsaving Registers</a></li>
d64 2
d69 2
a70 1
            <li><a href="#loops_variable">Variable Value Input in DO-Loops</a></li>
d77 1
d79 2
a80 1
	<li><a href="#new">Writing New Procedures</a></li>
d82 4
a85 8
            <li><a href="#symbolic">Symbolic Parameters</a></li>
            <li><a href="#symbolic_var">Variable Symbolic Parameters</a></li>
            <li><a href="#symbolic_loops">Symbolic Parameters in DO-Loops</a></li>
            </ul>
	<li><a href="#proc_registers">Using Registers in Nested Procedures</a></li>
            	(or Procedures called from Procedure Files)
	<li><a href="#argument">Argument Transfer</a></li>
	<li><a href="#proc_loops">Procedure calls in DO-Loops</a></li>
d88 1
d91 1
a91 1
<li><a href="#unix">Submitting Batch Jobs on UNIX systems</a> </li>
d96 5
a100 5
<p> SPIDER can be run either interactively or in a procedure mode.
Interactive mode means that user input on the terminal is solicited by
messages appearing on  the  screen.  In the procedure mode, control
input is taken from a procedure control file where it has to appear in
exactly the same sequence as in an interactive session.
d104 3
a106 3
 We call a session the entire sequence of operations  from
the  start  of  SPIDER  to  the  execution  of  the 
<a href="man/en.html">EN</a> (ENd) operation.
d109 12
a120 24
    	Log on in your directory, then start SPIDER by typing:
            <dl><dt>
            <dd> spider
            <dd> &nbsp;&nbsp;&nbsp;or
            <dd> spider &lt;Prj&gt;/&lt;Dat&gt;
            </dl>
            <br><p>

	SPIDER will then print some introductory information including:
             <dl><dt>
             <dd>The version number and issue date for this version.
             </dl>

	If the PROJECT/DATA EXTENSION is not given on the command line,
	SPIDER will then respond with:
             <dl><dt>
	     <dd>.ENTER PROJECT/DATA EXTENSION:
	     &lt;Prj&gt;/&lt;Dat&gt; 
             </dl> 

	The  project  extension &lt;Prj&gt;  consists  of  a  three
	letter sequence, e.g,  'GLS', is used to identify procedure
	files, the LOG  file, and the  RESULTS  file  by attaching this
	sequence to the file names as an extension.<p>
d122 13
a134 1
             The data extension &lt;Dat&gt; is optional.  It consists of a  three
d137 1
a137 1
        extension.<p>    
d139 1
a139 1
             For example, an image file specified as <i>'ACF001'</i>  during
d141 1
a141 1
        if the above data extension <i>'SCI'</i> is used.<p>   
d143 1
a143 1
             A file created as an output file of  a  SPIDER  operation
d146 1
a146 5
        extension as data extension.<p>                     

             The set of files having the same data  extension  can  be
        thought  of  as  a library.  Within one session of SPIDER, all
        image files accessed and created belong to the same library.<p>  
d148 1
a148 1
             [Note, however, that the new extension operation 
d151 1
a151 1
        extension/data extension.]<p>       
d153 2
a154 2
             If more than one SPIDER session is being run in the same
        directory,  different project extensions should be used.<p>              
d156 2
a157 2
             Each input line typed by the user is echoed by SPIDER  on
        the subsequent line so that typing errors become apparent.<p>   
d159 2
a160 2
             Each line produced by SPIDER that requires input is
        preceded by a period, e.g., '.INPUT FILE:'.<p>
d163 5
a167 3
            SPIDER can accept optional command line parameters
         in addition to the PROJECT/DATA EXTENSION.  
            <dl>
d170 1
a170 1
                 The @@ sign is necessary now.</dd>
d173 1
a173 1
                 used by SPIDER run.  This will superceed value
d175 2
a176 2
            <dt> Register assignments.</dt>
            <dd> Inital register assignments when starting SPIDER.
d178 2
a179 2
                 inital proceedure. </dd>
            </dl>
d181 1
a181 1
            <dl>
d184 2
a185 3
            
            <dd><i> spider prj/dat @@procname 17 x11=3 x12=4</i></dd>
            </dl>  
d188 7
a194 5
	The  system  now  asks:
            <dl><dt>
            <dd>.OPERATION:
            </dl>
	All   available operations are specified  by two or more
d196 1
a196 1
        for LIsting selected rows of an image.  A list of the operations
d200 2
a201 2
        obtain a hardcopy listing of this and post it next to the
	terminal for reference.]<p>
d204 2
a205 1
             After a operation is entered, additional information needed
d210 3
a212 1
        input are described in what follows.
d214 3
a216 4
<a name="file_names"><h4>File  Names</h4></a>
             These  are  sequences of alphanumeric characters,   
        normally  (but not  necessarily) of the form &lt;ABC&gt;&lt;###&gt; 
        where &lt;ABC&gt;  is any sequence of three or more
d221 24
a244 19
        prefix  can  contain  directory
        information. For example,
         <i>../usr/people/myself/A12BCDE001</i> is an acceptable filename.<p>

	     SPIDER can substitute for any portion of the file name at
	run time using a numerical value contained in <A
	HREF="#registers">registers</a>. Any text entered as part of a 
        filename which is enclosed
	between "{" and "}" brackets is presumed to be part of a
	desired substitution request.  <p>

               To substitute a register value into a file 
        name, use the sequence <i> {****X##} </i> where the "*" string
        denotes the number of digits for the substitution and the "##" denote
        the register whose contents are to be substituted in place of
        the astericks.  Any register from <i> 0...99 </i> may be used for
        substitution.  E.g. if the the file name entered is <i> ABC6{***X11}
        </i> and the run time content of register X11 is the value
        <i>34</i>, then the resulting filename is: <i> ABC6034</i>.
d247 1
a247 2
        the current DO-loop index register value into a filename. 
        <p>
d249 15
a263 9
	There may be any number of substitution strings within a single
	filename, e.g. the following is a valid filename: <i>
	/usr/dir{*X33}/abcd{****X34} </i>, if the value in register X33
	only contains a single digit and the value in X34 has less than
	5 digits.  If the value to be substituted contains more digits
	than the number of astericks specified an <b> error will occur
	</b>.  <p> The less powerfull and more ambiguous <A
	HREF="oldfilenamesub.html">old formalism </a> for filename
	substitution is no longer available. <p>
d265 2
a266 1
             The full file name is the above character string  amended
d268 1
a268 1
        beginning of the session.<p>
d270 2
a271 2
             The use of the  character  '*'  as  the  first  character
        (subsequent  ones are ignored) of the file name terminates the
d273 1
a273 1
        operation.   Some  operations  with implied DO-loops continue to
d276 1
a276 1
	<a href="man/su.html">SU</a>.
d278 4
a281 3
<a name="file_handling"><h4>File Handling</h4></a>  
             The file whose  name  is  typed  in  is either an input
        or an output file.<p>
d283 1
a283 1
             Input files are assumed to exist and contain data used as
d285 2
a286 2
        operation does not necessarily exclude changes  to  the  file;
        An example of operations that changes the file is 
d288 1
a288 1
        doc file) . <p>
d290 4
a293 9
             In the case of the Cross-Correlation operation 
	(<a href="man/cc.html">CC</a>), one  of  the
        input  files  is used as a reference file, and is solicited as
        'REFERENCE FILE'.   <p>

             Output files can be either files that already  exist,  or
        files  that  are to be created under the name specified by the
        user.   Already  existing files having the same name are
        overwritten without a warning message!  <p>
d295 1
a295 1
             The dimensions of the output file are  dependent  on  the
d297 3
a299 3
        <a href="man/sh.html">SHift</a>,  <a href="man/rt.html">RoTate</a>)
	or  are solicited from the user (e.g.
        <a href="man/ip.html">InterPolate</a>, <a href="man/wi.html">WIndow</a>).
d301 3
a303 2
<a name="file_opening"><h4>File Opening</h4></a>  
             After each input file or output file specification,  
d306 1
a306 39
        form:<dl><dt>
                  <dd>&lt;ABC&gt;&lt;###&gt; /&lt;Title&gt;<br>
                  (&lt;T&gt;) &lt;NSAM&gt; &lt;NROW&gt; &lt;NSLICE&gt; 
                  CREATED &lt;Date&gt;  AT
                  &lt;Time&gt; &lt;D&gt; HEADER BYTES: &lt;BYTES&gt; <p>

        	<dd>where:
                <dl>
		<dt>&lt;ABC&gt;&lt;###&gt;
                <dd>is the file name.<p>

        	<dt>&lt;Title&gt;
                <dd>is the title previously entered by the user.<p>

		<dt>&lt;T&gt;
                <dd>is the data type code and has the
                    following values:<dl>
                    <dt><dd>
                    'O2' for mixed radix -2 Fourier data 
                        corresponding to odd-length real image data.<br>
                    'E2 for mixed radix -2 Fourier data 
                         corresponding to even-length real image data.<br>
                    'O3' for mixed radix -2 Fourier data 
                         corresponding to odd-length real volume data.<br>
                    'E3 for mixed radix -2 Fourier data corresponding 
                          to even-length real volume data.<br>
                    'R2' for 2D Real image data.<br>
                    'R3' for 3d Real volume data.<br>

		    'S2' for stacked 2D real image data.<br> 
                    'S3' for stacked 3D real volume data.<br> </dl>

		    'I2' for indexed, stacked 2D real image data.<br> 
                    'I3' for indexed, stacked 3D real volume data.<br> </dl>

		    The type code in the file label is used to prevent
		    operations inconsistent with the data format from
		    being carried out (e.g., Real data cannot be
		    inversely Fourier transformed)<p>
d308 44
a351 2
		<dt>&lt;NSAM&gt;,&lt;NROW&gt;,&lt;NSLICE&gt; 
                <dd>is the number of sampling points (columns),
d355 19
a373 1
                    transformed image.<p>
d375 16
a390 15
     		<dt>&lt;Date&gt;,&lt;Time&gt; 
                <dd>is the date and time of file creation.<p>
     		<dt>&lt;D&gt; 
                <dd>is the disposition of the file.  The
                    following codes are used:<dl><dt>
                    <dd>'N' if file is newly created<br>
                        'O' if file is old
	           </dl><p>

     		<dt>&lt;BYTES&gt;
                <dd>is the number of bytes in the SPIDER header for
                    this file<p>
		</dl>
	</dl>
        In case of abnormal termination of the session, the  user  should
d394 3
a396 1
        been accessed.
d398 1
a398 2
<a name="file_image"><h4>Image File Storage</h4></a>
	     The exact format in  which  images and volumes  are stored
d403 2
a404 2
	(LIst). This operation is useful for dumping image contents 
        or for debugging purposes.
d407 2
a408 1
        Many SPIDER uses involve the creation of temporary image
d415 1
a415 1
	Ninety-nint inline files are available and they can hold any size
d417 1
a417 1
	number <i>2</i> is: <i>_2</i>.
d420 2
a421 1
     Multiple images can be stored within a single SPIDER "stack
d424 1
a424 1
     as:  &lt;ABC&gt;&lt;###&gt;@@&lt;###&gt; where &lt;ABC&gt; is a
d426 1
a426 1
     of digits. The digits afer the '@@' symbol represent the image
d430 1
a430 1
     <i>fil001</i> is: <i> fil001@@4056</i>.
d433 2
a434 1
     Inline stack files are available and should be useful on 
d438 1
a438 2
     and
      <i>###</i> is a sequence of digits. The digits afer the '@@'
d447 2
a448 2
     inside inline stack number two is: <i>_2@@4056</i>.
 
d450 2
a451 1
     Both disk based and inline stack files are available with
d464 3
a466 1
    <a href="./man/cpi.html">CP I</a> operations.
d468 1
a468 2
<a name="params"><h4>Parameter Values</h4></a>  
             Values of parameters solicited by an operation can be real, 
d470 1
a470 1
        specify options (e.g., (S)ine or (C)osine). <p>
d472 1
a472 1
             Real and integer parameters are read in without
d477 1
a477 1
        inconsistencies result in an error message:<dl><dt>      
d479 5
a483 3
                  <dd>.BAD INPUT PARAMETER(S).  RE-ENTER:
		</dl>
        The user then has to re-enter the entire line containing the
d485 6
a490 3
	the user enters the dimensions of the output file:<dl><dt>     
                  <dd>41 50.0 
		 </dl>    
d492 4
a495 12
        he has to re-enter:<dl><dt>              
                 <dd>41 50
		</dl>
             However, if he had entered the two  parameter  values  on
        two separate lines:<dl><dt>                                     
                  <dd>41
                  <dd>50
		</dl>
        then the error message would relate to the last line only, and
        it is this line only which he has to re-enter by typing:<dl><dt>      
                  <dd>50         
		</dl>
d498 4
a501 3
	    After successful completion of the operation, the  system
        returns   to   the  operation  input  status,  by  printing  the
        solicitation message '.OPERATION:' on the screen.    <p>
d504 2
a505 1
             If you want to terminate the session, you sign  off  with
d507 4
a510 3
	SPIDER then responds with the terminal message:<dl><dt>  
                  <dd>SPIDER NORMAL STOP              
		</dl>
d513 6
a518 10
             SPIDER produces  two  files  as  a  result  of  the  user
        session:  the <a href="#file_results">RESULTS file</a> and the 
	<a href="#file_log">LOG file</a><p>

             SPIDER also produces and uses 
         <a href="#file_doc">document files</a>. Document files
        are keyed, formatted, sequential text files  used  to  store  
        register  contents and misc. numerical data.   Unlike 
        image files, they can be read and edited. <p>
            
a519 4
	    During an interactive  session,  any  listings  generated
        that  are too lengthy to be listed at the terminal are written
        instead to the RESULTS file, RESULTS.&lt;Prj&gt;. This file also
        contains the protocol of any procedure started interactively. <p>
d521 9
a529 1
             During a procedure session, the  RESULTS  file  contains  the
d531 1
a531 1
        generated by it in their logical order. <p>
d533 3
a535 3
             The <a href="./man/md.html">'MD'</a> operation with 'VB OFF' 
        (Verbose Off) can be used to decrease the amount of output
        from do-loops and from the 'SD' and 'UD IC' operations.
d537 5
a541 1
        lines. <p>
d543 4
a546 3
<a name="file_log"><h4>LOG file</h4></a> 
             The  LOG  file,  LOG.&lt;Prj&gt;, is a complete record of
        everything that has been typed in by the user during the
d548 2
a549 2
        the session. 
 
d551 2
a552 1
            These are keyed, <a href="docfile.html">formatted</a>, 
d556 1
a556 1
        store  the  contents  of  a  group  of  registers (e.g., shift
d559 1
a559 1
        these register values by their keys. <p>
d561 2
a562 2
             Document files are also used for communication between Web
        and SPIDER.  For example the "particle picking" operation in Web
d564 1
a564 1
        SPIDER. <p>
d566 4
a569 60
             Document files may also be used to define  a  processing
        protocol;  switch  on  and  off  the  execution  of 
        procedure files, or include/exclude images of  a  series  from
        processing depending on the result of previous operations. 

<a name="registers"><h3>Registers</h3></a>

             SPIDER has 100 system registers available, X0-X99. The
        number of registers may be increased using the 
		    <dd><a href="man/md.html">MD</a> operation with
        option "SET REGS". These registers
        are  used for storing and transferring parameter values.  
        A register can be filled in one of three ways:
	<OL>
        <li>as output resulting from an operation.
        <li>when used as an index in a do-loop.
        <li>by being explicitly set equal to a value or an
                      arithmetic expression
	</OL>
        For example, when SPIDER  asks  '.OPERATION:',  the  user  may
        type:<dl><dt>
                <dd>X10=3.14159
		</dl>
        System register X10 will then  have  the  value  3.14159.   To
        examine  the  contents  of a register, the user need only type
        the register he/she wishes to examine.  If 'X10'  was  entered
        in  the  above example, the contents of X10, 3.14159, would be
        printed on the screen. <p>

             All registers are set equal to zero at the start  of  the
        SPIDER session. <p>

<a name="registers_special"><h4>Special System Registers</h4></a>
             The first 10 registers, X0-X9, are reserved for SPIDER
        internal use, they should not be used for parameter transfer 
        between operations.     <p>

	The contents of special registers X0 and X9 are:<dl><dd>
		<table border=0>
                <tr valign=top><td>  X0 </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Index </td>
                <td>&nbsp;&nbsp;&nbsp;&nbsp;most recent value of the DO-loop index <br>
                 &nbsp;&nbsp;&nbsp;&nbsp;(updated
                      after each execution of the <a href="man/lb.html">LB</a># statement)</td><tr>

                 <TR VALIGN=TOp><td>  X9 </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Error flag</td><td>&nbsp;&nbsp;&nbsp;&nbsp;  [0 if no error occurred and
                                     1 if an error occured <br>&nbsp;&nbsp;&nbsp;&nbsp;in the most
                                     recent operation]</td><tr>
                </TABLE>
		</dl>
        [Registers 1..8 were used in early SPIDER
        releases for communicating file parameters but are no longer 
        supported in the current SPIDER releases!]

           Registers may appear in <a href="#arithmetic">arithmetic expressions</a>,
	<a href="#math_functions">mathematical functions</a>,  
	as <a href="#registers_input">input  parameters</a>, and as  
	<a href="#registers_output">output parameters</a> in
        operation lines.
	
<a name="registers_input"><h4>Registers [or Arithmetic Expressions] as Input Parameters</h4></a>
d571 190
a760 134
	     Registers  or  valid  arithmetic  expressions  containing
	registers  may  be  used  wherever  integer  or floating point
	values are solicited by operations. <p> 
                <dl><dt>Example 1:
		    <dd><a href="man/rt.html">RT</a> 
                    <dd>PIC001
		    <dd>PIC002 
                    <dd>X11
	</dl> 
        is a  valid  sequence:   the  contents  of  register
	X11  are interpreted as a rotation angle.<p> 
                 <dl><dt>Example 2:
		    <dd><a href="man/sh.html">SH</a> 
                    <dd>PIC001
		    <dd>PIC002 
                    <dd>X11,X12
	</dl> Here the contents of X11,X12 are interpreted as
	components  of a shift vector.<p> 
                 <dl><dt>Example 3:
		    <dd><a href="man/sh.html">SH</a> 
                     <dd>PIC001
		    <dd>PIC002 
                    <dd>(X114.3-X10),SIN(X123.14/180.)
	</dl> 
        Here each arithmetic expression is evaluated  first,
	and  the resulting  values  are  interpreted  as  components of
	a shift vector. <p>

             Note that the register content is always a floating point
        number.   If  read in as an integer, the closest integer value
        is used, e.g.  4 for 3.8, 3 for 3.2, -4 for -4.25, etc.  <p>

        Rules for use of registers or expressions as value input:    
		<OL>
        	<li> Mixing of registers or  expressions  with  numbers  is  not
        	allowed  in  the  input;  e.g.   X11,5  may not be used in
        	Example 2.                            

        	<li>  In  <a href="#loops">DO-loops</a>,  only one register  [or register
                set, respectively] or one  expression [or expression 
                set] may be used.  This set will be applied to each 
                run of the <a href="#loops">DO-loop</a>.     

        	<dl><dt>Example:  
		  	<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 X88=1,5
                  	<dd><a href="man/sh.html">SH</a>
                  	<dd>PIC{***X88}
                  	<dd>OUT{***X88}
                  	<dd>X11,X12
                  	<dd><a href="man/lb.html">LB</a>1 
		</dl>
        	This sequence will apply the values of X11,X12 to each run of
        	the  DO-loop.   Parentheses around X11,X12 are not needed:  if
        	each run of the DO-loop requires different values,  these  may
        	be introduced before the operation by an <a href="man/rr.html">RR</a> operation. <p>

        	<dl><dt>Example:  
		  	<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 X88=1,5
                  	<dd><a href="man/rr.html">RR</a> X11 3.3, 1.5, 6.0, -8.1, 0.0
                        <dd>  RR  X12  -7.5,  5.1, 3.2, -0.4, 8.1
                  	<dd><a href="man/sh.html">SH</a> F
                  	<dd>PIC{***X88}
                  	<dd>OUT{***X88}
                  	<dd>X11,X12
                  	<dd><a href="man/lb.html">LB</a>1
       		</dl>                                   
		</OL>
<a name="registers_output"><h4>Registers as Output Parameters</h4></a>
             Some operations such as <a href="man/fs.html">FS</a>, 
	and  <a href="man/pk.html">PK</a>  allow  the
        specification  of  registers  to  accept  output  values.  For
        example, <a href="man/pk.html">PK</a> X11,X12.  After completion 
	of the <a href="man/pk.html">PK</a>  operation,
        the peak position components are contained in X11,X12.<p> 

             As an example for a value transfer between operations  by
        registers, consider the following sequence:<dl><dt>
                  <dd><a href="man/pk.html">PK</a> X11,X12
                  <dd>COR001
                  <dd>3
                  <dd><a href="man/sh.html">SH</a>
                  <dd>PIC001
                  <dd>NEW001
                  <dd>-X11,-X12
	          </dl>
        <a href="man/pk.html">PK</a> is  an  operation that searches for the peak  position
        in  a  file, normally a cross-correlation function.  It allows
        specification of output registers (in  the  example,  X11,X12)
        where  the peak coordinates are to be stored.  These registers
        may be used by any subsequent operation as floating  point  or
        integer  input, in this example by <a href="man/sh.html">SH</a> (SHift).  A minus sign
        may be used to invert the sign  of  the  value  input  from  a
        register.      

             Note  that  mixed  input  will  not  be  accepted   where
        parameters are solicited.  For example:<dl><dt>
                  <dd><a href="man/sh.html">SH</a>
                  <dd>PIC001
                  <dd>NEW001
                  <dd>-X11,15
		  </dl>
        will result in an error.  In this case, the value 15 should be
        introduced  into  one  of  the  registers  prior  to  the 'SH'
        operation, like this:<dl><dt>
                  <dd>X12=15
                  <dd><a href="man/sh.html">SH</a>
                  <dd>PIC001
                  <dd>NEW001
                  <dd>-X11,X12
                  </dl>                     
             Three  registers, X100-X102, are reserved for keeping  
        track of certain device-dependent parameters. 

<a name="registers_saving"><h4>Saving and Unsaving Registers</h4></a>
             At any given time during the session, the 
        contents of the registers X0 - X99 can be saved by using the 
        <a href="man/sr.html">SR</a>
        operation with the "save"  option.   Any subsequent  operations on 
        registers do not affect this stored register set. Execution of the
         <a href="man/sr.html">SR</a> operation 
        with "unsave" option will fetch the stored register set into the 
        working register area. <p>      

             Any number of register values can be saved in a permanent file 
        by using the <a href="man/sd.html">SD</a> (Save Document) operation. A subsequent 
	<a href="man/ud.html">UD</a> operation 
        issued in a different (or the same) session, refering  to  the  same 
        document file, retrieves these register values. For details on saving
        and unsaving registers, see the <a href="man/sd.html">SD</a> and 
        <a href="man/ud.html">UD</a> manual chapters.  <p>   

<a name="pocketcalc"><h3>SPIDER's Pocket Calculator</h3></a>
	     SPIDER  incorporates  a  "pocket  calculator"  
	which evaluates <a href="#arithmetic">arithmetic operations</a>,
d762 12
a773 1
	<a href="#math_functions">mathematical functions</a>. 
d775 1
a775 17
<a name="arithmetic"><h4>Arithmetic Operations</h4></a>
	At the operation prompt in SPIDER, the  user  may
        type:<dl><dt>   
                   <dd>2*3+5
		   </dl>
        SPIDER will then respond with '11.0000'.<p>

	Available arithmetic operations are:
                  <dl><dd>
                  <TABLE BORDER=0)>
                  <tr><td>+ </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Addition</td></tr>       
                  <tr><td>- </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Subtraction</td></tr>        
                  <tr><td>* </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Multiplication</td></tr>       
                  <tr><td>/ </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Division</td></tr>            
                  <tr><td>** </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Exponentiation</td></tr>
		  <tr><td><a href="#math_functions">mathematical function</td></tr>       	
		  </TABLE></dl>
d777 12
a788 2
<a name="expressions"><h4>Expressions</h4></a>
        Epressions can be used within the SPIDER calculator and
d792 1
a792 1
        <a href="man/if_then.html">IF THEN</a>. 
d794 1
a794 1
	Expressions are evaluated from left to right with
d796 1
a796 1
        <b>string of adjacent arithmetic operators are not allowed</b>.
d799 12
a810 22
        normally.  For example, if the user typed:
                  <dl><dt>    
                  <dd>(3*(-2))*(2+6)
		 </dl>
        SPIDER would respond with '-48.0000'. <p>
        Scientific notation (i.e., 2.3E-4) is allowed. <p>

	These operations may be used to manipulate registers as well.
        For example, if the user typed the following sequence:
                  <dl><dt>
                  <dd>X11=4.1
                  <dd>2*X11
		  </dl>
        SPIDER would respond with 8.2000.  <p>  

	In addition, the user may set a register equal to an expression.  
        For example, if the user typed:
                  <dl><dt>
                  <dd>X12=9.6E-2
                  <dd>X12=X12+5  
		 </dl>
        SPIDER would store in X12 the value 14.6.<p>      
d812 18
a829 1
             If the user types an expression  that  does  not  conform
d831 25
a855 19
        respond with:
                   <dl><dt> 
                   <dd>  *** ERROR: INVALID ARITHMETIC EXPRESSION
		   </dl>
        Examples of valid expressions are:
                  <dl><dt>
                  <dd>2*(-6)
                  <dd>((3+6)*(7*3))**9.1
                  <dd>X11=(X12+7)*(X16/X13)
                  <dd>X11=3.4e-4*1.0
		 </dl>
        Examples of invalid expressions are:
                  <dl><dt>
                  <dd>X100          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Register number exceeds 99]
                  <dd>X12=(2+3      &nbsp;&nbsp;&nbsp;&nbsp;[Unbalanced parenthesis]
                  <dd>(2+3/6))      &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Unbalanced parenthesis]      
                  <dd>2*-6          &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Adjacent arithmetic operators]      
                  <dd>2*(-6E2)        &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[No dot in the number]
		  </dl>
d857 1
a857 1
<a name="math_functions"><h4>Mathematical functions</h4></a>
d859 2
a860 2
	Available mathematical functions are:<p>
            <dl><dd>
d862 290
a1151 159
	    tr><td>PAD(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; next highest power of two of expression</td></TR	
            <tr><td>SIN(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; sine of expression</td></tr>
            <tr><td>COS(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; cosine of expression</td></tr>
            <tr><td>EXP(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; exponential of expression</td></tr>
            <tr><td>LOG(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; logarithm (Base 10) of expression</td></tr>
            <tr><td>LON(&lt;Expression&gt;)   </td><td>&nbsp;&nbsp;&nbsp;&nbsp; natural log of expression</td></tr>
            <tr><td>SQR(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; square root of expression</td></tr>
            <tr><td>INT(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; truncates to integer</td></tr>
            <tr><td>ABS(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; absolute value of expression</td></tr>
            <tr><td>ATA(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; arc tangent of expression (in degrees)</td></tr>
            <tr><td>ASI(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; arc sine of expression (in degrees)</td></tr>
            <tr><td>ACO(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; arc cosine of expression (in degrees)</td></tr>
            <tr><td>TAN(&lt;Expression&gt;)   </td><td>&nbsp;&nbsp;&nbsp;&nbsp; tangent of expression</td></tr>
            <tr><td>RAN(&lt;Any register&gt;)   </td><td>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random uniform number generator in the range from 0 to 1.</td></tr>
            <tr><td>RNN(&lt;Any register&gt;)   </td><td>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random number generator, normal distribution (0,1).</td></tr>
  	    </table></dl><p>

            where  &lt;Expression&gt;  stands for any   
            <a href="#expressions">valid math expression</a>.<p>
            All trigonometric functions use arguments (or give results)
            in degrees.<p>

	Examples of valid usage:<dl><dt>
		<dd>SIN(4.5/(X5-100.))
		<dd>X10=EXP(-400./X11**2)		
		<dd>X15=X14-SIN(45./180.*X91)
		<dd>X16=SIN(45./180.*X91)
		<dd>X15=X14-COS(LON(X16))
		<dd>X16=RAN(X14)    ; <EM> Value of X14 is not changed nor is
                                      it used for anything!</EM>

		</dl>

<a name="comments"><h3>Comments</h3></a>

             Comment  lines  may  be  inserted  in procedure  files.  
              A comment has the form:
                <dl>
                <dt></dt>
		<dd>; This is a comment             </dd>
		</dl>
        A comment is a non-executable statement that  will  simply  be
        printed out in the RESULTS file.     <p>

             Comments may also appear on any lines that  carry  SPIDER
        statements.  They must be separated from the last character of
        such a statement by  at  least  one  blank  and  a  semicolon.
        Example:
                <dl><dt></dt>
		<dd><a href="man/pd.html">PD</a> ; Now pad input image </dd> 
		<dd>PIC001	; From previous window            </dd> 
		<dd>PAD005	; Output will be used for FT      </dd>
		<dd>128,128	; Next power of two dimensions    </dd>
		<dd>Y		; Use average for padding         </dd>
		<dd>1,1		; Top left coord. arbitrary in    </dd>
		<dd>		; this case                       </dd>
		</dl>
         <p>           

        Exceptions are statements that specify sets of  numbers  using
        hyphens, e.g., in the input to operation <a href="man/as.html">AS</a>:  1-7,15-20.
        No comment is allowed in this type of statement. 

<a name="loops"><h3>DO-Loops</h3></a>

             DO-Loops similar to those in FORTRAN are available in
        SPIDER.  They are started by the statement:
                <dl><dt></dt>
                <dd><a href="man/do.html">DO</a> 
                    <a href="man/lb.html">LB</a>
                    &lt;L&gt;&nbsp;&nbsp; &lt;C&gt;=&lt;M&gt;,&lt;N&gt;  </dd>
		</dl>
        and terminated by:
                <dl><dt></dt>
                <dd><a href="man/lb.html">LB</a>&lt;L&gt;  </dd>
                </dl>
       where  
                <dl> 
		<dl>
                <dt>&lt;L&gt;</dt>
                <dd>is a one or two digit integer used for distinguishing 
                    the terminating label and the associated 
                    DO-loops.</dd>
         
                <dt>&lt;C&gt;</dt>
                <dd>is a <a href="#register">register</a> 
                  for the DO-loop index.</dd>

                <dt>&lt;M&gt;,&lt;N&gt; 
                <dd>are positive-valued integers or registers 
                      defining beginning and end of the DO-loop. 
                      Successively, the index &lt;C&gt; will be assigned 
                      the values &lt;M&gt;, &lt;M&gt;+1, &lt;M&gt;+2, ... &lt;N&gt;.
                      Note that &lt;N&gt; must be greater than &lt;M&gt;.  
                       &lt;M&gt; and &lt;N&gt; must be &lt; 100,000.</dd>
		</dl>
		</dl>
             DO-loops may be nested, but they must be distinguished by
        different labels and different index registers or symbols. 

<a name="loops_variable"><h4>Variable Value Input in DO-Loops</h4></a>
             There are basically two different uses of DO-loops in an image  
        processing application:
                <OL>
		<li>
                  Applying the same sequence of  operations  with  the
                  same parameter values to different images,
                  distinguished by numbered file names.
                <li>
                  Applying  the  same  sequence  of  operations   with
                  different parameter values to the same image. <p>
		</OL>
             To serve the first application, variable file  names  are
        provided:
                  <dl><dt></dt>
                  <dd>&lt;ABC&gt; {****&lt;C&gt;}  </dd>
                  </dl>
        where:
                  <dl><dt></dt>
                     <dl>   
                     <dt>&lt;ABC&gt;                         </dd>
                     <dd>is a file prefix,  the "*" (s) denote the
                     number of digits for the substitution and
                     <dt>&lt;C&gt;                           </dd>
                     <dd>is the DO-loop count register defined above. </dd> 
                     </dl>
		  </dl>
             To make variable parameter input possible, values may  be
        entered  as  arrays,  to  be  picked  according to the DO-loop
        count.  Example:
                  <dl><dt></dt>
                  <dd><a href="man/do.html">DO</a>          </dd>
                      <a href="man/lb.html">LB</a>1 X10=1,3 </dd>
                  <dd><a href="man/rt.html">RT</a>          </dd>
                  <dd>PIC{***X10}                           </dd>
                  <dd>OUT{***X10}                           </dd>
                  <dd>45.  61.  78                          </dd>
                  <dd><a href="man/lb.html">LB</a>1         </dd>
		  </dl>
        In this example, <a href="man/rt.html">RT</a> 
        uses the angles 45, 61  and  78  degrees
        with the pictures PIC001, PIC002, and PIC003, respectively.   <p>

             In the case of operations requiring  a  pair  of  numbers
        (e.g.,  shift  coordinates),  one  pair has to be provided for
        each run of the DO-loop.  However, if the same floating  point
        number  or  pair of numbers should be used for each run of the
        DO-loop, this may be specified by using a  single  number  (or
        pair of numbers) enclosed in parentheses.  Example:
                  <dl><dt></dt>
                  <dd><a href="man/do.html">DO </a> LB7 X88=5,9  </dd>
                  <dd><a href="man/sh.html">SH</a>               </dd>
                  <dd>ALL00{***X88}                              </dd>
                  <dd>SHI00{***X88}                              </dd>
                  <dd>(15,8)                                     </dd>
                  <dd><a href="man/lb.html">LB</a>7              </dd>
		  </dl>
        In this case, the shift parameter values 15,8 are  applied  to
        each image, starting with ALL005 and ending with ALL009.<p>
d1153 21
a1173 1
<HR>
d1176 1
a1176 1
<a name="control"><h3>Procedure Control Files</h3></a>
d1178 1
a1178 1
             Procedure control files are user-created files containing
d1180 1
a1180 1
        can have any alphanumeric name up to 80 characters but the
d1185 9
a1193 1
        file, and no LOG file is created. <p>       
d1195 1
a1195 55
             To invoke a procedure when SPIDER asks
	'.OPERATION:', the  user  types an "at" sign <i>@@</i> 
        followed by the name of the procedure file without its extension.  

        <dl><dt></dt>
         <dd>.OPERATION: @@ALIGN10
         </dl>

       When calling a procedure from a another procedure file, the user puts the
        parameters  (if  any)  solicited  by  the procedure behind the
        calling statement in the same order  as  they  appear  in  the
        called procedure file.  For example:
                <dl>
		<dt>Let procedure AD1 contain the following: </dt>
		<dd><a href="man/ad.html">AD</a>             </dd>
		<dd>PIC001                                   </dd>
		<dd>?SECOND  PICTURE  TO   BE ADDED?         </dd>
		<dd>*                                        </dd>
		<dd><a href="man/re.html">RE</a>             </dd>
		<dt>and let procedure B01 contain the following: </dt>
		<dd><a href="man/rt.html">RT</a>             </dd>
		<dd>WOW001                                   </dd>
		<dd>OUT001                                   </dd>
		<dd>180.00                                   </dd>
		<dd>@@AD1                                      </dd>
		<dd>OUT001                                   </dd>
		<dd><a href="man/en.html">EN</a>             </dd>
		</dl>
	Then '.OPERATION:  @@B01' will cause WOW001 to be rotated by  180  degrees,  and
        stored  in  OUT001.   OUT001  will then be added to PIC001.  SPIDER
        will ultimately return to the level of the calling procedure file, and terminate
        the session.               
  
             Procedures allow the user to specify  parameters  at  run
        time. the
        procedure requires parameter values in  the  order  they  have
        been  <a href="#new">internally  defined  when the procedure was written</a>.<p>                                     

             When called in the interactive mode, the  procedure  will
        solicit the required parameters from the terminal.

              Solicitation messages enclosed  by  question  marks  will
        appear  in the order they are defined in the <a href="#new">
	procedure operation sequence.</a>.<p>

        Procedures may be called from:
            <OL>
            <li>another procedure
            <li>an interactive session
            </OL>

             If called from the interactive mode, when a 'RE'  operation
        is  encountered,  control  will  return  to  the terminal.  If
        called from another procedure file, control will be passed  to
        the operation following the procedure call. <p>          
d1197 5
d1203 5
a1207 50
<a name="execution"><h3>Execution Rules</h3></a>
	
             Standard  procedures  are  contained  in the 
        <a href="../proc/">SPIDER system's procedure directory</a> 
        with the extension <i>'spi'</i>.  
        These procedures form the standard procedure library for SPIDER. <p>

             For any procedure call, SPIDER will first scan the user's
        directory.   If  a procedure file under the given name
        is found, then this procedure becomes effective in  the  call.
        If  no  such  procedure is found, SPIDER will attempt to
        locate the given file with a <i>.spi</i> extension in the SPIDER 
        system's procedure directory. <p>

<a name="new"><h3>Writing New Procedures</h3></a>
        To create a procedure file the user must:
	     <OL>
            <li>Replace any parameter in the procedure file that the  user
            wishes  to  specify  at run time by a solicitation message
            enclosed in question marks, e.g., ?PICTURE  TO  BE  ADDED?
            (See below).

            <li>Replace the <a href="man/en.html">EN</a> operation at 
	    the end by a <a href="man/re.html">RE</a> operation.
	    </OL>

	At  execution  time,  the   user-specified   solicitation
        messages  are  the  only  messages  that  will  appear  on the
        terminal.            <p>

             For example, if the following procedure was called from
        the interactive mode:
            <dl><dt></dt>
            <dd><a href="man/ad.html">AD</a>
            <dd>PIC001
            <dd>?PICTURE TO BE ADDED?
            <dd>*
            <dd><a href="man/re.html">RE</a>
            </dl>
        SPIDER would print '?PICTURE TO BE ADDED?' at the terminal and
        wait  for  the user to specify the file to be added to PIC001.
        It would then add the two pictures, and upon encountering  the
        <a href="man/re.html">RE</a> operation, will return to the interactive mode.
        <p>
        One restriction exists on the definition of procedures:  
            The parameter to be specified at run time may not be a
            operation.  This restriction is imposed because each operation
            may produce a different number of subsequent
            solicitations.
	    
d1209 1
a1209 55
<a name="symbolic"><h4>Symbolic Parameters</h4></a>
             Frequently, one encounters  the situation where more 
        same information is required in the procedure more than once. For 
        example, the following procedure definition solicits the name 
        of the image to be aligned twice from the user:
            <p>
            <dl>
            <dd>; PROCEDURE TO ALIGN IMAGE WITH REFERENCE
            </p><p>
            <dd><a href="man/pd.html">PD</a>
            <dd>?UNALIGNED IMAGE? [unaligned];
            <dd>ACF001
            <dd>128,128
            <dd>N
            <dd>33,33
            </p><p>
            <dd><a href="man/pd.html">PD</a>
            <dd>?REFERENCE IMAGE?[reference] </dd>
            <dd>ACF002</dd>
            <dd>128,128</dd>
            <dd>N</dd>
            <dd>33,33</dd>
            </p><p>
            <dd><a href="man/ac.html">AC</a></dd>
            <dd>ACF001</dd>
            </p><p>
            <dd><a href="man/ac.html">AC</a></dd>
            <dd>ACF002</dd>
            </p><p>
            <dd><a href="man/or2.html">OR 2</a> X10</dd>
            <dd>ACF001</dd>
            <dd>ACF002</dd>
            <dd>5</dd>
            </p><p>
            <dd><a href="man/rt.html">RT</a></dd>
            <dd>[unaligned]  ; symbolic parameter that was set above</dd>
            <dd>?OUTPUT IMAGE?[output]</dd>
            <dd>X10</dd>
            </p><p>
            <dd><a href="man/rt.html">RE</a></dd>
            </dl>
            </p><p>
        SPIDER allows the user to  tie a symbolic parameter
        label to any procedure solicitation message (marked  by  a  ?...? ).  
        Later this symbolic parameter label can be used in place of the 
        repeated solicitation message.  The format for the label is: [label], 
        where <i> label </i> may be any string. Note that the [] 
        brackets are required here to indicate a symbolic parameter label! <p>

             In the example for a procedure definition given above,
        the second occurrence of ?IMAGE TO BE ALIGNED? was
        be replaced by [unaligned], since this is the label assigned at the first 
        occurance of the ?IMAGE TO BE ALIGNED? use.
        A run-time specification for ?IMAGE TO BE ALIGNED? will then
        be automatically applied to the input. <p>
d1211 5
a1215 99
<a name="symbolic_var"><h4>Variable Symbolic Parameters</h4></a>
 
             Symbolic parameters that represent file names may be modified 
        at run time by attaching a register. The specified  digits of the 
        filename are then replaced by new digits 
        according to the current value in the register.
        <p>
        <dl>
        <dt>Example --- 1:</dt>
            <dd>; PR1 -- procedure to list file statistics</dd>
            </p><p>
            <dd><a href="man/fr.html">FR</a></dd>
            <dd>?ENTER FIRST IMAGE?[1]</dd>
            </p><p>
            <dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 X88=2,10</dd>
            </p><p>
            <dd><a href="man/fs.html">FS</a></dd>
            <dd>[1]X88</dd>
            <dd>N</dd>
            <dd><a href="man/lb.html">LB</a>1</dd>
            </p><p>
            <dd><a href="man/re.html">RE</a></dd>
            </p><p>
        <dt>Calling sequence:</dt>
            <dd>@@PR1</dd>
            <dd>PIC001</dd>
	</dl>
        <p>

        In the <a href="#loops">DO-loop</a>,  PIC001 will then be replaced by PIC002,
        PIC003, ...  , PIC010.<dl>

        <dt>Example --- 2:</dt>
            </p><p>
            <dd>; PR2 --procedure to list file statistics</dd>
            <dd><a href="man/rr.html">RR</a>X15
            <dd>?PIC OUTPUT FILE NUMBER?[picout]</dd>
            </p><p>
            <dd><a href="man/fi.html">FI</a></dd>
            <dd>PIC{***X15}</dd>
            </p><p>
            <dd><a href="man/re.html">RE</a></dd>
            </p><p>
        <dt>Calling sequence:</dt>
            <dd>@@PR2</dd>
            <dd>5</dd>
	</dl>
        In this example, the operation <a href="man/fi.html">FI</a> is applied to PIC005.<dl>

        <dt>Example --- 3:</dt>
            <dd>;PR3</dd>
            </p><p>
            <dd><a href="man/fr.html">FR</a></dd>
            <dd>?ENTER ANY IMAGE OF SERIES? [1]</dd>
            </p><p>
            <dd><a href="man/rr.html">RR</a> X10</dd>
            <dd>?PICK OUT FILE NUMBER?[2]</dd>
            <dd><a href="man/fs.html">FS</a></dd>
            <dd>[1]X10</dd>
            </p><p>
                   
        <dt>Calling sequence:</dt>
            <dd>@@PR3</dd>
            <dd>PIC003</dd>
            <dd>20.</dd>
        </dl>          
        In this example, the operation <a href="man/fs.html">FS</a> is applied to PIC020.

<a name="symbolic_loops"><h4>Symbolic Parameters in DO-Loops</h4></a>
             Symbolic  parameters cause a transfer of the whole input value 
        at the time of the execution, not just the transfer of a single  
        number.  It is therefore possible to use a symbolic reference in 
        <a href="#loops">DO-loops</a>.

        <dl>
        <dt>Example:</dt>
            </p><p>
            <dd>;PR4 -- procedure file</dd>
            </p><p>
            <dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 X88=1,5</dd>
            </p><p>
            <dd><a href="man/sh.html">SH</a></dd>
            <dd>PIC{***X88}</dd>
            <dd>OUT{***X88}</dd>
            <dd>?ENTER SHIFT COMPONENTS?[shifts]</dd>
            </p><p>
            <dd><a href="man/sh.html">SH</a></dd>
            <dd>PAD{***X88}</dd>
            <dd>SCR{***X88}</dd>
            <dd>[shifts]</dd>
            </p><p>
            <dd><a href="man/lb.html">LB</a>1</dd>
            </p><p>
            <dd><a href="man/re.html">RE</a></dd>
            </p><p>
        <dt>Calling sequence:</dt>
            <dd>@@PR4</dd>
            <dd>5,1 4,3 8,5 10,1 0,0</dd>
        </dl>
a1216 13
        In this example, each pair of components is applied to both
        <a href="man/sh.html">SH</a> operations; i.e.   
        5,1 for I=1, 4,3 for I=2, etc. See
        <a href="#loops">DO-loops</a>.

<a name="proc_registers"><h3>Using Registers in Nested Procedures
        </h3></a>
        Registers, in calling procedure  control  files,
        are  independent  of  registers  within the procedures called.
        However, if values need to be  transferred  from  the  calling
        procedure  to  the  procedure called, either 
	<a href="#argument">argument transfer</a>
        or the operation <a href="man/rr.html">RR</a> may be used.       
d1218 22
a1239 2
<a name="argument"><h3>Argument Transfer</h3></a>
             Procedure calls may contain up to 12 register arguments if
d1242 9
a1250 7
        as the first line of the procedure (before any comments), 
        and must be of the form:
            <dl><dt>
            <dd>(X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,...)
            </dl>
        where X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,...  are registers  appearing  in  the
        procedure.  
d1253 328
a1580 51
        registers, and must be of the form:
            <dl><dt>
            <dd>@@&lt;PROCNAME&gt;(X&lt;M1&gt;,X&lt;M2&gt;,X&lt;M3&gt;,...).
            </dl>
        Register values are passed in both  directions;
        i.e.,   from  the  upper  to  the  lower  level  and
        vice-versa.
            <dl>
            <dt>
            <dd>X20=1
            <dd>X30=5
            <dd>X40=-4
            <dd>@@PROC(X20,X30,X40)
            </dl>
        will result in the values:
            <dl><dt>
            <dd>X20=2
            <dd>X30=-20
            <dd>X40=-2
            </dl>
        if the procedure is defined as follows:
            <dl><dt>
            <dd>(X10,X11,X12)
            <dd>X10=X10*2
            <dd>X11=X11*X12
            <dd>X12=X12/2
            <dd><a href="man/re.html">RE</a>
            </dl>
<a name="proc_loops"><h3>Procedure calls in DO-Loops</h3></a>
           An important restriction applies if a procedure
        is   called  within  a  <a href="#loops">DO-loop</a>.   Specifically,  if
        different parameter values are to  be  used  in  the
        different  runs  of  the  <a href="#loops">DO-loop</a>,  they must not be
        entered as a string of numbers:<dl><dt>
            <dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 I=1,5
            <dd>PS1
            <dd>6.5 7.3 8.1 4.9 3.3
            <dd><a href="man/lb.html">LB</a>1
            </dl>
        will result in the value 6.5 being  repeatedly  used
        by  procedure  PS1.   To  use  different values, the
        numbers must be successively stored  in  a  register
        which  transfers  them  to  PS1 
	(See also <a href="#loops">DO-loops</a>):<dl><dt>
            <dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 I=1,5
            <dd><dd><a href="man/rr.html">RR</a> X20
            <dd>6.5 7.3 8.1 4.9 3.3
            <dd>PS1
            <dd>X20
            <dd><a href="man/lb.html">LB</a>1
            </dl>
d1582 1
a1582 1
<hr>
a1584 2
    In SPIDER most memory intensive operations now make use of run time
    allocation (and deallocation) of necessary memory. <p>
d1586 6
a1591 2
    SPIDER contains directives which can be used by <i>OpenMP</i>  parallelizing
    Fortran compilers available on SGI, DEC, Linux, and NT multiprocessor machines.  The 
d1593 2
a1594 2
    limit the number of processors used during SPIDER execution on such machines. 
    <p>
d1599 2
a1600 1
    Unix systems have queues available for scheduling execution of
d1603 1
a1603 1
    <a href="batch-unix_doc.html">batch-unix_doc.html.</a>
d1605 2
a1606 1
<hr> <p><small>
d1608 4
a1611 2
Last update: 27 Oct. 2005  &nbsp;&nbsp;&nbsp;
ArDean Leith  </small></p>
@


1.53
log
@() instead of [] reg arguments
@
text
@d18 1
a18 1
<a href="installation.html">distribution and instaSollation</a>, and
d217 1
a217 1
        (without extension) can have  up  to  79  characters  and  the
d220 1
a220 1
         <i>../usr/people/myself/A12BCDE001</i> is acceptable.<p>
d230 1
a230 1
        name, use the sequence <i> {****X&lt;##&gt} </i> where the "*" string
a274 4
             If an operation requires more than one input file,  these
        are  distinguished in the solicitation messages as 'INPUT1',
        'INPUT2', etc.     <p>

d283 1
a283 1
        overwritten without a warning message.  <p>
d1338 1
a1338 1
Last update: 28 Apr. 2005  &nbsp;&nbsp;&nbsp;
@


1.52
log
@*** empty log message ***
@
text
@d1095 1
a1095 1
            <dd>?UNALIGNED IMAGE? &lt;unaligned&gt;
d1102 1
a1102 1
            <dd>?REFERENCE IMAGE?&lt;reference&gt; </dd>
d1120 2
a1121 2
            <dd>&lt;unaligned&gt;  ; symbolic parameter that was set above</dd>
            <dd>?OUTPUT IMAGE?&lt;output&gt;</dd>
d1130 2
a1131 2
        repeated solicitation message.  The format for the label is: &lt;label&gt;, 
        where <i> label </i> may be any string. Note that the &lt;&gt; 
d1136 1
a1136 1
        be replaced by &lt;unaligned&gt;, since this is the label assigned at the first 
d1153 1
a1153 1
            <dd>?ENTER FIRST IMAGE?&lt;1&gt;</dd>
d1158 1
a1158 1
            <dd>&lt;1&gt;X88</dd>
d1177 1
a1177 1
            <dd>?PIC OUTPUT FILE NUMBER?&lt;picout&gt;</dd>
d1194 1
a1194 1
            <dd>?ENTER ANY IMAGE OF SERIES? &lt;1&gt;</dd>
d1197 1
a1197 1
            <dd>?PICK OUT FILE NUMBER?&lt;2&gt;</dd>
d1199 1
a1199 1
            <dd>&lt;1&gt;X10</dd>
d1225 1
a1225 1
            <dd>?ENTER SHIFT COMPONENTS?&lt;shifts&gt;</dd>
d1230 1
a1230 1
            <dd>&lt;shifts&gt;</dd>
d1262 1
a1262 1
            <dd>[X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,...]
d1265 3
a1267 1
        procedure.   The calling sequence must have the same number of
d1270 1
a1270 1
            <dd>@@&lt;PROCNAME&gt;[X&lt;M1&gt;,X&lt;M2&gt;,X&lt;M3&gt;,...].
d1280 1
a1280 1
            <dd>@@PROC[X20,X30,X40]
d1290 1
a1290 1
            <dd>[X10,X11,X12]
d1342 1
a1342 1
Last update: 9 Jul. 2004  &nbsp;&nbsp;&nbsp;
@


1.51
log
@xhtml fixup
@
text
@a0 1
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
d3 1
a3 1
<meta name="generator" content="HTML Tidy, see www.w3.org">
d5 1
d7 1
d11 6
a16 6
<p>This Guide covers issues relating to the syntax, conventions,
and running of SPIDER. It also has a section that discusses
<a href="#procedures">procedures</a> and how to write them.</p> 

<a href="errors.html">Error handling</a>, 
specialized <a href="documents.html">techniques and tools</a>, 
d18 3
a20 80
<a href="installation.html">distribution and installation</a>, and 
<a href="release.html">release notes</a>, are discussed elsewhere.<br>
<br>

<p>This guide is organized under the following headings:</p>

<ul>
<li><a href="#interactive">Running SPIDER Interactively</a> 

<ul>
<li><a href="#starting">Starting a Session</a></li>

<li><a href="#cmd_line">Optional Command Line Parameters</a></li>

<li><a href="#input_cmd">The Operation Input Status</a></li>

<li><a href="#input_info">User-Solicited Information</a></li>

<li style="list-style: none">
<ul>
<li><a href="#file_names">File Names</a></li>

<li><a href="#file_handling">File Handling</a></li>

<li><a href="#file_opening">File Opening</a></li>

<li><a href="#file_image">Image File Storage</a></li>

<li><a href="#file_inline">Inline Files</a></li>

<li><a href="#file_stack">Image Stack Files</a></li>

<li><a href="#file_inline_stack">Inline Stack Files</a></li>

<li><a href="#indexed_stack">Indexed Stack Files</a></li>

<li><a href="#params">Parameter Values</a></li>
</ul>
</li>

<li><a href="#completion">Completion of an Operation</a></li>

<li><a href="#ending">Ending a SPIDER Session</a></li>

<li><a href="#file_nonimage">Non-Image files used by
SPIDER</a></li>

<li style="list-style: none">
<ul>
<li><a href="#file_results">RESULTS File</a></li>

<li><a href="#file_log">LOG File</a></li>

<li><a href="#file_doc">Document Files</a></li>
</ul>
</li>

<li><a href="#registers">Registers</a> 

<ul>
<li><a href="#registers_special">Special System Registers</a></li>

<li><a href="#registers_input">Registers [or Arithmetic
Expressions] as Input Parameters</a></li>

<li><a href="#registers_output">Registers as Output
Parameters</a></li>

<li><a href="#registers_saving">Saving and Unsaving
Registers</a></li>
</ul>
</li>

<li><a href="#pocketcalc">SPIDER's Pocket Calculator</a></li>

<li style="list-style: none">
<ul>
<li><a href="#arithmetic">Arithmetic Operations</a></li>

<li><a href="#expressions">Expressions</a></li>
d22 2
a23 9
<li><a href="#math_functions">Mathematical Functions</a></li>
</ul>
</li>

<li><a href="#comments">Comments</a></li>

<li><a href="#loops">DO-Loops</a></li>

<li style="list-style: none">
d25 45
a69 6
<li><a href="#loops_variable">Variable Value Input in
DO-Loops</a></li>
</ul>
</li>
</ul>
</li>
d72 14
d87 1
a87 3
<li style="list-style: none">
<ul>
<li><a href="#control">Procedure Control Files</a></li>
d89 2
a90 1
<li><a href="#execution">Execution Rules</a></li>
d92 1
a92 15
<li><a href="#new">Writing New Procedures</a></li>

<li style="list-style: none">
<ul>
<li><a href="#symbolic">Symbolic Parameters</a></li>

<li><a href="#symbolic_var">Variable Symbolic Parameters</a></li>

<li><a href="#symbolic_loops">Symbolic Parameters in
DO-Loops</a></li>
</ul>
</li>

<li><a href="#proc_registers">Using Registers in Nested
Procedures</a></li>
d94 5
a98 2
<li style="list-style: none">(or Procedures called from Procedure
Files)</li>
a99 19
<li><a href="#argument">Argument Transfer</a></li>

<li><a href="#proc_loops">Procedure calls in DO-Loops</a></li>
</ul>
</li>

<li><a href="#memory">Memory Allocation &amp;
Multiprocessors</a></li>

<li><a href="#unix">Submitting Batch Jobs on UNIX systems</a></li>
</ul>

<hr>
<p>SPIDER can be run either interactively or in a procedure mode.
Interactive mode means that user input on the terminal is solicited
by messages appearing on the screen. In the procedure mode, control
input is taken from a procedure control file where it has to appear
in exactly the same sequence as in an interactive session.</p>

d102 860
a961 3
We call a session the entire sequence of operations from the start
of SPIDER to the execution of the <a href="man/en.html">EN</a>
(ENd) operation. 
d963 2
a964 907
<h3>Starting The Session</h3>

Log on in your directory, then start SPIDER by typing: 

<dl>
<dt></dt>

<dd>spider</dd>

<dd>&nbsp;&nbsp;&nbsp;or</dd>

<dd>spider &lt;Prj&gt;/&lt;Dat&gt;</dd>
</dl>

<br>
<p>SPIDER will then print some introductory information
including:</p>

<dl>
<dt></dt>

<dd>The version number and issue date for this version.</dd>
</dl>

If the PROJECT/DATA EXTENSION is not given on the command line,
SPIDER will then respond with: 

<dl>
<dt></dt>

<dd>.ENTER PROJECT/DATA EXTENSION: &lt;Prj&gt;/&lt;Dat&gt;</dd>
</dl>

The project extension &lt;Prj&gt; consists of a three letter
sequence, e.g, 'GLS', is used to identify procedure files, the LOG
file, and the RESULTS file by attaching this sequence to the file
names as an extension.

<p>The data extension &lt;Dat&gt; is optional. It consists of a
three letter sequence, e.g., 'SCI', and is used to identify the
data files by attaching this sequence to data file names as an
extension.</p>

<p>For example, an image file specified as <i>'ACF001'</i> during
the SPIDER session will have as a full filename <i>'ACF001.SCI'</i>
if the above data extension <i>'SCI'</i> is used.</p>

<p>A file created as an output file of a SPIDER operation will have
the &lt;Dat&gt; extension attached to its SPIDER file name. If no
data extension is given, the system uses the project extension as
data extension.</p>

<p>The set of files having the same data extension can be thought
of as a library. Within one session of SPIDER, all image files
accessed and created belong to the same library.</p>

<p>[Note, however, that the new extension operation <a href=
"man/nc.html">NC</a> (New Code) may be used within the SPIDER run
to redefine the project extension/data extension.]</p>

<p>If more than one SPIDER session is being run in the same
directory, different project extensions should be used.</p>

<p>Each input line typed by the user is echoed by SPIDER on the
subsequent line so that typing errors become apparent.</p>

<p>Each line produced by SPIDER that requires input is preceded by
a period, e.g., '.INPUT FILE:'.</p>

<p></p>

<dl>
<dt>Optional Command Line Parameters</dt>
</dl>

SPIDER can accept optional command line parameters in addition to
the PROJECT/DATA EXTENSION. 

<dl>
<dt>procedure</dt>

<dd>Initial procedure to be run when starting SPIDER. The @@ sign is
necessary now.</dd>

<dt>Result file version number</dt>

<dd>Result file version number version number to be used by SPIDER
run. This will superceed value determined by incrementing current
version number</dd>

<dt>Register assignments.</dt>

<dd>Inital register assignments when starting SPIDER. These
assignments will be inherited by any inital proceedure.</dd>
</dl>

<dl>
<dt>An example of a SPIDER run with optional command line
parameters follows:</dt>

<dd><i>spider prj/dat @@procname 17 x11=3 x12=4</i></dd>
</dl>

<h3>The Operation Input Status</h3>

The system now asks: 

<dl>
<dt></dt>

<dd>.OPERATION:</dd>
</dl>

All available operations are specified by two or more letter
operations, e.g. <a href="man/li.html">LI</a> for LIsting selected
rows of an image. A list of the operations and their meanings is
available in the <a href="operations_doc.html">index of
operations</a> which is part of this SPIDER documentation. You may
want to obtain a hardcopy listing of this and post it next to the
terminal for reference.]

<p></p>

<h3>User-Solicited Information</h3>

After a operation is entered, additional information needed to
carry out the operation is solicited from the user. This
information may be grouped into the following categories: (a) File
information on input and output (mostly image) files, and (b)
Values of parameters. These types of input are described in what
follows. 

<h4>File Names</h4>

These are sequences of alphanumeric characters, normally (but not
necessarily) of the form &lt;ABC&gt;&lt;###&gt; where &lt;ABC&gt;
is any sequence of three or more characters (the prefix), and
&lt;###&gt; is three or more digit number. If this convention is
followed, files can be accessed under control of SPIDER <a href=
"#loops">DO-loops</a>. The file name (without extension) can have
up to 79 characters and the prefix can contain directory
information. For example, <i>../usr/people/myself/A12BCDE001</i> is
acceptable.

<p>SPIDER can substitute for any portion of the file name at run
time using a numerical value contained in <a href=
"#registers">registers</a>. Any text entered as part of a filename
which is enclosed between "{" and "}" brackets is presumed to be
part of a desired substitution request.</p>

<p>To substitute a register value into a file name, use the
sequence <i>{****X&lt;##&gt;}</i> where the "*" string denotes the
number of digits for the substitution and the "##" denote the
register whose contents are to be substituted in place of the
astericks. Any register from <i>0...99</i> may be used for
substitution. E.g. if the the file name entered is
<i>ABC6{***X11}</i> and the run time content of register X11 is the
value <i>34</i>, then the resulting filename is: <i>ABC6034</i>.
This mechanism can also be used inside a <a href=
"#loops">DO-loop</a> to substitute the current DO-loop index
register value into a filename.</p>

<p>There may be any number of substitution strings within a single
filename, e.g. the following is a valid filename:
<i>/usr/dir{*X33}/abcd{****X34}</i> , if the value in register X33
only contains a single digit and the value in X34 has less than 5
digits. If the value to be substituted contains more digits than
the number of astericks specified an <b>error will occur</b> .</p>

<p>The less powerfull and more ambiguous <a href=
"oldfilenamesub.html">old formalism</a> for filename substitution
is no longer available.</p>

<p>The full file name is the above character string amended with
.&lt;Dat&gt;, where &lt;Dat&gt; is the data extension specified at
the beginning of the session.</p>

<p>The use of the character '*' as the first character (subsequent
ones are ignored) of the file name terminates the current operation
and makes the system ready to accept a new operation. Some
operations with implied DO-loops continue to solicit input files
until the escape character '*' is used as a file name. Examples
include <a href="man/ad.html">AD</a> and <a href=
"man/su.html">SU</a>.</p>

<h4>File Handling</h4>

The file whose name is typed in is either an input or an output
file.

<p>Input files are assumed to exist and contain data used as input
to the operation. The fact that a file is input to the operation
does not necessarily exclude changes to the file; An example of
operations that changes the file is <a href="man/ppll.html">PP
LL</a> (Put Lines in image from doc file) .</p>

<p>If an operation requires more than one input file, these are
distinguished in the solicitation messages as 'INPUT1', 'INPUT2',
etc.</p>

<p>In the case of the Cross-Correlation operation (<a href=
"man/cc.html">CC</a>), one of the input files is used as a
reference file, and is solicited as 'REFERENCE FILE'.</p>

<p>Output files can be either files that already exist, or files
that are to be created under the name specified by the user.
Already existing files having the same name are overwritten without
a warning message.</p>

<p>The dimensions of the output file are dependent on the
operation, and are either copied from the input file (e.g <a href=
"man/sh.html">SHift</a>, <a href="man/rt.html">RoTate</a>) or are
solicited from the user (e.g. <a href=
"man/ip.html">InterPolate</a>, <a href=
"man/wi.html">WIndow</a>).</p>

<h4>File Opening</h4>

After each input file or output file specification, SPIDER will
attempt to open the file. After the file is opened, a statement is
written on the terminal which has the following form:

<dl>
<dt></dt>

<dd>&lt;ABC&gt;&lt;###&gt; /&lt;Title&gt;<br>
 (&lt;T&gt;) &lt;NSAM&gt; &lt;NROW&gt; &lt;NSLICE&gt; CREATED
&lt;Date&gt; AT &lt;Time&gt; &lt;D&gt; HEADER BYTES: &lt;BYTES&gt; 

<p></p>
</dd>

<dd>where: 

<dl>
<dt>&lt;ABC&gt;&lt;###&gt;</dt>

<dd>is the file name.

<p></p>
</dd>

<dt>&lt;Title&gt;</dt>

<dd>is the title previously entered by the user.

<p></p>
</dd>

<dt>&lt;T&gt;</dt>

<dd>is the data type code and has the following values:

<dl>
<dd>'O2' for mixed radix -2 Fourier data corresponding to
odd-length real image data.<br>
 'E2 for mixed radix -2 Fourier data corresponding to even-length
real image data.<br>
 'O3' for mixed radix -2 Fourier data corresponding to odd-length
real volume data.<br>
 'E3 for mixed radix -2 Fourier data corresponding to even-length
real volume data.<br>
 'R2' for 2D Real image data.<br>
 'R3' for 3d Real volume data.<br>
 'S2' for stacked 2D real image data.<br>
 'S3' for stacked 3D real volume data.<br>
</dd>
</dl>

'I2' for indexed, stacked 2D real image data.<br>
 'I3' for indexed, stacked 3D real volume data.<br>
</dd>
</dl>

The type code in the file label is used to prevent operations
inconsistent with the data format from being carried out (e.g.,
Real data cannot be inversely Fourier transformed)

<p></p>
</dd>

<dt>&lt;NSAM&gt;,&lt;NROW&gt;,&lt;NSLICE&gt;</dt>

<dd>is the number of sampling points (columns), number of rows, and
number of slices in the image. In the case of Fourier transforms,
the numbers correspond to those of the transformed image.

<p></p>
</dd>

<dt>&lt;Date&gt;,&lt;Time&gt;</dt>

<dd>is the date and time of file creation.

<p></p>
</dd>

<dt>&lt;D&gt;</dt>

<dd>is the disposition of the file. The following codes are used:

<dl>
<dt></dt>

<dd>'N' if file is newly created<br>
 'O' if file is old</dd>
</dl>

<p></p>
</dd>

<dt>&lt;BYTES&gt;</dt>

<dd>is the number of bytes in the SPIDER header for this file

<p></p>
</dd>
</dl>

In case of abnormal termination of the session, the user should
carefully check the opening information of all files that were open
when the program failed. This will tell him/her if the image format
was correct, and if the correct image file has been accessed. 

<h4>Image File Storage</h4>

The exact format in which images and volumes are stored on disk
along with their headers, and the contents of the headers is
detailed <a href="formats.html#image">elsewhere</a>. The only
operation that accesses the image or volume files by explicit
record numbers is <a href="man/li.html">LI</a> (LIst). This
operation is useful for dumping image contents or for debugging
purposes. 

<h4>Inline Files</h4>

Many SPIDER uses involve the creation of temporary image files
which undergo further processing later in the session. Computer
access to these files is faster when they are kept in memory
instead of being written out to disk. A inline file is referred to
as: <i>_#</i>. Where <i>_#</i> is one to three underscore symbol(s)
followed by one or two digits. Any such file is stored in memory as
an "inline file". Ninety-nint inline files are available and they
can hold any size image. An example of a filename that denotes an
inline file number <i>2</i> is: <i>_2</i>. 

<h4>Image Stacks</h4>

Multiple images can be stored within a single SPIDER "stack file".
A stack file differs from a SPIDER volume in that each image keeps
its own full header. A stacked image is referred to as:
&lt;ABC&gt;&lt;###&gt;@@&lt;###&gt; where &lt;ABC&gt; is a sequence
of alphanumeric characters and &lt;###&gt; is a sequence of digits.
The digits afer the '@@' symbol represent the image number within a
stack. Stacked images can be used anywhere a normal SPIDER file
name would be used. An example of a filename that denotes image
number <i>4056</i> inside stack file <i>fil001</i> is:
<i>fil001@@4056</i>. 

<h4>Inline Stack Files</h4>

Inline stack files are available and should be useful on machines
with large physical memory. An inline stacked image is referred to
as: &lt;_#&gt;@@&lt;###&gt;. Where &lt;_#&gt; is one to three
underscore symbol(s) followed by a one or two digits and <i>###</i>
is a sequence of digits. The digits afer the '@@' symbol represent
the image number within a stack. Inline stacked images can be used
anywhere a normal SPIDER file name would be used. In this case, the
first time a particular inline stack is referenced you will be
asked for the total number of images in the stack. Alternatively, a
stack can be created using the <a href="./man/ms.html">MS</a> (Make
Stack) operation. An example of a filename that denotes image
number <i>4056</i> inside inline stack number two is:
<i>_2@@4056</i>. 

<h4>Indexed Stack Files</h4>

Both disk based and inline stack files are available with an index
and may be used like normal SPIDER stack files. An indexed stack
may be useful if you have a sparsely populated large stack. In an
indexed stack there is an extra set of records following the
overall header that stores the indices. Unlike a normal stack there
is no space wasted for a missing image in the stack. For indexed
stacks the first time a particular indexed stack is referenced you
will be asked for the maximum number of any image in the index. For
indexed inline stacks this number is usually different from the
maximum number of images that can be held in the stack. An indexed
stack can only be created using the <a href="./man/msi.html">MS
I</a> or <a href="./man/cpi.html">CP I</a> operations. 

<h4>Parameter Values</h4>

Values of parameters solicited by an operation can be real,
integer, or alphanumeric. Alphanumeric parameters are used to
specify options (e.g., (S)ine or (C)osine). 

<p>Real and integer parameters are read in without formatting
rules; they can be at any place on the line, separated by commas or
any number of blanks, and spread out over any number of (non-blank)
lines. They are checked for correct type and possible typing
errors. Such errors and type inconsistencies result in an error
message:</p>

<dl>
<dt></dt>

<dd>.BAD INPUT PARAMETER(S). RE-ENTER:</dd>
</dl>

The user then has to re-enter the entire line containing the error.
For example, in <a href="man/ip.html">IP</a> (InterPolate), the
user enters the dimensions of the output file:

<dl>
<dt></dt>

<dd>41 50.0</dd>
</dl>

where only integer input is allowed. After the error message, he
has to re-enter:

<dl>
<dt></dt>

<dd>41 50</dd>
</dl>

However, if he had entered the two parameter values on two separate
lines:

<dl>
<dt></dt>

<dd>41</dd>

<dd>50</dd>
</dl>

then the error message would relate to the last line only, and it
is this line only which he has to re-enter by typing:

<dl>
<dt></dt>

<dd>50</dd>
</dl>

<h3>Completion of an Operation</h3>

After successful completion of the operation, the system returns to
the operation input status, by printing the solicitation message
'.OPERATION:' on the screen. 

<p></p>

<h3>Ending a SPIDER Session</h3>

If you want to terminate the session, you sign off with the <a
href="man/en.html">EN</a> operation. SPIDER then responds with the
terminal message:

<dl>
<dt></dt>

<dd>SPIDER NORMAL STOP</dd>
</dl>

<h3>Non-Image files used by SPIDER</h3>

SPIDER produces two files as a result of the user session: the <a
href="#file_results">RESULTS file</a> and the <a href=
"#file_log">LOG file</a>
<p>SPIDER also produces and uses <a href="#file_doc">document
files</a>. Document files are keyed, formatted, sequential text
files used to store register contents and misc. numerical data.
Unlike image files, they can be read and edited.</p>

<p></p>

<h4>RESULTS file</h4>

During an interactive session, any listings generated that are too
lengthy to be listed at the terminal are written instead to the
RESULTS file, RESULTS.&lt;Prj&gt;. This file also contains the
protocol of any procedure started interactively. 

<p>During a procedure session, the RESULTS file contains the
protocol of the operation sequence executed, as well as lists
generated by it in their logical order.</p>

<p>The <a href="./man/md.html">'MD'</a> operation with 'VB OFF'
(Verbose Off) can be used to decrease the amount of output from
do-loops and from the 'SD' and 'UD IC' operations. This can
decrease the length of RESULTS files by thousands of lines.</p>

<p></p>

<h4>LOG file</h4>

The LOG file, LOG.&lt;Prj&gt;, is a complete record of everything
that has been typed in by the user during the interactive session.
It is sometimes useful as a record of the session. 

<h4>Document files</h4>

These are keyed, <a href="docfile.html">formatted</a>, sequential
files created by executing the <a href="man/sd.html">SD</a>
operation and certain additional operations. Document files are
used to permanently store the contents of a group of registers
(e.g., shift coordinates, angles, etc.) as realized in different
images (specified by keys). Any subsequent SPIDER run can retrieve
these register values by their keys. 

<p>Document files are also used for communication between Web and
SPIDER. For example the "particle picking" operation in Web creates
a set of document files used by certain operations in SPIDER.</p>

<p>Document files may also be used to define a processing protocol;
switch on and off the execution of procedure files, or
include/exclude images of a series from processing depending on the
result of previous operations.</p>

<h3>Registers</h3>

SPIDER has 100 system registers available, X0-X99. The number of
registers may be increased using the 

<dl>
<dd><a href="man/md.html">MD</a> operation with option "SET REGS".
These registers are used for storing and transferring parameter
values. A register can be filled in one of three ways:</dd>
</dl>

<ol>
<li>as output resulting from an operation.</li>

<li>when used as an index in a do-loop.</li>

<li>by being explicitly set equal to a value or an arithmetic
expression</li>
</ol>

For example, when SPIDER asks '.OPERATION:', the user may type:

<dl>
<dt></dt>

<dd>X10=3.14159</dd>
</dl>

System register X10 will then have the value 3.14159. To examine
the contents of a register, the user need only type the register
he/she wishes to examine. If 'X10' was entered in the above
example, the contents of X10, 3.14159, would be printed on the
screen. 

<p>All registers are set equal to zero at the start of the SPIDER
session.</p>

<p></p>

<h4>Special System Registers</h4>

The first 10 registers, X0-X9, are reserved for SPIDER internal
use, they should not be used for parameter transfer between
operations. 

<p>The contents of special registers X0 and X9 are:</p>

<dl>
<dd>
<table border="0">
<tr valign="top">
<td>X0</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Index</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;most recent value of the DO-loop
index<br>
 &nbsp;&nbsp;&nbsp;&nbsp;(updated after each execution of the <a
href="man/lb.html">LB</a># statement)</td>
</tr>

<tr>
<td></td>
</tr>

<tr valign="TOp">
<td>X9</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Error flag</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; [0 if no error occurred and 1 if an
error occured<br>
&nbsp;&nbsp;&nbsp;&nbsp;in the most recent operation]</td>
</tr>
</table>
</dd>
</dl>

[Registers 1..8 were used in early SPIDER releases for
communicating file parameters but are no longer supported in the
current SPIDER releases!] Registers may appear in <a href=
"#arithmetic">arithmetic expressions</a>, <a href=
"#math_functions">mathematical functions</a>, as <a href=
"#registers_input">input parameters</a>, and as <a href=
"#registers_output">output parameters</a> in operation lines. 

<h4>Registers [or Arithmetic Expressions] as Input Parameters</h4>

Registers or valid arithmetic expressions containing registers may
be used wherever integer or floating point values are solicited by
operations. 

<p></p>

<dl>
<dt>Example 1:</dt>

<dd><a href="man/rt.html">RT</a></dd>

<dd>PIC001</dd>

<dd>PIC002</dd>

<dd>X11</dd>
</dl>

is a valid sequence: the contents of register X11 are interpreted
as a rotation angle.

<p></p>

<dl>
<dt>Example 2:</dt>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC001</dd>

<dd>PIC002</dd>

<dd>X11,X12</dd>
</dl>

Here the contents of X11,X12 are interpreted as components of a
shift vector.

<p></p>

<dl>
<dt>Example 3:</dt>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC001</dd>

<dd>PIC002</dd>

<dd>(X114.3-X10),SIN(X123.14/180.)</dd>
</dl>

Here each arithmetic expression is evaluated first, and the
resulting values are interpreted as components of a shift vector. 

<p>Note that the register content is always a floating point
number. If read in as an integer, the closest integer value is
used, e.g. 4 for 3.8, 3 for 3.2, -4 for -4.25, etc.</p>

<p>Rules for use of registers or expressions as value input:</p>

<ol>
<li>Mixing of registers or expressions with numbers is not allowed
in the input; e.g. X11,5 may not be used in Example 2.</li>

<li>In <a href="#loops">DO-loops</a>, only one register [or
register set, respectively] or one expression [or expression set]
may be used. This set will be applied to each run of the <a href=
"#loops">DO-loop</a>. 

<dl>
<dt>Example:</dt>

<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1
X88=1,5</dd>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC{***X88}</dd>

<dd>OUT{***X88}</dd>

<dd>X11,X12</dd>

<dd><a href="man/lb.html">LB</a>1</dd>
</dl>

This sequence will apply the values of X11,X12 to each run of the
DO-loop. Parentheses around X11,X12 are not needed: if each run of
the DO-loop requires different values, these may be introduced
before the operation by an <a href="man/rr.html">RR</a> operation. 

<p></p>

<dl>
<dt>Example:</dt>

<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1
X88=1,5</dd>

<dd><a href="man/rr.html">RR</a> X11 3.3, 1.5, 6.0, -8.1, 0.0</dd>

<dd>RR X12 -7.5, 5.1, 3.2, -0.4, 8.1</dd>

<dd><a href="man/sh.html">SH</a> F</dd>

<dd>PIC{***X88}</dd>

<dd>OUT{***X88}</dd>

<dd>X11,X12</dd>

<dd><a href="man/lb.html">LB</a>1</dd>
</dl>
</li>
</ol>

<h4>Registers as Output Parameters</h4>

Some operations such as <a href="man/fs.html">FS</a>, and <a href=
"man/pk.html">PK</a> allow the specification of registers to accept
output values. For example, <a href="man/pk.html">PK</a> X11,X12.
After completion of the <a href="man/pk.html">PK</a> operation, the
peak position components are contained in X11,X12.

<p>As an example for a value transfer between operations by
registers, consider the following sequence:</p>

<dl>
<dt></dt>

<dd><a href="man/pk.html">PK</a> X11,X12</dd>

<dd>COR001</dd>

<dd>3</dd>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC001</dd>

<dd>NEW001</dd>

<dd>-X11,-X12</dd>
</dl>

<a href="man/pk.html">PK</a> is an operation that searches for the
peak position in a file, normally a cross-correlation function. It
allows specification of output registers (in the example, X11,X12)
where the peak coordinates are to be stored. These registers may be
used by any subsequent operation as floating point or integer
input, in this example by <a href="man/sh.html">SH</a> (SHift). A
minus sign may be used to invert the sign of the value input from a
register. Note that mixed input will not be accepted where
parameters are solicited. For example:

<dl>
<dt></dt>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC001</dd>

<dd>NEW001</dd>

<dd>-X11,15</dd>
</dl>

will result in an error. In this case, the value 15 should be
introduced into one of the registers prior to the 'SH' operation,
like this:

<dl>
<dt></dt>

<dd>X12=15</dd>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC001</dd>

<dd>NEW001</dd>

<dd>-X11,X12</dd>
</dl>

Three registers, X100-X102, are reserved for keeping track of
certain device-dependent parameters. 

<h4>Saving and Unsaving Registers</h4>

At any given time during the session, the contents of the registers
X0 - X99 can be saved by using the <a href="man/sr.html">SR</a>
operation with the "save" option. Any subsequent operations on
registers do not affect this stored register set. Execution of the
<a href="man/sr.html">SR</a> operation with "unsave" option will
fetch the stored register set into the working register area. 

<p>Any number of register values can be saved in a permanent file
by using the <a href="man/sd.html">SD</a> (Save Document)
operation. A subsequent <a href="man/ud.html">UD</a> operation
issued in a different (or the same) session, refering to the same
document file, retrieves these register values. For details on
saving and unsaving registers, see the <a href="man/sd.html">SD</a>
and <a href="man/ud.html">UD</a> manual chapters.</p>

<p></p>

<h3>SPIDER's Pocket Calculator</h3>

SPIDER incorporates a "pocket calculator" which evaluates <a href=
"#arithmetic">arithmetic operations</a>, <a href=
"#expressions">expressions</a>, and <a href=
"#math_functions">mathematical functions</a>. 

<h4>Arithmetic Operations</h4>

At the operation prompt in SPIDER, the user may type:

<dl>
<dt></dt>

<dd>2*3+5</dd>
</dl>

SPIDER will then respond with '11.0000'.

<p>Available arithmetic operations are:</p>

<dl>
<dd>
<table border="0)">
<tr>
<td>+</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Addition</td>
</tr>

<tr>
<td>-</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Subtraction</td>
</tr>

<tr>
<td>*</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Multiplication</td>
</tr>

<tr>
<td>/</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Division</td>
</tr>

<tr>
<td>**</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Exponentiation</td>
</tr>

<tr>
<td><a href="#math_functions">mathematical function</a></td>
</tr>
</table>
</dd>
</dl>

<h4>Expressions</h4>

Epressions can be used within the SPIDER calculator and also in
certain operations such as <a href="man/if.html">IF</a>, <a href=
"man/if_goto.html">IF...GOTO</a>, and <a href="man/if_then.html">IF
THEN</a>. Expressions are evaluated from left to right with
standard rules of precedence with one important exception:
<b>string of adjacent arithmetic operators are not allowed</b>. In
addition, the user may specify negative numbers and parentheses
just as he/she would normally. For example, if the user typed: 

<dl>
<dt></dt>

<dd>(3*(-2))*(2+6)</dd>
</dl>

SPIDER would respond with '-48.0000'. 

<p>Scientific notation (i.e., 2.3E-4) is allowed.</p>

<p>These operations may be used to manipulate registers as well.
For example, if the user typed the following sequence:</p>

<dl>
<dt></dt>

<dd>X11=4.1</dd>

<dd>2*X11</dd>
</dl>

SPIDER would respond with 8.2000. 

<p>In addition, the user may set a register equal to an expression.
For example, if the user typed:</p>
d966 1
a966 2
<dl>
<dt></dt>
d968 349
a1316 1
<dd>X12=9.6E-2</dd>
a1317 339
<dd>X12=X12+5</dd>
</dl>

SPIDER would store in X12 the value 14.6.

<p>If the user types an expression that does not conform with the
syntax rules of the conversion routines, SPIDER will respond
with:</p>

<dl>
<dt></dt>

<dd>*** ERROR: INVALID ARITHMETIC EXPRESSION</dd>
</dl>

Examples of valid expressions are: 

<dl>
<dt></dt>

<dd>2*(-6)</dd>

<dd>((3+6)*(7*3))**9.1</dd>

<dd>X11=(X12+7)*(X16/X13)</dd>

<dd>X11=3.4e-4*1.0</dd>
</dl>

Examples of invalid expressions are: 

<dl>
<dt></dt>

<dd>X100
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[Register number exceeds 99]</dd>

<dd>X12=(2+3 &nbsp;&nbsp;&nbsp;&nbsp;[Unbalanced parenthesis]</dd>

<dd>(2+3/6)) &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Unbalanced
parenthesis]</dd>

<dd>2*-6 &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Adjacent
arithmetic operators]</dd>

<dd>2*(-6E2) &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[No dot in
the number]</dd>
</dl>

<h4>Mathematical functions</h4>

Available mathematical functions are:

<p></p>

<dl>
<dd>
<table border="0" tr="">
<tr>
<td>PAD(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; next highest power of two of
expression</td>
</tr>

<tr>
<td>SIN(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; sine of expression</td>
</tr>

<tr>
<td>COS(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; cosine of expression</td>
</tr>

<tr>
<td>EXP(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; exponential of expression</td>
</tr>

<tr>
<td>LOG(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; logarithm (Base 10) of expression</td>
</tr>

<tr>
<td>LON(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; natural log of expression</td>
</tr>

<tr>
<td>SQR(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; square root of expression</td>
</tr>

<tr>
<td>INT(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; truncates to integer</td>
</tr>

<tr>
<td>ABS(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; absolute value of expression</td>
</tr>

<tr>
<td>ATA(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; arc tangent of expression (in
degrees)</td>
</tr>

<tr>
<td>ASI(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; arc sine of expression (in
degrees)</td>
</tr>

<tr>
<td>ACO(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; arc cosine of expression (in
degrees)</td>
</tr>

<tr>
<td>TAN(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; tangent of expression</td>
</tr>

<tr>
<td>RAN(&lt;Any register&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random uniform number generator
in the range from 0 to 1.</td>
</tr>

<tr>
<td>RNN(&lt;Any register&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random number generator, normal
distribution (0,1).</td>
</tr>
</table>
</dd>
</dl>

<p>where &lt;Expression&gt; stands for any <a href=
"#expressions">valid math expression</a>.</p>

<p>All trigonometric functions use arguments (or give results) in
degrees.</p>

<p>Examples of valid usage:</p>

<dl>
<dt></dt>

<dd>SIN(4.5/(X5-100.))</dd>

<dd>X10=EXP(-400./X11**2)</dd>

<dd>X15=X14-SIN(45./180.*X91)</dd>

<dd>X16=SIN(45./180.*X91)</dd>

<dd>X15=X14-COS(LON(X16))</dd>

<dd>X16=RAN(X14) ; <em>Value of X14 is not changed nor is it used
for anything!</em></dd>
</dl>

<h3>Comments</h3>

Comment lines may be inserted in procedure files. A comment has the
form: 

<dl>
<dd>; This is a comment</dd>
</dl>

A comment is a non-executable statement that will simply be printed
out in the RESULTS file. 

<p>Comments may also appear on any lines that carry SPIDER
statements. They must be separated from the last character of such
a statement by at least one blank and a semicolon. Example:</p>

<dl>
<dd><a href="man/pd.html">PD</a> ; Now pad input image</dd>

<dd>PIC001 ; From previous window</dd>

<dd>PAD005 ; Output will be used for FT</dd>

<dd>128,128 ; Next power of two dimensions</dd>

<dd>Y ; Use average for padding</dd>

<dd>1,1 ; Top left coord. arbitrary in</dd>

<dd>; this case</dd>
</dl>

<p>Exceptions are statements that specify sets of numbers using
hyphens, e.g., in the input to operation <a href=
"man/as.html">AS</a>: 1-7,15-20. No comment is allowed in this type
of statement.</p>

<h3>DO-Loops</h3>

DO-Loops similar to those in FORTRAN are available in SPIDER. They
are started by the statement: 

<dl>
<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>
&lt;L&gt;&nbsp;&nbsp; &lt;C&gt;=&lt;M&gt;,&lt;N&gt;</dd>
</dl>

and terminated by: 

<dl>
<dd><a href="man/lb.html">LB</a>&lt;L&gt;</dd>
</dl>

where 

<dl>
<dd>
<dl>
<dt>&lt;L&gt;</dt>

<dd>is a one or two digit integer used for distinguishing the
terminating label and the associated DO-loops.</dd>

<dt>&lt;C&gt;</dt>

<dd>is a <a href="#register">register</a> for the DO-loop
index.</dd>

<dt>&lt;M&gt;,&lt;N&gt;</dt>

<dd>are positive-valued integers or registers defining beginning
and end of the DO-loop. Successively, the index &lt;C&gt; will be
assigned the values &lt;M&gt;, &lt;M&gt;+1, &lt;M&gt;+2, ...
&lt;N&gt;. Note that &lt;N&gt; must be greater than &lt;M&gt;.
&lt;M&gt; and &lt;N&gt; must be &lt; 100,000.</dd>
</dl>
</dd>
</dl>

DO-loops may be nested, but they must be distinguished by different
labels and different index registers or symbols. 

<h4>Variable Value Input in DO-Loops</h4>

There are basically two different uses of DO-loops in an image
processing application: 

<ol>
<li>Applying the same sequence of operations with the same
parameter values to different images, distinguished by numbered
file names.</li>

<li>Applying the same sequence of operations with different
parameter values to the same image. 

<p></p>
</li>
</ol>

To serve the first application, variable file names are provided: 

<dl>
<dd>&lt;ABC&gt; {****&lt;C&gt;}</dd>
</dl>

where: 

<dl>
<dd>
<dl>
<dt>&lt;ABC&gt;</dt>
</dl>
</dd>

<dd>is a file prefix, the "*" (s) denote the number of digits for
the substitution and</dd>

<dt>&lt;C&gt; </dt>

<dd>is the DO-loop count register defined above.</dd>
</dl>

To make variable parameter input possible, values may be entered as
arrays, to be picked according to the DO-loop count. Example: 

<dl>
<dd><a href="man/do.html">DO</a></dd>

<dd><a href="man/lb.html">LB</a>1 X10=1,3</dd>

<dd><a href="man/rt.html">RT</a></dd>

<dd>PIC{***X10}</dd>

<dd>OUT{***X10}</dd>

<dd>45. 61. 78</dd>

<dd><a href="man/lb.html">LB</a>1</dd>
</dl>

In this example, <a href="man/rt.html">RT</a> uses the angles 45,
61 and 78 degrees with the pictures PIC001, PIC002, and PIC003,
respectively. 

<p>In the case of operations requiring a pair of numbers (e.g.,
shift coordinates), one pair has to be provided for each run of the
DO-loop. However, if the same floating point number or pair of
numbers should be used for each run of the DO-loop, this may be
specified by using a single number (or pair of numbers) enclosed in
parentheses. Example:</p>

<dl>
<dd><a href="man/do.html">DO</a> LB7 X88=5,9</dd>

<dd><a href="man/sh.html">SH</a></dd>

<dd>ALL00{***X88}</dd>

<dd>SHI00{***X88}</dd>

<dd>(15,8)</dd>

<dd><a href="man/lb.html">LB</a>7</dd>
</dl>

In this case, the shift parameter values 15,8 are applied to each
image, starting with ALL005 and ending with ALL009.

<p></p>

a1318 170
<h2><a name="procedures">Running SPIDER in Procedure Mode</a></h2>

<h3>Procedure Control Files</h3>

Procedure control files are user-created files containing sequences
of operations and parameter values. Procedure files can have any
alphanumeric name up to 80 characters but the name must begin with
a letter. Instead of taking the input from the terminal, SPIDER
uses the control sequence as it appears in the procedure file. All
output that would normally appear on the terminal is directed to
the RESULTS file, and no LOG file is created. 

<p>To invoke a procedure when SPIDER asks '.OPERATION:', the user
types an "at" sign <i>@@</i> followed by the name of the procedure
file without its extension.</p>

<dl>
<dd>.OPERATION: @@ALIGN10</dd>
</dl>

When calling a procedure from a another procedure file, the user
puts the parameters (if any) solicited by the procedure behind the
calling statement in the same order as they appear in the called
procedure file. For example: 

<dl>
<dt>Let procedure AD1 contain the following:</dt>

<dd><a href="man/ad.html">AD</a></dd>

<dd>PIC001</dd>

<dd>?SECOND PICTURE TO BE ADDED?</dd>

<dd>*</dd>

<dd><a href="man/re.html">RE</a></dd>

<dt>and let procedure B01 contain the following:</dt>

<dd><a href="man/rt.html">RT</a></dd>

<dd>WOW001</dd>

<dd>OUT001</dd>

<dd>180.00</dd>

<dd>@@AD1</dd>

<dd>OUT001</dd>

<dd><a href="man/en.html">EN</a></dd>
</dl>

Then '.OPERATION: @@B01' will cause WOW001 to be rotated by 180
degrees, and stored in OUT001. OUT001 will then be added to PIC001.
SPIDER will ultimately return to the level of the calling procedure
file, and terminate the session. Procedures allow the user to
specify parameters at run time. the procedure requires parameter
values in the order they have been <a href="#new">internally
defined when the procedure was written</a>.

<p>When called in the interactive mode, the procedure will solicit
the required parameters from the terminal. Solicitation messages
enclosed by question marks will appear in the order they are
defined in the <a href="#new">procedure operation
sequence.</a>.</p>

<p>Procedures may be called from:</p>

<ol>
<li>another procedure</li>

<li>an interactive session</li>
</ol>

If called from the interactive mode, when a 'RE' operation is
encountered, control will return to the terminal. If called from
another procedure file, control will be passed to the operation
following the procedure call. 

<p></p>

<h3>Execution Rules</h3>

Standard procedures are contained in the <a href="../proc/">SPIDER
system's procedure directory</a> with the extension <i>'spi'</i>.
These procedures form the standard procedure library for SPIDER. 

<p>For any procedure call, SPIDER will first scan the user's
directory. If a procedure file under the given name is found, then
this procedure becomes effective in the call. If no such procedure
is found, SPIDER will attempt to locate the given file with a
<i>.spi</i> extension in the SPIDER system's procedure
directory.</p>

<p></p>

<h3>Writing New Procedures</h3>

To create a procedure file the user must: 

<ol>
<li>Replace any parameter in the procedure file that the user
wishes to specify at run time by a solicitation message enclosed in
question marks, e.g., ?PICTURE TO BE ADDED? (See below).</li>

<li>Replace the <a href="man/en.html">EN</a> operation at the end
by a <a href="man/re.html">RE</a> operation.</li>
</ol>

At execution time, the user-specified solicitation messages are the
only messages that will appear on the terminal. 

<p>For example, if the following procedure was called from the
interactive mode:</p>

<dl>
<dd><a href="man/ad.html">AD</a></dd>

<dd>PIC001</dd>

<dd>?PICTURE TO BE ADDED?</dd>

<dd>*</dd>

<dd><a href="man/re.html">RE</a></dd>
</dl>

SPIDER would print '?PICTURE TO BE ADDED?' at the terminal and wait
for the user to specify the file to be added to PIC001. It would
then add the two pictures, and upon encountering the <a href=
"man/re.html">RE</a> operation, will return to the interactive
mode. 

<p>One restriction exists on the definition of procedures: The
parameter to be specified at run time may not be a operation. This
restriction is imposed because each operation may produce a
different number of subsequent solicitations.</p>

<h4>Symbolic Parameters</h4>

Frequently, one encounters the situation where more same
information is required in the procedure more than once. For
example, the following procedure definition solicits the name of
the image to be aligned twice from the user: 

<p></p>

<dl>
<dd>; PROCEDURE TO ALIGN IMAGE WITH REFERENCE <br>
<br>
<p></p>
</dd>

<dd><a href="man/pd.html">PD</a></dd>

<dd>?UNALIGNED IMAGE? &lt;unaligned&gt;</dd>

<dd>ACF001</dd>

<dd>128,128</dd>

<dd>N</dd>

<dd>33,33 <br>
<br>
<p></p>
</dd>
d1320 9
a1328 1
<dd><a href="man/pd.html">PD</a></dd>
a1329 436
<dd>?REFERENCE IMAGE?&lt;reference&gt;</dd>

<dd>ACF002</dd>

<dd>128,128</dd>

<dd>N</dd>

<dd>33,33</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/ac.html">AC</a></dd>

<dd>ACF001</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/ac.html">AC</a></dd>

<dd>ACF002</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/or2.html">OR 2</a> X10</dd>

<dd>ACF001</dd>

<dd>ACF002</dd>

<dd>5</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/rt.html">RT</a></dd>

<dd>&lt;unaligned&gt; ; symbolic parameter that was set above</dd>

<dd>?OUTPUT IMAGE?&lt;output&gt;</dd>

<dd>X10</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/rt.html">RE</a></dd>
</dl>

<br>
<br>
<p>SPIDER allows the user to tie a symbolic parameter label to any
procedure solicitation message (marked by a ?...? ). Later this
symbolic parameter label can be used in place of the repeated
solicitation message. The format for the label is: &lt;label&gt;,
where <i>label</i> may be any string. Note that the &lt;&gt;
brackets are required here to indicate a symbolic parameter
label!</p>

<p>In the example for a procedure definition given above, the
second occurrence of ?IMAGE TO BE ALIGNED? was be replaced by
&lt;unaligned&gt;, since this is the label assigned at the first
occurance of the ?IMAGE TO BE ALIGNED? use. A run-time
specification for ?IMAGE TO BE ALIGNED? will then be automatically
applied to the input.</p>

<p></p>

<h4>Variable Symbolic Parameters</h4>

Symbolic parameters that represent file names may be modified at
run time by attaching a register. The specified digits of the
filename are then replaced by new digits according to the current
value in the register. 

<p></p>

<dl>
<dt>Example --- 1:</dt>

<dd>; PR1 -- procedure to list file statistics</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/fr.html">FR</a></dd>

<dd>?ENTER FIRST IMAGE?&lt;1&gt;</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1
X88=2,10</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/fs.html">FS</a></dd>

<dd>&lt;1&gt;X88</dd>

<dd>N</dd>

<dd><a href="man/lb.html">LB</a>1</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/re.html">RE</a></dd>

<dd><br>
<br>
<p></p>
</dd>

<dt>Calling sequence:</dt>

<dd>@@PR1</dd>

<dd>PIC001</dd>
</dl>

<p>In the <a href="#loops">DO-loop</a>, PIC001 will then be
replaced by PIC002, PIC003, ... , PIC010.</p>

<dl>
<dt>Example --- 2:</dt>

<dd><br>
<br>
<p></p>
</dd>

<dd>; PR2 --procedure to list file statistics</dd>

<dd><a href="man/rr.html">RR</a>X15</dd>

<dd>?PIC OUTPUT FILE NUMBER?&lt;picout&gt;</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/fi.html">FI</a></dd>

<dd>PIC{***X15}</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/re.html">RE</a></dd>

<dd><br>
<br>
<p></p>
</dd>

<dt>Calling sequence:</dt>

<dd>@@PR2</dd>

<dd>5</dd>
</dl>

In this example, the operation <a href="man/fi.html">FI</a> is
applied to PIC005.

<dl>
<dt>Example --- 3:</dt>

<dd>;PR3</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/fr.html">FR</a></dd>

<dd>?ENTER ANY IMAGE OF SERIES? &lt;1&gt;</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/rr.html">RR</a> X10</dd>

<dd>?PICK OUT FILE NUMBER?&lt;2&gt;</dd>

<dd><a href="man/fs.html">FS</a></dd>

<dd>&lt;1&gt;X10</dd>

<dd><br>
<br>
<p></p>
</dd>

<dt>Calling sequence:</dt>

<dd>@@PR3</dd>

<dd>PIC003</dd>

<dd>20.</dd>
</dl>

In this example, the operation <a href="man/fs.html">FS</a> is
applied to PIC020. 

<h4>Symbolic Parameters in DO-Loops</h4>

Symbolic parameters cause a transfer of the whole input value at
the time of the execution, not just the transfer of a single
number. It is therefore possible to use a symbolic reference in <a
href="#loops">DO-loops</a>. 

<dl>
<dt>Example:</dt>

<dd><br>
<br>
<p></p>
</dd>

<dd>;PR4 -- procedure file</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1
X88=1,5</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC{***X88}</dd>

<dd>OUT{***X88}</dd>

<dd>?ENTER SHIFT COMPONENTS?&lt;shifts&gt;</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PAD{***X88}</dd>

<dd>SCR{***X88}</dd>

<dd>&lt;shifts&gt;</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/lb.html">LB</a>1</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/re.html">RE</a></dd>

<dd><br>
<br>
<p></p>
</dd>

<dt>Calling sequence:</dt>

<dd>@@PR4</dd>

<dd>5,1 4,3 8,5 10,1 0,0</dd>
</dl>

In this example, each pair of components is applied to both <a
href="man/sh.html">SH</a> operations; i.e. 5,1 for I=1, 4,3 for
I=2, etc. See <a href="#loops">DO-loops</a>. 

<h3>Using Registers in Nested Procedures</h3>

Registers, in calling procedure control files, are independent of
registers within the procedures called. However, if values need to
be transferred from the calling procedure to the procedure called,
either <a href="#argument">argument transfer</a> or the operation
<a href="man/rr.html">RR</a> may be used. 

<h3>Argument Transfer</h3>

Procedure calls may contain up to 12 register arguments if these
are matched by a defining argument sequence in the procedure
called. The defining argument sequence must appear as the first
line of the procedure (before any comments), and must be of the
form: 

<dl>
<dt></dt>

<dd>[X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,...]</dd>
</dl>

where X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,... are registers
appearing in the procedure. The calling sequence must have the same
number of registers, and must be of the form: 

<dl>
<dt></dt>

<dd>
@@&lt;PROCNAME&gt;[X&lt;M1&gt;,X&lt;M2&gt;,X&lt;M3&gt;,...].</dd>
</dl>

Register values are passed in both directions; i.e., from the upper
to the lower level and vice-versa. 

<dl>
<dt></dt>

<dd>X20=1</dd>

<dd>X30=5</dd>

<dd>X40=-4</dd>

<dd>@@PROC[X20,X30,X40]</dd>
</dl>

will result in the values: 

<dl>
<dt></dt>

<dd>X20=2</dd>

<dd>X30=-20</dd>

<dd>X40=-2</dd>
</dl>

if the procedure is defined as follows: 

<dl>
<dt></dt>

<dd>[X10,X11,X12]</dd>

<dd>X10=X10*2</dd>

<dd>X11=X11*X12</dd>

<dd>X12=X12/2</dd>

<dd><a href="man/re.html">RE</a></dd>
</dl>

<h3>Procedure calls in DO-Loops</h3>

An important restriction applies if a procedure is called within a
<a href="#loops">DO-loop</a>. Specifically, if different parameter
values are to be used in the different runs of the <a href=
"#loops">DO-loop</a>, they must not be entered as a string of
numbers:

<dl>
<dt></dt>

<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1
I=1,5</dd>

<dd>PS1</dd>

<dd>6.5 7.3 8.1 4.9 3.3</dd>

<dd><a href="man/lb.html">LB</a>1</dd>
</dl>

will result in the value 6.5 being repeatedly used by procedure
PS1. To use different values, the numbers must be successively
stored in a register which transfers them to PS1 (See also <a href=
"#loops">DO-loops</a>):

<dl>
<dt></dt>

<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1
I=1,5</dd>

<dd><a href="man/rr.html">RR</a> X20</dd>

<dd>6.5 7.3 8.1 4.9 3.3</dd>

<dd>PS1</dd>

<dd>X20</dd>

<dd><a href="man/lb.html">LB</a>1</dd>
</dl>

a1330 11
<h2><a name="memory">Memory Allocation &amp;
Multiprocessors</a></h2>

In SPIDER most memory intensive operations now make use of run time
allocation (and deallocation) of necessary memory. 

<p>SPIDER contains directives which can be used by <i>OpenMP</i>
parallelizing Fortran compilers available on SGI, DEC, Linux, and
NT multiprocessor machines. The <a href="./man/md.html">MD</a>
operation with 'SET MP' can be used to limit the number of
processors used during SPIDER execution on such machines.</p>
a1331 3
<p></p>

<hr>
d1333 9
a1341 9

Unix systems have queues available for scheduling execution of
batch jobs and methods of placing a process in the background. Some
old notes on this are contained in: <a href=
"batch-unix_doc.html">batch-unix_doc.html.</a> 

<hr>
<p><small>Source: user_doc.html &nbsp;&nbsp;&nbsp; Last update: 9
Jul. 2004 &nbsp;&nbsp;&nbsp; ArDean Leith</small></p>
a1343 1

@


1.50
log
@reverted to pre-xhtml as links broken
@
text
@d1 1
d4 1
a4 1

a5 1

a6 1

d10 6
a15 6
<p>
This Guide covers issues relating to the syntax, conventions,
and running of SPIDER.  It also has a section that discusses 
<li><a href="#procedures">procedures</a> 
and how to write them. <a href="errors.html">Error
handling</a>, specialized <a href="documents.html">techniques and tools</a>,
d17 80
a96 3
<a href="installation.html">distribution and instaSollation</a>, and
<a href="release.html">release notes</a>,
are discussed elsewhere.</p>
d98 9
a106 2
<p>
This guide is organized under the following headings:
d108 6
a113 45
<li><a href="#interactive">Running SPIDER Interactively</a>
	<ul>
	<li><a href="#starting">Starting a Session</a></li>
	<li><a href="#cmd_line">Optional Command Line Parameters</a></li>
	<li><a href="#input_cmd">The Operation Input Status</a></li>
	<li><a href="#input_info">User-Solicited Information</a></li>
            <ul>
            <li><a href="#file_names">File Names</a></li>
            <li><a href="#file_handling">File Handling</a></li>
            <li><a href="#file_opening">File Opening</a></li>
            <li><a href="#file_image">Image File Storage</a></li>
            <li><a href="#file_inline">Inline Files</a></li>
            <li><a href="#file_stack">Image Stack Files</a></li>
            <li><a href="#file_inline_stack">Inline Stack Files</a></li>
            <li><a href="#indexed_stack">Indexed Stack Files</a></li>
            <li><a href="#params">Parameter Values</a></li>
            </ul>
	<li><a href="#completion">Completion of an Operation</a></li>
	<li><a href="#ending">Ending a SPIDER Session</a></li>
	<li><a href="#file_nonimage">Non-Image files used by SPIDER</a></li>
            <ul>
            <li><a href="#file_results">RESULTS File</a></li>
            <li><a href="#file_log">LOG File</a></li>
            <li><a href="#file_doc">Document Files</a></li>
            </ul>
	<li><a href="#registers">Registers</a>
            <ul>
            <li><a href="#registers_special">Special System Registers</a></li>
            <li><a href="#registers_input">Registers [or Arithmetic Expressions] as Input Parameters</a></li>
            <li><a href="#registers_output">Registers as Output Parameters</a></li>
            <li><a href="#registers_saving">Saving and Unsaving Registers</a></li>
            </ul>
	<li><a href="#pocketcalc">SPIDER's Pocket Calculator</a></li>
            <ul>
            <li><a href="#arithmetic">Arithmetic Operations</a>
            <li><a href="#expressions">Expressions</a>
            <li><a href="#math_functions">Mathematical Functions</a>
            </ul>

	<li><a href="#comments">Comments</a></li>
	<li><a href="#loops">DO-Loops</a></li>
            <ul>
            <li><a href="#loops_variable">Variable Value Input in DO-Loops</a></li>
            </ul>
	</ul>
d116 14
a129 14
	<ul>
	<li><a href="#control">Procedure Control Files</a></li>
	<li><a href="#execution">Execution Rules</a></li>
	<li><a href="#new">Writing New Procedures</a></li>
            <ul>
            <li><a href="#symbolic">Symbolic Parameters</a></li>
            <li><a href="#symbolic_var">Variable Symbolic Parameters</a></li>
            <li><a href="#symbolic_loops">Symbolic Parameters in DO-Loops</a></li>
            </ul>
	<li><a href="#proc_registers">Using Registers in Nested Procedures</a></li>
            	(or Procedures called from Procedure Files)
	<li><a href="#argument">Argument Transfer</a></li>
	<li><a href="#proc_loops">Procedure calls in DO-Loops</a></li>
	</ul>
d131 4
a134 1
<li><a href="#memory">Memory Allocation & Multiprocessors</a></li>
d136 2
a137 2
<li><a href="#unix">Submitting Batch Jobs on UNIX systems</a> </li>
</ul> 
d139 15
d155 914
d1070 1
a1070 5
<p> SPIDER can be run either interactively or in a procedure mode.
Interactive mode means that user input on the terminal is solicited by
messages appearing on  the  screen.  In the procedure mode, control
input is taken from a procedure control file where it has to appear in
exactly the same sequence as in an interactive session.
d1072 344
a1415 1
<h2><a name="interactive">Running SPIDER Interactively</a></h2>
d1417 1
a1417 860
 We call a session the entire sequence of operations  from
the  start  of  SPIDER  to  the  execution  of  the 
<a href="man/en.html">EN</a> (ENd) operation.

<a name="starting"><h3>Starting The Session</h3></a>
    	Log on in your directory, then start SPIDER by typing:
            <dl><dt>
            <dd> spider
            <dd> &nbsp;&nbsp;&nbsp;or
            <dd> spider &lt;Prj&gt;/&lt;Dat&gt;
            </dl>
            <br><p>

	SPIDER will then print some introductory information including:
             <dl><dt>
             <dd>The version number and issue date for this version.
             </dl>

	If the PROJECT/DATA EXTENSION is not given on the command line,
	SPIDER will then respond with:
             <dl><dt>
	     <dd>.ENTER PROJECT/DATA EXTENSION:
	     &lt;Prj&gt;/&lt;Dat&gt; 
             </dl> 

	The  project  extension &lt;Prj&gt;  consists  of  a  three
	letter sequence, e.g,  'GLS', is used to identify procedure
	files, the LOG  file, and the  RESULTS  file  by attaching this
	sequence to the file names as an extension.<p>

             The data extension &lt;Dat&gt; is optional.  It consists of a  three
        letter sequence, e.g., 'SCI', and is used to identify the data
        files by attaching this sequence to  data  file  names  as  an
        extension.<p>    

             For example, an image file specified as <i>'ACF001'</i>  during
        the  SPIDER  session will have as a full filename <i>'ACF001.SCI'</i>
        if the above data extension <i>'SCI'</i> is used.<p>   

             A file created as an output file of  a  SPIDER  operation
        will  have  the  &lt;Dat&gt;  extension  attached to its SPIDER file
        name.  If no data extension is given, the system uses  the  project
        extension as data extension.<p>                     

             The set of files having the same data  extension  can  be
        thought  of  as  a library.  Within one session of SPIDER, all
        image files accessed and created belong to the same library.<p>  

             [Note, however, that the new extension operation 
        <a href="man/nc.html">NC</a> (New  Code)
        may  be  used  within  the  SPIDER run to redefine the project
        extension/data extension.]<p>       

             If more than one SPIDER session is being run in the same
        directory,  different project extensions should be used.<p>              

             Each input line typed by the user is echoed by SPIDER  on
        the subsequent line so that typing errors become apparent.<p>   

             Each line produced by SPIDER that requires input is
        preceded by a period, e.g., '.INPUT FILE:'.<p>

<a name="cmd_line"><h3><dt>Optional Command Line Parameters</dt></h3></a>
            SPIDER can accept optional command line parameters
         in addition to the PROJECT/DATA EXTENSION.  
            <dl>
            <dt>procedure</dt>
            <dd> Initial procedure to be run when starting SPIDER. 
                 The @@ sign is necessary now.</dd>
            <dt> Result file version number</dt>
            <dd> Result file version number version number to be 
                 used by SPIDER run.  This will superceed value
                 determined by incrementing current version number</dd>
            <dt> Register assignments.</dt>
            <dd> Inital register assignments when starting SPIDER.
                 These assignments will be inherited by any 
                 inital proceedure. </dd>
            </dl>

            <dl>
            <dt>An example of a SPIDER run with optional command line 
                parameters follows:</dt>
            
            <dd><i> spider prj/dat @@procname 17 x11=3 x12=4</i></dd>
            </dl>  

<a name="input_cmd"><h3>The Operation Input Status</h3></a>
	The  system  now  asks:
            <dl><dt>
            <dd>.OPERATION:
            </dl>
	All   available operations are specified  by two or more
        letter operations, e.g. <a href="man/li.html">LI</a>
        for LIsting selected rows of an image.  A list of the operations
        and their meanings is available in the
	<a href="operations_doc.html">index of operations</a> which
        is part of this SPIDER documentation.  You may want to
        obtain a hardcopy listing of this and post it next to the
	terminal for reference.]<p>

<a name="input_info"><h3>User-Solicited Information</h3></a>
             After a operation is entered, additional information needed
        to carry out the operation is solicited from the user.  This
        information may be grouped into the following
        categories:  (a) File information on input and output (mostly
        image) files, and  (b) Values of parameters.  These types of
        input are described in what follows.

<a name="file_names"><h4>File  Names</h4></a>
             These  are  sequences of alphanumeric characters,   
        normally  (but not  necessarily) of the form &lt;ABC&gt;&lt;###&gt; 
        where &lt;ABC&gt;  is any sequence of three or more
        characters  (the  prefix),  and  &lt;###&gt;  is three or more digit
        number.  If this convention is followed, files can be accessed
        under  control  of  SPIDER  <a href="#loops">DO-loops</a>.  The file name
        (without extension) can have  up  to  79  characters  and  the
        prefix  can  contain  directory
        information. For example,
         <i>../usr/people/myself/A12BCDE001</i> is acceptable.<p>

	     SPIDER can substitute for any portion of the file name at
	run time using a numerical value contained in <A
	HREF="#registers">registers</a>. Any text entered as part of a 
        filename which is enclosed
	between "{" and "}" brackets is presumed to be part of a
	desired substitution request.  <p>

               To substitute a register value into a file 
        name, use the sequence <i> {****X&lt;##&gt} </i> where the "*" string
        denotes the number of digits for the substitution and the "##" denote
        the register whose contents are to be substituted in place of
        the astericks.  Any register from <i> 0...99 </i> may be used for
        substitution.  E.g. if the the file name entered is <i> ABC6{***X11}
        </i> and the run time content of register X11 is the value
        <i>34</i>, then the resulting filename is: <i> ABC6034</i>.
        This mechanism can also be used inside a 
        <a href="#loops">DO-loop</a> to substitute 
        the current DO-loop index register value into a filename. 
        <p>

	There may be any number of substitution strings within a single
	filename, e.g. the following is a valid filename: <i>
	/usr/dir{*X33}/abcd{****X34} </i>, if the value in register X33
	only contains a single digit and the value in X34 has less than
	5 digits.  If the value to be substituted contains more digits
	than the number of astericks specified an <b> error will occur
	</b>.  <p> The less powerfull and more ambiguous <A
	HREF="oldfilenamesub.html">old formalism </a> for filename
	substitution is no longer available. <p>

             The full file name is the above character string  amended
        with  .&lt;Dat&gt;,  where  &lt;Dat&gt;  is the data extension specified at the
        beginning of the session.<p>

             The use of the  character  '*'  as  the  first  character
        (subsequent  ones are ignored) of the file name terminates the
        current operation and makes the system ready to accept  a  new
        operation.   Some  operations  with implied DO-loops continue to
        solicit input files until the escape character '*' is used  as
        a file name.  Examples include <a href="man/ad.html">AD</a> and  
	<a href="man/su.html">SU</a>.

<a name="file_handling"><h4>File Handling</h4></a>  
             The file whose  name  is  typed  in  is either an input
        or an output file.<p>

             Input files are assumed to exist and contain data used as
        input  to the operation.  The fact that a file is input to the
        operation does not necessarily exclude changes  to  the  file;
        An example of operations that changes the file is 
        <a href="man/ppll.html">PP LL</a> (Put Lines in image from 
        doc file) . <p>

             If an operation requires more than one input file,  these
        are  distinguished in the solicitation messages as 'INPUT1',
        'INPUT2', etc.     <p>

             In the case of the Cross-Correlation operation 
	(<a href="man/cc.html">CC</a>), one  of  the
        input  files  is used as a reference file, and is solicited as
        'REFERENCE FILE'.   <p>

             Output files can be either files that already  exist,  or
        files  that  are to be created under the name specified by the
        user.   Already  existing files having the same name are
        overwritten without a warning message.  <p>

             The dimensions of the output file are  dependent  on  the
        operation, and are either copied from the input file (e.g
        <a href="man/sh.html">SHift</a>,  <a href="man/rt.html">RoTate</a>)
	or  are solicited from the user (e.g.
        <a href="man/ip.html">InterPolate</a>, <a href="man/wi.html">WIndow</a>).

<a name="file_opening"><h4>File Opening</h4></a>  
             After each input file or output file specification,  
        SPIDER will attempt to open the file.  After the file is opened, 
        a statement is written on the terminal which has the following 
        form:<dl><dt>
                  <dd>&lt;ABC&gt;&lt;###&gt; /&lt;Title&gt;<br>
                  (&lt;T&gt;) &lt;NSAM&gt; &lt;NROW&gt; &lt;NSLICE&gt; 
                  CREATED &lt;Date&gt;  AT
                  &lt;Time&gt; &lt;D&gt; HEADER BYTES: &lt;BYTES&gt; <p>

        	<dd>where:
                <dl>
		<dt>&lt;ABC&gt;&lt;###&gt;
                <dd>is the file name.<p>

        	<dt>&lt;Title&gt;
                <dd>is the title previously entered by the user.<p>

		<dt>&lt;T&gt;
                <dd>is the data type code and has the
                    following values:<dl>
                    <dt><dd>
                    'O2' for mixed radix -2 Fourier data 
                        corresponding to odd-length real image data.<br>
                    'E2 for mixed radix -2 Fourier data 
                         corresponding to even-length real image data.<br>
                    'O3' for mixed radix -2 Fourier data 
                         corresponding to odd-length real volume data.<br>
                    'E3 for mixed radix -2 Fourier data corresponding 
                          to even-length real volume data.<br>
                    'R2' for 2D Real image data.<br>
                    'R3' for 3d Real volume data.<br>

		    'S2' for stacked 2D real image data.<br> 
                    'S3' for stacked 3D real volume data.<br> </dl>

		    'I2' for indexed, stacked 2D real image data.<br> 
                    'I3' for indexed, stacked 3D real volume data.<br> </dl>

		    The type code in the file label is used to prevent
		    operations inconsistent with the data format from
		    being carried out (e.g., Real data cannot be
		    inversely Fourier transformed)<p>

		<dt>&lt;NSAM&gt;,&lt;NROW&gt;,&lt;NSLICE&gt; 
                <dd>is the number of sampling points (columns),
                    number of rows, and number of slices in the
                    image.  In the case of Fourier transforms, 
                    the numbers correspond to those of the 
                    transformed image.<p>

     		<dt>&lt;Date&gt;,&lt;Time&gt; 
                <dd>is the date and time of file creation.<p>
     		<dt>&lt;D&gt; 
                <dd>is the disposition of the file.  The
                    following codes are used:<dl><dt>
                    <dd>'N' if file is newly created<br>
                        'O' if file is old
	           </dl><p>

     		<dt>&lt;BYTES&gt;
                <dd>is the number of bytes in the SPIDER header for
                    this file<p>
		</dl>
	</dl>
        In case of abnormal termination of the session, the  user  should
        carefully check the opening information of all files that were
        open when the program failed.  This will tell him/her  if  the
        image  format  was  correct, and if the correct image file has
        been accessed.

<a name="file_image"><h4>Image File Storage</h4></a>
	     The exact format in  which  images and volumes  are stored
	on disk along with their headers, and the contents of the
	headers is detailed <a href="formats.html#image">elsewhere</a>.
	The only operation that  accesses the image or volume files by
	explicit record numbers is <a href="man/li.html">LI</a>
	(LIst). This operation is useful for dumping image contents 
        or for debugging purposes.

<a name="file_inline"><h4>Inline Files</h4></a>
        Many SPIDER uses involve the creation of temporary image
        files which undergo further processing later in the
	session.  Computer access to these files is faster when they
	are kept in memory instead of being written out to disk.  A
	inline file is referred to as:  <i>_#</i>.  Where <i>_#</i>
	is one to three underscore symbol(s) followed by one or two
	digits.  Any such file is stored in memory as an "inline file".
	Ninety-nint inline files are available and they can hold any size
	image. An example of a filename that denotes an inline file
	number <i>2</i> is: <i>_2</i>.

<a name="file_stack"><h4>Image Stacks</h4></a>
     Multiple images can be stored within a single SPIDER "stack
     file".  A stack file differs from a SPIDER volume in that each
     image keeps its own full header. A stacked image is referred to
     as:  &lt;ABC&gt;&lt;###&gt;@@&lt;###&gt; where &lt;ABC&gt; is a
     sequence of alphanumeric characters and &lt;###&gt; is a sequence
     of digits. The digits afer the '@@' symbol represent the image
     number within a stack.  Stacked images can be used anywhere a
     normal SPIDER file name would be used.  An example of a filename
     that denotes image number <i>4056</i> inside stack file
     <i>fil001</i> is: <i> fil001@@4056</i>.

<a name="file_inline_stack"><h4>Inline Stack Files</h4></a>
     Inline stack files are available and should be useful on 
     machines with large physical memory. An inline stacked image is 
     referred  to as: &lt;_#&gt;@@&lt;###&gt;.  Where &lt;_#&gt; is 
     one to three underscore symbol(s) followed by a one or two digits 
     and
      <i>###</i> is a sequence of digits. The digits afer the '@@'
     symbol represent the image number within a stack.
      Inline stacked images can be used anywhere a normal
     SPIDER file name would be used.  In this case, the first
     time a particular inline stack is referenced you will be asked for
     the total number of images in the stack. Alternatively, a stack can
     be created using the <a href="./man/ms.html">MS</a>  (Make Stack) 
     operation.
     An example of a filename that denotes image number <i>4056</i>
     inside inline stack number two is: <i>_2@@4056</i>.
 
<a name="indexed_stack"><h4>Indexed Stack Files</h4></a>
     Both disk based and inline stack files are available with
     an index and may be  used like normal SPIDER stack files. An
     indexed stack may be useful if you have a sparsely populated large
     stack.  In an indexed stack there is an extra set of records 
     following the overall header that stores the indices.  Unlike a
     normal stack there is no space wasted for a missing image in
     the stack.  For indexed stacks the first
     time a particular indexed stack is referenced you will be asked for
     the maximum number of any image in the index.  For indexed inline
     stacks this number is usually different
     from the maximum number of images that can be held in the stack.
     An indexed stack 
     can only be created using the <a href="./man/msi.html">MS I</a> or
    <a href="./man/cpi.html">CP I</a> operations.
 
<a name="params"><h4>Parameter Values</h4></a>  
             Values of parameters solicited by an operation can be real, 
        integer, or alphanumeric.  Alphanumeric parameters are  used  to  
        specify options (e.g., (S)ine or (C)osine). <p>

             Real and integer parameters are read in without
        formatting  rules;  they can be at any place on the line,
        separated by commas or any number of blanks, and spread  out
        over any number of (non-blank) lines.  They are checked for
        correct type and possible typing errors.  Such errors and type
        inconsistencies result in an error message:<dl><dt>      

                  <dd>.BAD INPUT PARAMETER(S).  RE-ENTER:
		</dl>
        The user then has to re-enter the entire line containing the
        error.  For example, in <a href="man/ip.html">IP</a> (InterPolate), 
	the user enters the dimensions of the output file:<dl><dt>     
                  <dd>41 50.0 
		 </dl>    
        where only integer input is allowed.  After the error message,
        he has to re-enter:<dl><dt>              
                 <dd>41 50
		</dl>
             However, if he had entered the two  parameter  values  on
        two separate lines:<dl><dt>                                     
                  <dd>41
                  <dd>50
		</dl>
        then the error message would relate to the last line only, and
        it is this line only which he has to re-enter by typing:<dl><dt>      
                  <dd>50         
		</dl>

<a name="completion"><h3>Completion of an Operation</h3></a>
	    After successful completion of the operation, the  system
        returns   to   the  operation  input  status,  by  printing  the
        solicitation message '.OPERATION:' on the screen.    <p>

<a name="ending"><h3>Ending a SPIDER Session</h3></a>
             If you want to terminate the session, you sign  off  with
        the  <a href="man/en.html">EN</a> operation. 
	SPIDER then responds with the terminal message:<dl><dt>  
                  <dd>SPIDER NORMAL STOP              
		</dl>

<a name="file_nonimage"><h3>Non-Image files used by SPIDER</h3></a>
             SPIDER produces  two  files  as  a  result  of  the  user
        session:  the <a href="#file_results">RESULTS file</a> and the 
	<a href="#file_log">LOG file</a><p>

             SPIDER also produces and uses 
         <a href="#file_doc">document files</a>. Document files
        are keyed, formatted, sequential text files  used  to  store  
        register  contents and misc. numerical data.   Unlike 
        image files, they can be read and edited. <p>
            
<a name="file_results"><h4>RESULTS file</h4></a>  
	    During an interactive  session,  any  listings  generated
        that  are too lengthy to be listed at the terminal are written
        instead to the RESULTS file, RESULTS.&lt;Prj&gt;. This file also
        contains the protocol of any procedure started interactively. <p>

             During a procedure session, the  RESULTS  file  contains  the
        protocol  of  the  operation sequence executed, as well as lists
        generated by it in their logical order. <p>

             The <a href="./man/md.html">'MD'</a> operation with 'VB OFF' 
        (Verbose Off) can be used to decrease the amount of output
        from do-loops and from the 'SD' and 'UD IC' operations.
        This can decrease the length of RESULTS files by thousands of 
        lines. <p>

<a name="file_log"><h4>LOG file</h4></a> 
             The  LOG  file,  LOG.&lt;Prj&gt;, is a complete record of
        everything that has been typed in by the user during the
        interactive session.  It is sometimes useful as a record  of
        the session. 
 
<a name="file_doc"><h4>Document files</h4></a>
            These are keyed, <a href="docfile.html">formatted</a>, 
        sequential files  created  by
        executing  the  <a href="man/sd.html">SD</a> operation and certain 
        additional operations.  Document files are used to  permanently
        store  the  contents  of  a  group  of  registers (e.g., shift
        coordinates, angles, etc.) as  realized  in  different  images
        (specified  by  keys).  Any subsequent SPIDER run can retrieve
        these register values by their keys. <p>

             Document files are also used for communication between Web
        and SPIDER.  For example the "particle picking" operation in Web
        creates a set of document files used by certain operations in
        SPIDER. <p>

             Document files may also be used to define  a  processing
        protocol;  switch  on  and  off  the  execution  of 
        procedure files, or include/exclude images of  a  series  from
        processing depending on the result of previous operations. 

<a name="registers"><h3>Registers</h3></a>

             SPIDER has 100 system registers available, X0-X99. The
        number of registers may be increased using the 
		    <dd><a href="man/md.html">MD</a> operation with
        option "SET REGS". These registers
        are  used for storing and transferring parameter values.  
        A register can be filled in one of three ways:
	<OL>
        <li>as output resulting from an operation.
        <li>when used as an index in a do-loop.
        <li>by being explicitly set equal to a value or an
                      arithmetic expression
	</OL>
        For example, when SPIDER  asks  '.OPERATION:',  the  user  may
        type:<dl><dt>
                <dd>X10=3.14159
		</dl>
        System register X10 will then  have  the  value  3.14159.   To
        examine  the  contents  of a register, the user need only type
        the register he/she wishes to examine.  If 'X10'  was  entered
        in  the  above example, the contents of X10, 3.14159, would be
        printed on the screen. <p>

             All registers are set equal to zero at the start  of  the
        SPIDER session. <p>

<a name="registers_special"><h4>Special System Registers</h4></a>
             The first 10 registers, X0-X9, are reserved for SPIDER
        internal use, they should not be used for parameter transfer 
        between operations.     <p>

	The contents of special registers X0 and X9 are:<dl><dd>
		<table border=0>
                <tr valign=top><td>  X0 </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Index </td>
                <td>&nbsp;&nbsp;&nbsp;&nbsp;most recent value of the DO-loop index <br>
                 &nbsp;&nbsp;&nbsp;&nbsp;(updated
                      after each execution of the <a href="man/lb.html">LB</a># statement)</td><tr>

                 <TR VALIGN=TOp><td>  X9 </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Error flag</td><td>&nbsp;&nbsp;&nbsp;&nbsp;  [0 if no error occurred and
                                     1 if an error occured <br>&nbsp;&nbsp;&nbsp;&nbsp;in the most
                                     recent operation]</td><tr>
                </TABLE>
		</dl>
        [Registers 1..8 were used in early SPIDER
        releases for communicating file parameters but are no longer 
        supported in the current SPIDER releases!]

           Registers may appear in <a href="#arithmetic">arithmetic expressions</a>,
	<a href="#math_functions">mathematical functions</a>,  
	as <a href="#registers_input">input  parameters</a>, and as  
	<a href="#registers_output">output parameters</a> in
        operation lines.
	
<a name="registers_input"><h4>Registers [or Arithmetic Expressions] as Input Parameters</h4></a>

	     Registers  or  valid  arithmetic  expressions  containing
	registers  may  be  used  wherever  integer  or floating point
	values are solicited by operations. <p> 
                <dl><dt>Example 1:
		    <dd><a href="man/rt.html">RT</a> 
                    <dd>PIC001
		    <dd>PIC002 
                    <dd>X11
	</dl> 
        is a  valid  sequence:   the  contents  of  register
	X11  are interpreted as a rotation angle.<p> 
                 <dl><dt>Example 2:
		    <dd><a href="man/sh.html">SH</a> 
                    <dd>PIC001
		    <dd>PIC002 
                    <dd>X11,X12
	</dl> Here the contents of X11,X12 are interpreted as
	components  of a shift vector.<p> 
                 <dl><dt>Example 3:
		    <dd><a href="man/sh.html">SH</a> 
                     <dd>PIC001
		    <dd>PIC002 
                    <dd>(X114.3-X10),SIN(X123.14/180.)
	</dl> 
        Here each arithmetic expression is evaluated  first,
	and  the resulting  values  are  interpreted  as  components of
	a shift vector. <p>

             Note that the register content is always a floating point
        number.   If  read in as an integer, the closest integer value
        is used, e.g.  4 for 3.8, 3 for 3.2, -4 for -4.25, etc.  <p>

        Rules for use of registers or expressions as value input:    
		<OL>
        	<li> Mixing of registers or  expressions  with  numbers  is  not
        	allowed  in  the  input;  e.g.   X11,5  may not be used in
        	Example 2.                            

        	<li>  In  <a href="#loops">DO-loops</a>,  only one register  [or register
                set, respectively] or one  expression [or expression 
                set] may be used.  This set will be applied to each 
                run of the <a href="#loops">DO-loop</a>.     

        	<dl><dt>Example:  
		  	<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 X88=1,5
                  	<dd><a href="man/sh.html">SH</a>
                  	<dd>PIC{***X88}
                  	<dd>OUT{***X88}
                  	<dd>X11,X12
                  	<dd><a href="man/lb.html">LB</a>1 
		</dl>
        	This sequence will apply the values of X11,X12 to each run of
        	the  DO-loop.   Parentheses around X11,X12 are not needed:  if
        	each run of the DO-loop requires different values,  these  may
        	be introduced before the operation by an <a href="man/rr.html">RR</a> operation. <p>

        	<dl><dt>Example:  
		  	<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 X88=1,5
                  	<dd><a href="man/rr.html">RR</a> X11 3.3, 1.5, 6.0, -8.1, 0.0
                        <dd>  RR  X12  -7.5,  5.1, 3.2, -0.4, 8.1
                  	<dd><a href="man/sh.html">SH</a> F
                  	<dd>PIC{***X88}
                  	<dd>OUT{***X88}
                  	<dd>X11,X12
                  	<dd><a href="man/lb.html">LB</a>1
       		</dl>                                   
		</OL>
<a name="registers_output"><h4>Registers as Output Parameters</h4></a>
             Some operations such as <a href="man/fs.html">FS</a>, 
	and  <a href="man/pk.html">PK</a>  allow  the
        specification  of  registers  to  accept  output  values.  For
        example, <a href="man/pk.html">PK</a> X11,X12.  After completion 
	of the <a href="man/pk.html">PK</a>  operation,
        the peak position components are contained in X11,X12.<p> 

             As an example for a value transfer between operations  by
        registers, consider the following sequence:<dl><dt>
                  <dd><a href="man/pk.html">PK</a> X11,X12
                  <dd>COR001
                  <dd>3
                  <dd><a href="man/sh.html">SH</a>
                  <dd>PIC001
                  <dd>NEW001
                  <dd>-X11,-X12
	          </dl>
        <a href="man/pk.html">PK</a> is  an  operation that searches for the peak  position
        in  a  file, normally a cross-correlation function.  It allows
        specification of output registers (in  the  example,  X11,X12)
        where  the peak coordinates are to be stored.  These registers
        may be used by any subsequent operation as floating  point  or
        integer  input, in this example by <a href="man/sh.html">SH</a> (SHift).  A minus sign
        may be used to invert the sign  of  the  value  input  from  a
        register.      

             Note  that  mixed  input  will  not  be  accepted   where
        parameters are solicited.  For example:<dl><dt>
                  <dd><a href="man/sh.html">SH</a>
                  <dd>PIC001
                  <dd>NEW001
                  <dd>-X11,15
		  </dl>
        will result in an error.  In this case, the value 15 should be
        introduced  into  one  of  the  registers  prior  to  the 'SH'
        operation, like this:<dl><dt>
                  <dd>X12=15
                  <dd><a href="man/sh.html">SH</a>
                  <dd>PIC001
                  <dd>NEW001
                  <dd>-X11,X12
                  </dl>                     
             Three  registers, X100-X102, are reserved for keeping  
        track of certain device-dependent parameters. 

<a name="registers_saving"><h4>Saving and Unsaving Registers</h4></a>
             At any given time during the session, the 
        contents of the registers X0 - X99 can be saved by using the 
        <a href="man/sr.html">SR</a>
        operation with the "save"  option.   Any subsequent  operations on 
        registers do not affect this stored register set. Execution of the
         <a href="man/sr.html">SR</a> operation 
        with "unsave" option will fetch the stored register set into the 
        working register area. <p>      

             Any number of register values can be saved in a permanent file 
        by using the <a href="man/sd.html">SD</a> (Save Document) operation. A subsequent 
	<a href="man/ud.html">UD</a> operation 
        issued in a different (or the same) session, refering  to  the  same 
        document file, retrieves these register values. For details on saving
        and unsaving registers, see the <a href="man/sd.html">SD</a> and 
        <a href="man/ud.html">UD</a> manual chapters.  <p>   

<a name="pocketcalc"><h3>SPIDER's Pocket Calculator</h3></a>
	     SPIDER  incorporates  a  "pocket  calculator"  
	which evaluates <a href="#arithmetic">arithmetic operations</a>,
	<a href="#expressions">expressions</a>, and
	<a href="#math_functions">mathematical functions</a>. 

<a name="arithmetic"><h4>Arithmetic Operations</h4></a>
	At the operation prompt in SPIDER, the  user  may
        type:<dl><dt>   
                   <dd>2*3+5
		   </dl>
        SPIDER will then respond with '11.0000'.<p>

	Available arithmetic operations are:
                  <dl><dd>
                  <TABLE BORDER=0)>
                  <tr><td>+ </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Addition</td></tr>       
                  <tr><td>- </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Subtraction</td></tr>        
                  <tr><td>* </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Multiplication</td></tr>       
                  <tr><td>/ </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Division</td></tr>            
                  <tr><td>** </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Exponentiation</td></tr>
		  <tr><td><a href="#math_functions">mathematical function</td></tr>       	
		  </TABLE></dl>

<a name="expressions"><h4>Expressions</h4></a>
        Epressions can be used within the SPIDER calculator and
        also in certain operations such as 
        <a href="man/if.html">IF</a>,  
        <a href="man/if_goto.html">IF...GOTO</a>, and 
        <a href="man/if_then.html">IF THEN</a>. 
 
	Expressions are evaluated from left to right with
        standard rules of precedence with one important exception:
        <b>string of adjacent arithmetic operators are not allowed</b>.
        In addition, the user may
        specify negative numbers and parentheses just as he/she would
        normally.  For example, if the user typed:
                  <dl><dt>    
                  <dd>(3*(-2))*(2+6)
		 </dl>
        SPIDER would respond with '-48.0000'. <p>
        Scientific notation (i.e., 2.3E-4) is allowed. <p>

	These operations may be used to manipulate registers as well.
        For example, if the user typed the following sequence:
                  <dl><dt>
                  <dd>X11=4.1
                  <dd>2*X11
		  </dl>
        SPIDER would respond with 8.2000.  <p>  

	In addition, the user may set a register equal to an expression.  
        For example, if the user typed:
                  <dl><dt>
                  <dd>X12=9.6E-2
                  <dd>X12=X12+5  
		 </dl>
        SPIDER would store in X12 the value 14.6.<p>      

             If the user types an expression  that  does  not  conform
        with  the syntax rules of the conversion routines, SPIDER will
        respond with:
                   <dl><dt> 
                   <dd>  *** ERROR: INVALID ARITHMETIC EXPRESSION
		   </dl>
        Examples of valid expressions are:
                  <dl><dt>
                  <dd>2*(-6)
                  <dd>((3+6)*(7*3))**9.1
                  <dd>X11=(X12+7)*(X16/X13)
                  <dd>X11=3.4e-4*1.0
		 </dl>
        Examples of invalid expressions are:
                  <dl><dt>
                  <dd>X100          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Register number exceeds 99]
                  <dd>X12=(2+3      &nbsp;&nbsp;&nbsp;&nbsp;[Unbalanced parenthesis]
                  <dd>(2+3/6))      &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Unbalanced parenthesis]      
                  <dd>2*-6          &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Adjacent arithmetic operators]      
                  <dd>2*(-6E2)        &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[No dot in the number]
		  </dl>

<a name="math_functions"><h4>Mathematical functions</h4></a>

	Available mathematical functions are:<p>
            <dl><dd>
            <table border="0")
	    tr><td>PAD(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; next highest power of two of expression</td></TR	
            <tr><td>SIN(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; sine of expression</td></tr>
            <tr><td>COS(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; cosine of expression</td></tr>
            <tr><td>EXP(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; exponential of expression</td></tr>
            <tr><td>LOG(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; logarithm (Base 10) of expression</td></tr>
            <tr><td>LON(&lt;Expression&gt;)   </td><td>&nbsp;&nbsp;&nbsp;&nbsp; natural log of expression</td></tr>
            <tr><td>SQR(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; square root of expression</td></tr>
            <tr><td>INT(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; truncates to integer</td></tr>
            <tr><td>ABS(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; absolute value of expression</td></tr>
            <tr><td>ATA(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; arc tangent of expression (in degrees)</td></tr>
            <tr><td>ASI(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; arc sine of expression (in degrees)</td></tr>
            <tr><td>ACO(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; arc cosine of expression (in degrees)</td></tr>
            <tr><td>TAN(&lt;Expression&gt;)   </td><td>&nbsp;&nbsp;&nbsp;&nbsp; tangent of expression</td></tr>
            <tr><td>RAN(&lt;Any register&gt;)   </td><td>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random uniform number generator in the range from 0 to 1.</td></tr>
            <tr><td>RNN(&lt;Any register&gt;)   </td><td>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random number generator, normal distribution (0,1).</td></tr>
  	    </table></dl><p>

            where  &lt;Expression&gt;  stands for any   
            <a href="#expressions">valid math expression</a>.<p>
            All trigonometric functions use arguments (or give results)
            in degrees.<p>

	Examples of valid usage:<dl><dt>
		<dd>SIN(4.5/(X5-100.))
		<dd>X10=EXP(-400./X11**2)		
		<dd>X15=X14-SIN(45./180.*X91)
		<dd>X16=SIN(45./180.*X91)
		<dd>X15=X14-COS(LON(X16))
		<dd>X16=RAN(X14)    ; <EM> Value of X14 is not changed nor is
                                      it used for anything!</EM>

		</dl>

<a name="comments"><h3>Comments</h3></a>

             Comment  lines  may  be  inserted  in procedure  files.  
              A comment has the form:
                <dl>
                <dt></dt>
		<dd>; This is a comment             </dd>
		</dl>
        A comment is a non-executable statement that  will  simply  be
        printed out in the RESULTS file.     <p>

             Comments may also appear on any lines that  carry  SPIDER
        statements.  They must be separated from the last character of
        such a statement by  at  least  one  blank  and  a  semicolon.
        Example:
                <dl><dt></dt>
		<dd><a href="man/pd.html">PD</a> ; Now pad input image </dd> 
		<dd>PIC001	; From previous window            </dd> 
		<dd>PAD005	; Output will be used for FT      </dd>
		<dd>128,128	; Next power of two dimensions    </dd>
		<dd>Y		; Use average for padding         </dd>
		<dd>1,1		; Top left coord. arbitrary in    </dd>
		<dd>		; this case                       </dd>
		</dl>
         <p>           

        Exceptions are statements that specify sets of  numbers  using
        hyphens, e.g., in the input to operation <a href="man/as.html">AS</a>:  1-7,15-20.
        No comment is allowed in this type of statement. 

<a name="loops"><h3>DO-Loops</h3></a>

             DO-Loops similar to those in FORTRAN are available in
        SPIDER.  They are started by the statement:
                <dl><dt></dt>
                <dd><a href="man/do.html">DO</a> 
                    <a href="man/lb.html">LB</a>
                    &lt;L&gt;&nbsp;&nbsp; &lt;C&gt;=&lt;M&gt;,&lt;N&gt;  </dd>
		</dl>
        and terminated by:
                <dl><dt></dt>
                <dd><a href="man/lb.html">LB</a>&lt;L&gt;  </dd>
                </dl>
       where  
                <dl> 
		<dl>
                <dt>&lt;L&gt;</dt>
                <dd>is a one or two digit integer used for distinguishing 
                    the terminating label and the associated 
                    DO-loops.</dd>
         
                <dt>&lt;C&gt;</dt>
                <dd>is a <a href="#register">register</a> 
                  for the DO-loop index.</dd>

                <dt>&lt;M&gt;,&lt;N&gt; 
                <dd>are positive-valued integers or registers 
                      defining beginning and end of the DO-loop. 
                      Successively, the index &lt;C&gt; will be assigned 
                      the values &lt;M&gt;, &lt;M&gt;+1, &lt;M&gt;+2, ... &lt;N&gt;.
                      Note that &lt;N&gt; must be greater than &lt;M&gt;.  
                       &lt;M&gt; and &lt;N&gt; must be &lt; 100,000.</dd>
		</dl>
		</dl>
             DO-loops may be nested, but they must be distinguished by
        different labels and different index registers or symbols. 

<a name="loops_variable"><h4>Variable Value Input in DO-Loops</h4></a>
             There are basically two different uses of DO-loops in an image  
        processing application:
                <OL>
		<li>
                  Applying the same sequence of  operations  with  the
                  same parameter values to different images,
                  distinguished by numbered file names.
                <li>
                  Applying  the  same  sequence  of  operations   with
                  different parameter values to the same image. <p>
		</OL>
             To serve the first application, variable file  names  are
        provided:
                  <dl><dt></dt>
                  <dd>&lt;ABC&gt; {****&lt;C&gt;}  </dd>
                  </dl>
        where:
                  <dl><dt></dt>
                     <dl>   
                     <dt>&lt;ABC&gt;                         </dd>
                     <dd>is a file prefix,  the "*" (s) denote the
                     number of digits for the substitution and
                     <dt>&lt;C&gt;                           </dd>
                     <dd>is the DO-loop count register defined above. </dd> 
                     </dl>
		  </dl>
             To make variable parameter input possible, values may  be
        entered  as  arrays,  to  be  picked  according to the DO-loop
        count.  Example:
                  <dl><dt></dt>
                  <dd><a href="man/do.html">DO</a>          </dd>
                      <a href="man/lb.html">LB</a>1 X10=1,3 </dd>
                  <dd><a href="man/rt.html">RT</a>          </dd>
                  <dd>PIC{***X10}                           </dd>
                  <dd>OUT{***X10}                           </dd>
                  <dd>45.  61.  78                          </dd>
                  <dd><a href="man/lb.html">LB</a>1         </dd>
		  </dl>
        In this example, <a href="man/rt.html">RT</a> 
        uses the angles 45, 61  and  78  degrees
        with the pictures PIC001, PIC002, and PIC003, respectively.   <p>

             In the case of operations requiring  a  pair  of  numbers
        (e.g.,  shift  coordinates),  one  pair has to be provided for
        each run of the DO-loop.  However, if the same floating  point
        number  or  pair of numbers should be used for each run of the
        DO-loop, this may be specified by using a  single  number  (or
        pair of numbers) enclosed in parentheses.  Example:
                  <dl><dt></dt>
                  <dd><a href="man/do.html">DO </a> LB7 X88=5,9  </dd>
                  <dd><a href="man/sh.html">SH</a>               </dd>
                  <dd>ALL00{***X88}                              </dd>
                  <dd>SHI00{***X88}                              </dd>
                  <dd>(15,8)                                     </dd>
                  <dd><a href="man/lb.html">LB</a>7              </dd>
		  </dl>
        In this case, the shift parameter values 15,8 are  applied  to
        each image, starting with ALL005 and ending with ALL009.<p>
d1419 1
a1419 1
<HR>
d1422 163
a1584 1
<a name="control"><h3>Procedure Control Files</h3></a>
d1586 4
a1589 349
             Procedure control files are user-created files containing
        sequences of operations and parameter values.  Procedure files
        can have any alphanumeric name up to 80 characters but the
        name must begin with a letter.  Instead of taking
        the input from the terminal, SPIDER uses the control sequence
        as it appears in the procedure file.  All output that would
        normally appear on the terminal is directed to the RESULTS
        file, and no LOG file is created. <p>       

             To invoke a procedure when SPIDER asks
	'.OPERATION:', the  user  types an "at" sign <i>@@</i> 
        followed by the name of the procedure file without its extension.  

        <dl><dt></dt>
         <dd>.OPERATION: @@ALIGN10
         </dl>

       When calling a procedure from a another procedure file, the user puts the
        parameters  (if  any)  solicited  by  the procedure behind the
        calling statement in the same order  as  they  appear  in  the
        called procedure file.  For example:
                <dl>
		<dt>Let procedure AD1 contain the following: </dt>
		<dd><a href="man/ad.html">AD</a>             </dd>
		<dd>PIC001                                   </dd>
		<dd>?SECOND  PICTURE  TO   BE ADDED?         </dd>
		<dd>*                                        </dd>
		<dd><a href="man/re.html">RE</a>             </dd>
		<dt>and let procedure B01 contain the following: </dt>
		<dd><a href="man/rt.html">RT</a>             </dd>
		<dd>WOW001                                   </dd>
		<dd>OUT001                                   </dd>
		<dd>180.00                                   </dd>
		<dd>@@AD1                                      </dd>
		<dd>OUT001                                   </dd>
		<dd><a href="man/en.html">EN</a>             </dd>
		</dl>
	Then '.OPERATION:  @@B01' will cause WOW001 to be rotated by  180  degrees,  and
        stored  in  OUT001.   OUT001  will then be added to PIC001.  SPIDER
        will ultimately return to the level of the calling procedure file, and terminate
        the session.               
  
             Procedures allow the user to specify  parameters  at  run
        time. the
        procedure requires parameter values in  the  order  they  have
        been  <a href="#new">internally  defined  when the procedure was written</a>.<p>                                     

             When called in the interactive mode, the  procedure  will
        solicit the required parameters from the terminal.

              Solicitation messages enclosed  by  question  marks  will
        appear  in the order they are defined in the <a href="#new">
	procedure operation sequence.</a>.<p>

        Procedures may be called from:
            <OL>
            <li>another procedure
            <li>an interactive session
            </OL>

             If called from the interactive mode, when a 'RE'  operation
        is  encountered,  control  will  return  to  the terminal.  If
        called from another procedure file, control will be passed  to
        the operation following the procedure call. <p>          


<a name="execution"><h3>Execution Rules</h3></a>
	
             Standard  procedures  are  contained  in the 
        <a href="../proc/">SPIDER system's procedure directory</a> 
        with the extension <i>'spi'</i>.  
        These procedures form the standard procedure library for SPIDER. <p>

             For any procedure call, SPIDER will first scan the user's
        directory.   If  a procedure file under the given name
        is found, then this procedure becomes effective in  the  call.
        If  no  such  procedure is found, SPIDER will attempt to
        locate the given file with a <i>.spi</i> extension in the SPIDER 
        system's procedure directory. <p>

<a name="new"><h3>Writing New Procedures</h3></a>
        To create a procedure file the user must:
	     <OL>
            <li>Replace any parameter in the procedure file that the  user
            wishes  to  specify  at run time by a solicitation message
            enclosed in question marks, e.g., ?PICTURE  TO  BE  ADDED?
            (See below).

            <li>Replace the <a href="man/en.html">EN</a> operation at 
	    the end by a <a href="man/re.html">RE</a> operation.
	    </OL>

	At  execution  time,  the   user-specified   solicitation
        messages  are  the  only  messages  that  will  appear  on the
        terminal.            <p>

             For example, if the following procedure was called from
        the interactive mode:
            <dl><dt></dt>
            <dd><a href="man/ad.html">AD</a>
            <dd>PIC001
            <dd>?PICTURE TO BE ADDED?
            <dd>*
            <dd><a href="man/re.html">RE</a>
            </dl>
        SPIDER would print '?PICTURE TO BE ADDED?' at the terminal and
        wait  for  the user to specify the file to be added to PIC001.
        It would then add the two pictures, and upon encountering  the
        <a href="man/re.html">RE</a> operation, will return to the interactive mode.
        <p>
        One restriction exists on the definition of procedures:  
            The parameter to be specified at run time may not be a
            operation.  This restriction is imposed because each operation
            may produce a different number of subsequent
            solicitations.
	    

<a name="symbolic"><h4>Symbolic Parameters</h4></a>
             Frequently, one encounters  the situation where more 
        same information is required in the procedure more than once. For 
        example, the following procedure definition solicits the name 
        of the image to be aligned twice from the user:
            <p>
            <dl>
            <dd>; PROCEDURE TO ALIGN IMAGE WITH REFERENCE
            </p><p>
            <dd><a href="man/pd.html">PD</a>
            <dd>?UNALIGNED IMAGE? &lt;unaligned&gt;
            <dd>ACF001
            <dd>128,128
            <dd>N
            <dd>33,33
            </p><p>
            <dd><a href="man/pd.html">PD</a>
            <dd>?REFERENCE IMAGE?&lt;reference&gt; </dd>
            <dd>ACF002</dd>
            <dd>128,128</dd>
            <dd>N</dd>
            <dd>33,33</dd>
            </p><p>
            <dd><a href="man/ac.html">AC</a></dd>
            <dd>ACF001</dd>
            </p><p>
            <dd><a href="man/ac.html">AC</a></dd>
            <dd>ACF002</dd>
            </p><p>
            <dd><a href="man/or2.html">OR 2</a> X10</dd>
            <dd>ACF001</dd>
            <dd>ACF002</dd>
            <dd>5</dd>
            </p><p>
            <dd><a href="man/rt.html">RT</a></dd>
            <dd>&lt;unaligned&gt;  ; symbolic parameter that was set above</dd>
            <dd>?OUTPUT IMAGE?&lt;output&gt;</dd>
            <dd>X10</dd>
            </p><p>
            <dd><a href="man/rt.html">RE</a></dd>
            </dl>
            </p><p>
        SPIDER allows the user to  tie a symbolic parameter
        label to any procedure solicitation message (marked  by  a  ?...? ).  
        Later this symbolic parameter label can be used in place of the 
        repeated solicitation message.  The format for the label is: &lt;label&gt;, 
        where <i> label </i> may be any string. Note that the &lt;&gt; 
        brackets are required here to indicate a symbolic parameter label! <p>

             In the example for a procedure definition given above,
        the second occurrence of ?IMAGE TO BE ALIGNED? was
        be replaced by &lt;unaligned&gt;, since this is the label assigned at the first 
        occurance of the ?IMAGE TO BE ALIGNED? use.
        A run-time specification for ?IMAGE TO BE ALIGNED? will then
        be automatically applied to the input. <p>

<a name="symbolic_var"><h4>Variable Symbolic Parameters</h4></a>
 
             Symbolic parameters that represent file names may be modified 
        at run time by attaching a register. The specified  digits of the 
        filename are then replaced by new digits 
        according to the current value in the register.
        <p>
        <dl>
        <dt>Example --- 1:</dt>
            <dd>; PR1 -- procedure to list file statistics</dd>
            </p><p>
            <dd><a href="man/fr.html">FR</a></dd>
            <dd>?ENTER FIRST IMAGE?&lt;1&gt;</dd>
            </p><p>
            <dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 X88=2,10</dd>
            </p><p>
            <dd><a href="man/fs.html">FS</a></dd>
            <dd>&lt;1&gt;X88</dd>
            <dd>N</dd>
            <dd><a href="man/lb.html">LB</a>1</dd>
            </p><p>
            <dd><a href="man/re.html">RE</a></dd>
            </p><p>
        <dt>Calling sequence:</dt>
            <dd>@@PR1</dd>
            <dd>PIC001</dd>
	</dl>
        <p>

        In the <a href="#loops">DO-loop</a>,  PIC001 will then be replaced by PIC002,
        PIC003, ...  , PIC010.<dl>

        <dt>Example --- 2:</dt>
            </p><p>
            <dd>; PR2 --procedure to list file statistics</dd>
            <dd><a href="man/rr.html">RR</a>X15
            <dd>?PIC OUTPUT FILE NUMBER?&lt;picout&gt;</dd>
            </p><p>
            <dd><a href="man/fi.html">FI</a></dd>
            <dd>PIC{***X15}</dd>
            </p><p>
            <dd><a href="man/re.html">RE</a></dd>
            </p><p>
        <dt>Calling sequence:</dt>
            <dd>@@PR2</dd>
            <dd>5</dd>
	</dl>
        In this example, the operation <a href="man/fi.html">FI</a> is applied to PIC005.<dl>

        <dt>Example --- 3:</dt>
            <dd>;PR3</dd>
            </p><p>
            <dd><a href="man/fr.html">FR</a></dd>
            <dd>?ENTER ANY IMAGE OF SERIES? &lt;1&gt;</dd>
            </p><p>
            <dd><a href="man/rr.html">RR</a> X10</dd>
            <dd>?PICK OUT FILE NUMBER?&lt;2&gt;</dd>
            <dd><a href="man/fs.html">FS</a></dd>
            <dd>&lt;1&gt;X10</dd>
            </p><p>
                   
        <dt>Calling sequence:</dt>
            <dd>@@PR3</dd>
            <dd>PIC003</dd>
            <dd>20.</dd>
        </dl>          
        In this example, the operation <a href="man/fs.html">FS</a> is applied to PIC020.

<a name="symbolic_loops"><h4>Symbolic Parameters in DO-Loops</h4></a>
             Symbolic  parameters cause a transfer of the whole input value 
        at the time of the execution, not just the transfer of a single  
        number.  It is therefore possible to use a symbolic reference in 
        <a href="#loops">DO-loops</a>.

        <dl>
        <dt>Example:</dt>
            </p><p>
            <dd>;PR4 -- procedure file</dd>
            </p><p>
            <dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 X88=1,5</dd>
            </p><p>
            <dd><a href="man/sh.html">SH</a></dd>
            <dd>PIC{***X88}</dd>
            <dd>OUT{***X88}</dd>
            <dd>?ENTER SHIFT COMPONENTS?&lt;shifts&gt;</dd>
            </p><p>
            <dd><a href="man/sh.html">SH</a></dd>
            <dd>PAD{***X88}</dd>
            <dd>SCR{***X88}</dd>
            <dd>&lt;shifts&gt;</dd>
            </p><p>
            <dd><a href="man/lb.html">LB</a>1</dd>
            </p><p>
            <dd><a href="man/re.html">RE</a></dd>
            </p><p>
        <dt>Calling sequence:</dt>
            <dd>@@PR4</dd>
            <dd>5,1 4,3 8,5 10,1 0,0</dd>
        </dl>

        In this example, each pair of components is applied to both
        <a href="man/sh.html">SH</a> operations; i.e.   
        5,1 for I=1, 4,3 for I=2, etc. See
        <a href="#loops">DO-loops</a>.

<a name="proc_registers"><h3>Using Registers in Nested Procedures
        </h3></a>
        Registers, in calling procedure  control  files,
        are  independent  of  registers  within the procedures called.
        However, if values need to be  transferred  from  the  calling
        procedure  to  the  procedure called, either 
	<a href="#argument">argument transfer</a>
        or the operation <a href="man/rr.html">RR</a> may be used.       

<a name="argument"><h3>Argument Transfer</h3></a>
             Procedure calls may contain up to 12 register arguments if
        these  are  matched  by  a  defining  argument sequence in the
        procedure called.  The defining argument sequence must  appear
        as the first line of the procedure (before any comments), 
        and must be of the form:
            <dl><dt>
            <dd>[X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,...]
            </dl>
        where X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,...  are registers  appearing  in  the
        procedure.   The calling sequence must have the same number of
        registers, and must be of the form:
            <dl><dt>
            <dd>@@&lt;PROCNAME&gt;[X&lt;M1&gt;,X&lt;M2&gt;,X&lt;M3&gt;,...].
            </dl>
        Register values are passed in both  directions;
        i.e.,   from  the  upper  to  the  lower  level  and
        vice-versa.
            <dl>
            <dt>
            <dd>X20=1
            <dd>X30=5
            <dd>X40=-4
            <dd>@@PROC[X20,X30,X40]
            </dl>
        will result in the values:
            <dl><dt>
            <dd>X20=2
            <dd>X30=-20
            <dd>X40=-2
            </dl>
        if the procedure is defined as follows:
            <dl><dt>
            <dd>[X10,X11,X12]
            <dd>X10=X10*2
            <dd>X11=X11*X12
            <dd>X12=X12/2
            <dd><a href="man/re.html">RE</a>
            </dl>
<a name="proc_loops"><h3>Procedure calls in DO-Loops</h3></a>
           An important restriction applies if a procedure
        is   called  within  a  <a href="#loops">DO-loop</a>.   Specifically,  if
        different parameter values are to  be  used  in  the
        different  runs  of  the  <a href="#loops">DO-loop</a>,  they must not be
        entered as a string of numbers:<dl><dt>
            <dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 I=1,5
            <dd>PS1
            <dd>6.5 7.3 8.1 4.9 3.3
            <dd><a href="man/lb.html">LB</a>1
            </dl>
        will result in the value 6.5 being  repeatedly  used
        by  procedure  PS1.   To  use  different values, the
        numbers must be successively stored  in  a  register
        which  transfers  them  to  PS1 
	(See also <a href="#loops">DO-loops</a>):<dl><dt>
            <dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 I=1,5
            <dd><dd><a href="man/rr.html">RR</a> X20
            <dd>6.5 7.3 8.1 4.9 3.3
            <dd>PS1
            <dd>X20
            <dd><a href="man/lb.html">LB</a>1
            </dl>
d1591 438
d2030 5
d2036 5
a2040 9
<h2><a name="memory">Memory Allocation & Multiprocessors</a></h2>
    In SPIDER most memory intensive operations now make use of run time
    allocation (and deallocation) of necessary memory. <p>

    SPIDER contains directives which can be used by <i>OpenMP</i>  parallelizing
    Fortran compilers available on SGI, DEC, Linux, and NT multiprocessor machines.  The 
    <a href="./man/md.html">MD</a>  operation with 'SET MP' can be used to 
    limit the number of processors used during SPIDER execution on such machines. 
    <p>
d2042 2
d2045 1
d2047 8
a2054 10
<h2><a name="unix">Submitting Batch Jobs on UNIX systems</a></h2>
    Unix systems have queues available for scheduling execution of
    batch jobs and methods of placing a process in the background.  Some
    old notes on this are contained in:  
    <a href="batch-unix_doc.html">batch-unix_doc.html.</a>

<hr> <p><small>
Source:      user_doc.html  &nbsp;&nbsp;&nbsp;  
Last update: 9 Jul. 2004  &nbsp;&nbsp;&nbsp;
ArDean Leith  </small></p>
d2057 1
@


1.49
log
@xhtml
@
text
@a0 1
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
d3 1
a3 1
<meta name="generator" content="HTML Tidy, see www.w3.org">
d5 1
d7 1
d11 10
a20 90
<p>This Guide covers issues relating to the syntax, conventions,
and running of SPIDER. It also has a section that discusses</p>

<ul class="noindent">
<li><a href="#procedures">procedures</a> and how to write them. <a
href="errors.html">Error handling</a>, specialized <a href=
"documents.html">techniques and tools</a>, details on <a href=
"formats.html">file formats</a>, and <a href=
"installation.html">distribution and instaSollation</a>, and <a
href="release.html">release notes</a>, are discussed elsewhere.<br>
<br>
</li>
</ul>

<p>This guide is organized under the following headings:</p>

<ul>
<li><a href="#interactive">Running SPIDER Interactively</a> 

<ul>
<li><a href="#starting">Starting a Session</a></li>

<li><a href="#cmd_line">Optional Command Line Parameters</a></li>

<li><a href="#input_cmd">The Operation Input Status</a></li>

<li><a href="#input_info">User-Solicited Information</a></li>

<li style="list-style: none">
<ul>
<li><a href="#file_names">File Names</a></li>

<li><a href="#file_handling">File Handling</a></li>

<li><a href="#file_opening">File Opening</a></li>

<li><a href="#file_image">Image File Storage</a></li>

<li><a href="#file_inline">Inline Files</a></li>

<li><a href="#file_stack">Image Stack Files</a></li>

<li><a href="#file_inline_stack">Inline Stack Files</a></li>

<li><a href="#indexed_stack">Indexed Stack Files</a></li>

<li><a href="#params">Parameter Values</a></li>
</ul>
</li>

<li><a href="#completion">Completion of an Operation</a></li>

<li><a href="#ending">Ending a SPIDER Session</a></li>

<li><a href="#file_nonimage">Non-Image files used by
SPIDER</a></li>

<li style="list-style: none">
<ul>
<li><a href="#file_results">RESULTS File</a></li>

<li><a href="#file_log">LOG File</a></li>

<li><a href="#file_doc">Document Files</a></li>
</ul>
</li>

<li><a href="#registers">Registers</a> 

<ul>
<li><a href="#registers_special">Special System Registers</a></li>

<li><a href="#registers_input">Registers [or Arithmetic
Expressions] as Input Parameters</a></li>

<li><a href="#registers_output">Registers as Output
Parameters</a></li>

<li><a href="#registers_saving">Saving and Unsaving
Registers</a></li>
</ul>
</li>

<li><a href="#pocketcalc">SPIDER's Pocket Calculator</a></li>

<li style="list-style: none">
<ul>
<li><a href="#arithmetic">Arithmetic Operations</a></li>

<li><a href="#expressions">Expressions</a></li>
d22 2
a23 9
<li><a href="#math_functions">Mathematical Functions</a></li>
</ul>
</li>

<li><a href="#comments">Comments</a></li>

<li><a href="#loops">DO-Loops</a></li>

<li style="list-style: none">
d25 45
a69 6
<li><a href="#loops_variable">Variable Value Input in
DO-Loops</a></li>
</ul>
</li>
</ul>
</li>
d72 14
d87 1
a87 3
<li style="list-style: none">
<ul>
<li><a href="#control">Procedure Control Files</a></li>
d89 2
a90 1
<li><a href="#execution">Execution Rules</a></li>
d92 1
a92 15
<li><a href="#new">Writing New Procedures</a></li>

<li style="list-style: none">
<ul>
<li><a href="#symbolic">Symbolic Parameters</a></li>

<li><a href="#symbolic_var">Variable Symbolic Parameters</a></li>

<li><a href="#symbolic_loops">Symbolic Parameters in
DO-Loops</a></li>
</ul>
</li>

<li><a href="#proc_registers">Using Registers in Nested
Procedures</a></li>
d94 5
a98 2
<li style="list-style: none">(or Procedures called from Procedure
Files)</li>
a99 19
<li><a href="#argument">Argument Transfer</a></li>

<li><a href="#proc_loops">Procedure calls in DO-Loops</a></li>
</ul>
</li>

<li><a href="#memory">Memory Allocation &amp;
Multiprocessors</a></li>

<li><a href="#unix">Submitting Batch Jobs on UNIX systems</a></li>
</ul>

<hr>
<p>SPIDER can be run either interactively or in a procedure mode.
Interactive mode means that user input on the terminal is solicited
by messages appearing on the screen. In the procedure mode, control
input is taken from a procedure control file where it has to appear
in exactly the same sequence as in an interactive session.</p>

d102 860
a961 3
We call a session the entire sequence of operations from the start
of SPIDER to the execution of the <a href="man/en.html">EN</a>
(ENd) operation. 
d963 2
a964 907
<h3>Starting The Session</h3>

Log on in your directory, then start SPIDER by typing: 

<dl>
<dt></dt>

<dd>spider</dd>

<dd>&nbsp;&nbsp;&nbsp;or</dd>

<dd>spider &lt;Prj&gt;/&lt;Dat&gt;</dd>
</dl>

<br>
<p>SPIDER will then print some introductory information
including:</p>

<dl>
<dt></dt>

<dd>The version number and issue date for this version.</dd>
</dl>

If the PROJECT/DATA EXTENSION is not given on the command line,
SPIDER will then respond with: 

<dl>
<dt></dt>

<dd>.ENTER PROJECT/DATA EXTENSION: &lt;Prj&gt;/&lt;Dat&gt;</dd>
</dl>

The project extension &lt;Prj&gt; consists of a three letter
sequence, e.g, 'GLS', is used to identify procedure files, the LOG
file, and the RESULTS file by attaching this sequence to the file
names as an extension.

<p>The data extension &lt;Dat&gt; is optional. It consists of a
three letter sequence, e.g., 'SCI', and is used to identify the
data files by attaching this sequence to data file names as an
extension.</p>

<p>For example, an image file specified as <i>'ACF001'</i> during
the SPIDER session will have as a full filename <i>'ACF001.SCI'</i>
if the above data extension <i>'SCI'</i> is used.</p>

<p>A file created as an output file of a SPIDER operation will have
the &lt;Dat&gt; extension attached to its SPIDER file name. If no
data extension is given, the system uses the project extension as
data extension.</p>

<p>The set of files having the same data extension can be thought
of as a library. Within one session of SPIDER, all image files
accessed and created belong to the same library.</p>

<p>[Note, however, that the new extension operation <a href=
"man/nc.html">NC</a> (New Code) may be used within the SPIDER run
to redefine the project extension/data extension.]</p>

<p>If more than one SPIDER session is being run in the same
directory, different project extensions should be used.</p>

<p>Each input line typed by the user is echoed by SPIDER on the
subsequent line so that typing errors become apparent.</p>

<p>Each line produced by SPIDER that requires input is preceded by
a period, e.g., '.INPUT FILE:'.</p>

<p></p>

<dl>
<dt>Optional Command Line Parameters</dt>
</dl>

SPIDER can accept optional command line parameters in addition to
the PROJECT/DATA EXTENSION. 

<dl>
<dt>procedure</dt>

<dd>Initial procedure to be run when starting SPIDER. The @@ sign is
necessary now.</dd>

<dt>Result file version number</dt>

<dd>Result file version number version number to be used by SPIDER
run. This will superceed value determined by incrementing current
version number</dd>

<dt>Register assignments.</dt>

<dd>Inital register assignments when starting SPIDER. These
assignments will be inherited by any inital proceedure.</dd>
</dl>

<dl>
<dt>An example of a SPIDER run with optional command line
parameters follows:</dt>

<dd><i>spider prj/dat @@procname 17 x11=3 x12=4</i></dd>
</dl>

<h3>The Operation Input Status</h3>

The system now asks: 

<dl>
<dt></dt>

<dd>.OPERATION:</dd>
</dl>

All available operations are specified by two or more letter
operations, e.g. <a href="man/li.html">LI</a> for LIsting selected
rows of an image. A list of the operations and their meanings is
available in the <a href="operations_doc.html">index of
operations</a> which is part of this SPIDER documentation. You may
want to obtain a hardcopy listing of this and post it next to the
terminal for reference.]

<p></p>

<h3>User-Solicited Information</h3>

After a operation is entered, additional information needed to
carry out the operation is solicited from the user. This
information may be grouped into the following categories: (a) File
information on input and output (mostly image) files, and (b)
Values of parameters. These types of input are described in what
follows. 

<h4>File Names</h4>

These are sequences of alphanumeric characters, normally (but not
necessarily) of the form &lt;ABC&gt;&lt;###&gt; where &lt;ABC&gt;
is any sequence of three or more characters (the prefix), and
&lt;###&gt; is three or more digit number. If this convention is
followed, files can be accessed under control of SPIDER <a href=
"#loops">DO-loops</a>. The file name (without extension) can have
up to 79 characters and the prefix can contain directory
information. For example, <i>../usr/people/myself/A12BCDE001</i> is
acceptable.

<p>SPIDER can substitute for any portion of the file name at run
time using a numerical value contained in <a href=
"#registers">registers</a>. Any text entered as part of a filename
which is enclosed between "{" and "}" brackets is presumed to be
part of a desired substitution request.</p>

<p>To substitute a register value into a file name, use the
sequence <i>{****X&lt;##&gt;}</i> where the "*" string denotes the
number of digits for the substitution and the "##" denote the
register whose contents are to be substituted in place of the
astericks. Any register from <i>0...99</i> may be used for
substitution. E.g. if the the file name entered is
<i>ABC6{***X11}</i> and the run time content of register X11 is the
value <i>34</i>, then the resulting filename is: <i>ABC6034</i>.
This mechanism can also be used inside a <a href=
"#loops">DO-loop</a> to substitute the current DO-loop index
register value into a filename.</p>

<p>There may be any number of substitution strings within a single
filename, e.g. the following is a valid filename:
<i>/usr/dir{*X33}/abcd{****X34}</i> , if the value in register X33
only contains a single digit and the value in X34 has less than 5
digits. If the value to be substituted contains more digits than
the number of astericks specified an <b>error will occur</b> .</p>

<p>The less powerfull and more ambiguous <a href=
"oldfilenamesub.html">old formalism</a> for filename substitution
is no longer available.</p>

<p>The full file name is the above character string amended with
.&lt;Dat&gt;, where &lt;Dat&gt; is the data extension specified at
the beginning of the session.</p>

<p>The use of the character '*' as the first character (subsequent
ones are ignored) of the file name terminates the current operation
and makes the system ready to accept a new operation. Some
operations with implied DO-loops continue to solicit input files
until the escape character '*' is used as a file name. Examples
include <a href="man/ad.html">AD</a> and <a href=
"man/su.html">SU</a>.</p>

<h4>File Handling</h4>

The file whose name is typed in is either an input or an output
file.

<p>Input files are assumed to exist and contain data used as input
to the operation. The fact that a file is input to the operation
does not necessarily exclude changes to the file; An example of
operations that changes the file is <a href="man/ppll.html">PP
LL</a> (Put Lines in image from doc file) .</p>

<p>If an operation requires more than one input file, these are
distinguished in the solicitation messages as 'INPUT1', 'INPUT2',
etc.</p>

<p>In the case of the Cross-Correlation operation (<a href=
"man/cc.html">CC</a>), one of the input files is used as a
reference file, and is solicited as 'REFERENCE FILE'.</p>

<p>Output files can be either files that already exist, or files
that are to be created under the name specified by the user.
Already existing files having the same name are overwritten without
a warning message.</p>

<p>The dimensions of the output file are dependent on the
operation, and are either copied from the input file (e.g <a href=
"man/sh.html">SHift</a>, <a href="man/rt.html">RoTate</a>) or are
solicited from the user (e.g. <a href=
"man/ip.html">InterPolate</a>, <a href=
"man/wi.html">WIndow</a>).</p>

<h4>File Opening</h4>

After each input file or output file specification, SPIDER will
attempt to open the file. After the file is opened, a statement is
written on the terminal which has the following form:

<dl>
<dt></dt>

<dd>&lt;ABC&gt;&lt;###&gt; /&lt;Title&gt;<br>
 (&lt;T&gt;) &lt;NSAM&gt; &lt;NROW&gt; &lt;NSLICE&gt; CREATED
&lt;Date&gt; AT &lt;Time&gt; &lt;D&gt; HEADER BYTES: &lt;BYTES&gt; 

<p></p>
</dd>

<dd>where: 

<dl>
<dt>&lt;ABC&gt;&lt;###&gt;</dt>

<dd>is the file name.

<p></p>
</dd>

<dt>&lt;Title&gt;</dt>

<dd>is the title previously entered by the user.

<p></p>
</dd>

<dt>&lt;T&gt;</dt>

<dd>is the data type code and has the following values:

<dl>
<dd>'O2' for mixed radix -2 Fourier data corresponding to
odd-length real image data.<br>
 'E2 for mixed radix -2 Fourier data corresponding to even-length
real image data.<br>
 'O3' for mixed radix -2 Fourier data corresponding to odd-length
real volume data.<br>
 'E3 for mixed radix -2 Fourier data corresponding to even-length
real volume data.<br>
 'R2' for 2D Real image data.<br>
 'R3' for 3d Real volume data.<br>
 'S2' for stacked 2D real image data.<br>
 'S3' for stacked 3D real volume data.<br>
</dd>
</dl>

'I2' for indexed, stacked 2D real image data.<br>
 'I3' for indexed, stacked 3D real volume data.<br>
</dd>
</dl>

The type code in the file label is used to prevent operations
inconsistent with the data format from being carried out (e.g.,
Real data cannot be inversely Fourier transformed)

<p></p>
</dd>

<dt>&lt;NSAM&gt;,&lt;NROW&gt;,&lt;NSLICE&gt;</dt>

<dd>is the number of sampling points (columns), number of rows, and
number of slices in the image. In the case of Fourier transforms,
the numbers correspond to those of the transformed image.

<p></p>
</dd>

<dt>&lt;Date&gt;,&lt;Time&gt;</dt>

<dd>is the date and time of file creation.

<p></p>
</dd>

<dt>&lt;D&gt;</dt>

<dd>is the disposition of the file. The following codes are used:

<dl>
<dt></dt>

<dd>'N' if file is newly created<br>
 'O' if file is old</dd>
</dl>

<p></p>
</dd>

<dt>&lt;BYTES&gt;</dt>

<dd>is the number of bytes in the SPIDER header for this file

<p></p>
</dd>
</dl>

In case of abnormal termination of the session, the user should
carefully check the opening information of all files that were open
when the program failed. This will tell him/her if the image format
was correct, and if the correct image file has been accessed. 

<h4>Image File Storage</h4>

The exact format in which images and volumes are stored on disk
along with their headers, and the contents of the headers is
detailed <a href="formats.html#image">elsewhere</a>. The only
operation that accesses the image or volume files by explicit
record numbers is <a href="man/li.html">LI</a> (LIst). This
operation is useful for dumping image contents or for debugging
purposes. 

<h4>Inline Files</h4>

Many SPIDER uses involve the creation of temporary image files
which undergo further processing later in the session. Computer
access to these files is faster when they are kept in memory
instead of being written out to disk. A inline file is referred to
as: <i>_#</i>. Where <i>_#</i> is one to three underscore symbol(s)
followed by one or two digits. Any such file is stored in memory as
an "inline file". Ninety-nint inline files are available and they
can hold any size image. An example of a filename that denotes an
inline file number <i>2</i> is: <i>_2</i>. 

<h4>Image Stacks</h4>

Multiple images can be stored within a single SPIDER "stack file".
A stack file differs from a SPIDER volume in that each image keeps
its own full header. A stacked image is referred to as:
&lt;ABC&gt;&lt;###&gt;@@&lt;###&gt; where &lt;ABC&gt; is a sequence
of alphanumeric characters and &lt;###&gt; is a sequence of digits.
The digits afer the '@@' symbol represent the image number within a
stack. Stacked images can be used anywhere a normal SPIDER file
name would be used. An example of a filename that denotes image
number <i>4056</i> inside stack file <i>fil001</i> is:
<i>fil001@@4056</i>. 

<h4>Inline Stack Files</h4>

Inline stack files are available and should be useful on machines
with large physical memory. An inline stacked image is referred to
as: &lt;_#&gt;@@&lt;###&gt;. Where &lt;_#&gt; is one to three
underscore symbol(s) followed by a one or two digits and <i>###</i>
is a sequence of digits. The digits afer the '@@' symbol represent
the image number within a stack. Inline stacked images can be used
anywhere a normal SPIDER file name would be used. In this case, the
first time a particular inline stack is referenced you will be
asked for the total number of images in the stack. Alternatively, a
stack can be created using the <a href="./man/ms.html">MS</a> (Make
Stack) operation. An example of a filename that denotes image
number <i>4056</i> inside inline stack number two is:
<i>_2@@4056</i>. 

<h4>Indexed Stack Files</h4>

Both disk based and inline stack files are available with an index
and may be used like normal SPIDER stack files. An indexed stack
may be useful if you have a sparsely populated large stack. In an
indexed stack there is an extra set of records following the
overall header that stores the indices. Unlike a normal stack there
is no space wasted for a missing image in the stack. For indexed
stacks the first time a particular indexed stack is referenced you
will be asked for the maximum number of any image in the index. For
indexed inline stacks this number is usually different from the
maximum number of images that can be held in the stack. An indexed
stack can only be created using the <a href="./man/msi.html">MS
I</a> or <a href="./man/cpi.html">CP I</a> operations. 

<h4>Parameter Values</h4>

Values of parameters solicited by an operation can be real,
integer, or alphanumeric. Alphanumeric parameters are used to
specify options (e.g., (S)ine or (C)osine). 

<p>Real and integer parameters are read in without formatting
rules; they can be at any place on the line, separated by commas or
any number of blanks, and spread out over any number of (non-blank)
lines. They are checked for correct type and possible typing
errors. Such errors and type inconsistencies result in an error
message:</p>

<dl>
<dt></dt>

<dd>.BAD INPUT PARAMETER(S). RE-ENTER:</dd>
</dl>

The user then has to re-enter the entire line containing the error.
For example, in <a href="man/ip.html">IP</a> (InterPolate), the
user enters the dimensions of the output file:

<dl>
<dt></dt>

<dd>41 50.0</dd>
</dl>

where only integer input is allowed. After the error message, he
has to re-enter:

<dl>
<dt></dt>

<dd>41 50</dd>
</dl>

However, if he had entered the two parameter values on two separate
lines:

<dl>
<dt></dt>

<dd>41</dd>

<dd>50</dd>
</dl>

then the error message would relate to the last line only, and it
is this line only which he has to re-enter by typing:

<dl>
<dt></dt>

<dd>50</dd>
</dl>

<h3>Completion of an Operation</h3>

After successful completion of the operation, the system returns to
the operation input status, by printing the solicitation message
'.OPERATION:' on the screen. 

<p></p>

<h3>Ending a SPIDER Session</h3>

If you want to terminate the session, you sign off with the <a
href="man/en.html">EN</a> operation. SPIDER then responds with the
terminal message:

<dl>
<dt></dt>

<dd>SPIDER NORMAL STOP</dd>
</dl>

<h3>Non-Image files used by SPIDER</h3>

SPIDER produces two files as a result of the user session: the <a
href="#file_results">RESULTS file</a> and the <a href=
"#file_log">LOG file</a>
<p>SPIDER also produces and uses <a href="#file_doc">document
files</a>. Document files are keyed, formatted, sequential text
files used to store register contents and misc. numerical data.
Unlike image files, they can be read and edited.</p>

<p></p>

<h4>RESULTS file</h4>

During an interactive session, any listings generated that are too
lengthy to be listed at the terminal are written instead to the
RESULTS file, RESULTS.&lt;Prj&gt;. This file also contains the
protocol of any procedure started interactively. 

<p>During a procedure session, the RESULTS file contains the
protocol of the operation sequence executed, as well as lists
generated by it in their logical order.</p>

<p>The <a href="./man/md.html">'MD'</a> operation with 'VB OFF'
(Verbose Off) can be used to decrease the amount of output from
do-loops and from the 'SD' and 'UD IC' operations. This can
decrease the length of RESULTS files by thousands of lines.</p>

<p></p>

<h4>LOG file</h4>

The LOG file, LOG.&lt;Prj&gt;, is a complete record of everything
that has been typed in by the user during the interactive session.
It is sometimes useful as a record of the session. 

<h4>Document files</h4>

These are keyed, <a href="docfile.html">formatted</a>, sequential
files created by executing the <a href="man/sd.html">SD</a>
operation and certain additional operations. Document files are
used to permanently store the contents of a group of registers
(e.g., shift coordinates, angles, etc.) as realized in different
images (specified by keys). Any subsequent SPIDER run can retrieve
these register values by their keys. 

<p>Document files are also used for communication between Web and
SPIDER. For example the "particle picking" operation in Web creates
a set of document files used by certain operations in SPIDER.</p>

<p>Document files may also be used to define a processing protocol;
switch on and off the execution of procedure files, or
include/exclude images of a series from processing depending on the
result of previous operations.</p>

<h3>Registers</h3>

SPIDER has 100 system registers available, X0-X99. The number of
registers may be increased using the 

<dl>
<dd><a href="man/md.html">MD</a> operation with option "SET REGS".
These registers are used for storing and transferring parameter
values. A register can be filled in one of three ways:</dd>
</dl>

<ol>
<li>as output resulting from an operation.</li>

<li>when used as an index in a do-loop.</li>

<li>by being explicitly set equal to a value or an arithmetic
expression</li>
</ol>

For example, when SPIDER asks '.OPERATION:', the user may type:

<dl>
<dt></dt>

<dd>X10=3.14159</dd>
</dl>

System register X10 will then have the value 3.14159. To examine
the contents of a register, the user need only type the register
he/she wishes to examine. If 'X10' was entered in the above
example, the contents of X10, 3.14159, would be printed on the
screen. 

<p>All registers are set equal to zero at the start of the SPIDER
session.</p>

<p></p>

<h4>Special System Registers</h4>

The first 10 registers, X0-X9, are reserved for SPIDER internal
use, they should not be used for parameter transfer between
operations. 

<p>The contents of special registers X0 and X9 are:</p>

<dl>
<dd>
<table border="0">
<tr valign="top">
<td>X0</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Index</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;most recent value of the DO-loop
index<br>
 &nbsp;&nbsp;&nbsp;&nbsp;(updated after each execution of the <a
href="man/lb.html">LB</a># statement)</td>
</tr>

<tr>
<td></td>
</tr>

<tr valign="TOp">
<td>X9</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Error flag</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; [0 if no error occurred and 1 if an
error occured<br>
&nbsp;&nbsp;&nbsp;&nbsp;in the most recent operation]</td>
</tr>
</table>
</dd>
</dl>

[Registers 1..8 were used in early SPIDER releases for
communicating file parameters but are no longer supported in the
current SPIDER releases!] Registers may appear in <a href=
"#arithmetic">arithmetic expressions</a>, <a href=
"#math_functions">mathematical functions</a>, as <a href=
"#registers_input">input parameters</a>, and as <a href=
"#registers_output">output parameters</a> in operation lines. 

<h4>Registers [or Arithmetic Expressions] as Input Parameters</h4>

Registers or valid arithmetic expressions containing registers may
be used wherever integer or floating point values are solicited by
operations. 

<p></p>

<dl>
<dt>Example 1:</dt>

<dd><a href="man/rt.html">RT</a></dd>

<dd>PIC001</dd>

<dd>PIC002</dd>

<dd>X11</dd>
</dl>

is a valid sequence: the contents of register X11 are interpreted
as a rotation angle.

<p></p>

<dl>
<dt>Example 2:</dt>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC001</dd>

<dd>PIC002</dd>

<dd>X11,X12</dd>
</dl>

Here the contents of X11,X12 are interpreted as components of a
shift vector.

<p></p>

<dl>
<dt>Example 3:</dt>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC001</dd>

<dd>PIC002</dd>

<dd>(X114.3-X10),SIN(X123.14/180.)</dd>
</dl>

Here each arithmetic expression is evaluated first, and the
resulting values are interpreted as components of a shift vector. 

<p>Note that the register content is always a floating point
number. If read in as an integer, the closest integer value is
used, e.g. 4 for 3.8, 3 for 3.2, -4 for -4.25, etc.</p>

<p>Rules for use of registers or expressions as value input:</p>

<ol>
<li>Mixing of registers or expressions with numbers is not allowed
in the input; e.g. X11,5 may not be used in Example 2.</li>

<li>In <a href="#loops">DO-loops</a>, only one register [or
register set, respectively] or one expression [or expression set]
may be used. This set will be applied to each run of the <a href=
"#loops">DO-loop</a>. 

<dl>
<dt>Example:</dt>

<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1
X88=1,5</dd>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC{***X88}</dd>

<dd>OUT{***X88}</dd>

<dd>X11,X12</dd>

<dd><a href="man/lb.html">LB</a>1</dd>
</dl>

This sequence will apply the values of X11,X12 to each run of the
DO-loop. Parentheses around X11,X12 are not needed: if each run of
the DO-loop requires different values, these may be introduced
before the operation by an <a href="man/rr.html">RR</a> operation. 

<p></p>

<dl>
<dt>Example:</dt>

<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1
X88=1,5</dd>

<dd><a href="man/rr.html">RR</a> X11 3.3, 1.5, 6.0, -8.1, 0.0</dd>

<dd>RR X12 -7.5, 5.1, 3.2, -0.4, 8.1</dd>

<dd><a href="man/sh.html">SH</a> F</dd>

<dd>PIC{***X88}</dd>

<dd>OUT{***X88}</dd>

<dd>X11,X12</dd>

<dd><a href="man/lb.html">LB</a>1</dd>
</dl>
</li>
</ol>

<h4>Registers as Output Parameters</h4>

Some operations such as <a href="man/fs.html">FS</a>, and <a href=
"man/pk.html">PK</a> allow the specification of registers to accept
output values. For example, <a href="man/pk.html">PK</a> X11,X12.
After completion of the <a href="man/pk.html">PK</a> operation, the
peak position components are contained in X11,X12.

<p>As an example for a value transfer between operations by
registers, consider the following sequence:</p>

<dl>
<dt></dt>

<dd><a href="man/pk.html">PK</a> X11,X12</dd>

<dd>COR001</dd>

<dd>3</dd>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC001</dd>

<dd>NEW001</dd>

<dd>-X11,-X12</dd>
</dl>

<a href="man/pk.html">PK</a> is an operation that searches for the
peak position in a file, normally a cross-correlation function. It
allows specification of output registers (in the example, X11,X12)
where the peak coordinates are to be stored. These registers may be
used by any subsequent operation as floating point or integer
input, in this example by <a href="man/sh.html">SH</a> (SHift). A
minus sign may be used to invert the sign of the value input from a
register. Note that mixed input will not be accepted where
parameters are solicited. For example:

<dl>
<dt></dt>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC001</dd>

<dd>NEW001</dd>

<dd>-X11,15</dd>
</dl>

will result in an error. In this case, the value 15 should be
introduced into one of the registers prior to the 'SH' operation,
like this:

<dl>
<dt></dt>

<dd>X12=15</dd>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC001</dd>

<dd>NEW001</dd>

<dd>-X11,X12</dd>
</dl>

Three registers, X100-X102, are reserved for keeping track of
certain device-dependent parameters. 

<h4>Saving and Unsaving Registers</h4>

At any given time during the session, the contents of the registers
X0 - X99 can be saved by using the <a href="man/sr.html">SR</a>
operation with the "save" option. Any subsequent operations on
registers do not affect this stored register set. Execution of the
<a href="man/sr.html">SR</a> operation with "unsave" option will
fetch the stored register set into the working register area. 

<p>Any number of register values can be saved in a permanent file
by using the <a href="man/sd.html">SD</a> (Save Document)
operation. A subsequent <a href="man/ud.html">UD</a> operation
issued in a different (or the same) session, refering to the same
document file, retrieves these register values. For details on
saving and unsaving registers, see the <a href="man/sd.html">SD</a>
and <a href="man/ud.html">UD</a> manual chapters.</p>

<p></p>

<h3>SPIDER's Pocket Calculator</h3>

SPIDER incorporates a "pocket calculator" which evaluates <a href=
"#arithmetic">arithmetic operations</a>, <a href=
"#expressions">expressions</a>, and <a href=
"#math_functions">mathematical functions</a>. 

<h4>Arithmetic Operations</h4>

At the operation prompt in SPIDER, the user may type:

<dl>
<dt></dt>

<dd>2*3+5</dd>
</dl>

SPIDER will then respond with '11.0000'.

<p>Available arithmetic operations are:</p>

<dl>
<dd>
<table border="0)">
<tr>
<td>+</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Addition</td>
</tr>

<tr>
<td>-</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Subtraction</td>
</tr>

<tr>
<td>*</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Multiplication</td>
</tr>

<tr>
<td>/</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Division</td>
</tr>

<tr>
<td>**</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;Exponentiation</td>
</tr>

<tr>
<td><a href="#math_functions">mathematical function</a></td>
</tr>
</table>
</dd>
</dl>

<h4>Expressions</h4>

Epressions can be used within the SPIDER calculator and also in
certain operations such as <a href="man/if.html">IF</a>, <a href=
"man/if_goto.html">IF...GOTO</a>, and <a href="man/if_then.html">IF
THEN</a>. Expressions are evaluated from left to right with
standard rules of precedence with one important exception:
<b>string of adjacent arithmetic operators are not allowed</b>. In
addition, the user may specify negative numbers and parentheses
just as he/she would normally. For example, if the user typed: 

<dl>
<dt></dt>

<dd>(3*(-2))*(2+6)</dd>
</dl>

SPIDER would respond with '-48.0000'. 

<p>Scientific notation (i.e., 2.3E-4) is allowed.</p>

<p>These operations may be used to manipulate registers as well.
For example, if the user typed the following sequence:</p>

<dl>
<dt></dt>

<dd>X11=4.1</dd>

<dd>2*X11</dd>
</dl>

SPIDER would respond with 8.2000. 

<p>In addition, the user may set a register equal to an expression.
For example, if the user typed:</p>
d966 1
a966 2
<dl>
<dt></dt>
d968 349
a1316 1
<dd>X12=9.6E-2</dd>
a1317 339
<dd>X12=X12+5</dd>
</dl>

SPIDER would store in X12 the value 14.6.

<p>If the user types an expression that does not conform with the
syntax rules of the conversion routines, SPIDER will respond
with:</p>

<dl>
<dt></dt>

<dd>*** ERROR: INVALID ARITHMETIC EXPRESSION</dd>
</dl>

Examples of valid expressions are: 

<dl>
<dt></dt>

<dd>2*(-6)</dd>

<dd>((3+6)*(7*3))**9.1</dd>

<dd>X11=(X12+7)*(X16/X13)</dd>

<dd>X11=3.4e-4*1.0</dd>
</dl>

Examples of invalid expressions are: 

<dl>
<dt></dt>

<dd>X100
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[Register number exceeds 99]</dd>

<dd>X12=(2+3 &nbsp;&nbsp;&nbsp;&nbsp;[Unbalanced parenthesis]</dd>

<dd>(2+3/6)) &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Unbalanced
parenthesis]</dd>

<dd>2*-6 &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Adjacent
arithmetic operators]</dd>

<dd>2*(-6E2) &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[No dot in
the number]</dd>
</dl>

<h4>Mathematical functions</h4>

Available mathematical functions are:

<p></p>

<dl>
<dd>
<table border="0" tr="">
<tr>
<td>PAD(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; next highest power of two of
expression</td>
</tr>

<tr>
<td>SIN(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; sine of expression</td>
</tr>

<tr>
<td>COS(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; cosine of expression</td>
</tr>

<tr>
<td>EXP(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; exponential of expression</td>
</tr>

<tr>
<td>LOG(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; logarithm (Base 10) of expression</td>
</tr>

<tr>
<td>LON(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; natural log of expression</td>
</tr>

<tr>
<td>SQR(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; square root of expression</td>
</tr>

<tr>
<td>INT(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; truncates to integer</td>
</tr>

<tr>
<td>ABS(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; absolute value of expression</td>
</tr>

<tr>
<td>ATA(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; arc tangent of expression (in
degrees)</td>
</tr>

<tr>
<td>ASI(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; arc sine of expression (in
degrees)</td>
</tr>

<tr>
<td>ACO(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; arc cosine of expression (in
degrees)</td>
</tr>

<tr>
<td>TAN(&lt;Expression&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; tangent of expression</td>
</tr>

<tr>
<td>RAN(&lt;Any register&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random uniform number generator
in the range from 0 to 1.</td>
</tr>

<tr>
<td>RNN(&lt;Any register&gt;)</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random number generator, normal
distribution (0,1).</td>
</tr>
</table>
</dd>
</dl>

<p>where &lt;Expression&gt; stands for any <a href=
"#expressions">valid math expression</a>.</p>

<p>All trigonometric functions use arguments (or give results) in
degrees.</p>

<p>Examples of valid usage:</p>

<dl>
<dt></dt>

<dd>SIN(4.5/(X5-100.))</dd>

<dd>X10=EXP(-400./X11**2)</dd>

<dd>X15=X14-SIN(45./180.*X91)</dd>

<dd>X16=SIN(45./180.*X91)</dd>

<dd>X15=X14-COS(LON(X16))</dd>

<dd>X16=RAN(X14) ; <em>Value of X14 is not changed nor is it used
for anything!</em></dd>
</dl>

<h3>Comments</h3>

Comment lines may be inserted in procedure files. A comment has the
form: 

<dl>
<dd>; This is a comment</dd>
</dl>

A comment is a non-executable statement that will simply be printed
out in the RESULTS file. 

<p>Comments may also appear on any lines that carry SPIDER
statements. They must be separated from the last character of such
a statement by at least one blank and a semicolon. Example:</p>

<dl>
<dd><a href="man/pd.html">PD</a> ; Now pad input image</dd>

<dd>PIC001 ; From previous window</dd>

<dd>PAD005 ; Output will be used for FT</dd>

<dd>128,128 ; Next power of two dimensions</dd>

<dd>Y ; Use average for padding</dd>

<dd>1,1 ; Top left coord. arbitrary in</dd>

<dd>; this case</dd>
</dl>

<p>Exceptions are statements that specify sets of numbers using
hyphens, e.g., in the input to operation <a href=
"man/as.html">AS</a>: 1-7,15-20. No comment is allowed in this type
of statement.</p>

<h3>DO-Loops</h3>

DO-Loops similar to those in FORTRAN are available in SPIDER. They
are started by the statement: 

<dl>
<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>
&lt;L&gt;&nbsp;&nbsp; &lt;C&gt;=&lt;M&gt;,&lt;N&gt;</dd>
</dl>

and terminated by: 

<dl>
<dd><a href="man/lb.html">LB</a>&lt;L&gt;</dd>
</dl>

where 

<dl>
<dd>
<dl>
<dt>&lt;L&gt;</dt>

<dd>is a one or two digit integer used for distinguishing the
terminating label and the associated DO-loops.</dd>

<dt>&lt;C&gt;</dt>

<dd>is a <a href="#register">register</a> for the DO-loop
index.</dd>

<dt>&lt;M&gt;,&lt;N&gt;</dt>

<dd>are positive-valued integers or registers defining beginning
and end of the DO-loop. Successively, the index &lt;C&gt; will be
assigned the values &lt;M&gt;, &lt;M&gt;+1, &lt;M&gt;+2, ...
&lt;N&gt;. Note that &lt;N&gt; must be greater than &lt;M&gt;.
&lt;M&gt; and &lt;N&gt; must be &lt; 100,000.</dd>
</dl>
</dd>
</dl>

DO-loops may be nested, but they must be distinguished by different
labels and different index registers or symbols. 

<h4>Variable Value Input in DO-Loops</h4>

There are basically two different uses of DO-loops in an image
processing application: 

<ol>
<li>Applying the same sequence of operations with the same
parameter values to different images, distinguished by numbered
file names.</li>

<li>Applying the same sequence of operations with different
parameter values to the same image. 

<p></p>
</li>
</ol>

To serve the first application, variable file names are provided: 

<dl>
<dd>&lt;ABC&gt; {****&lt;C&gt;}</dd>
</dl>

where: 

<dl>
<dd>
<dl>
<dt>&lt;ABC&gt;</dt>
</dl>
</dd>

<dd>is a file prefix, the "*" (s) denote the number of digits for
the substitution and</dd>

<dt>&lt;C&gt; </dt>

<dd>is the DO-loop count register defined above.</dd>
</dl>

To make variable parameter input possible, values may be entered as
arrays, to be picked according to the DO-loop count. Example: 

<dl>
<dd><a href="man/do.html">DO</a></dd>

<dd><a href="man/lb.html">LB</a>1 X10=1,3</dd>

<dd><a href="man/rt.html">RT</a></dd>

<dd>PIC{***X10}</dd>

<dd>OUT{***X10}</dd>

<dd>45. 61. 78</dd>

<dd><a href="man/lb.html">LB</a>1</dd>
</dl>

In this example, <a href="man/rt.html">RT</a> uses the angles 45,
61 and 78 degrees with the pictures PIC001, PIC002, and PIC003,
respectively. 

<p>In the case of operations requiring a pair of numbers (e.g.,
shift coordinates), one pair has to be provided for each run of the
DO-loop. However, if the same floating point number or pair of
numbers should be used for each run of the DO-loop, this may be
specified by using a single number (or pair of numbers) enclosed in
parentheses. Example:</p>

<dl>
<dd><a href="man/do.html">DO</a> LB7 X88=5,9</dd>

<dd><a href="man/sh.html">SH</a></dd>

<dd>ALL00{***X88}</dd>

<dd>SHI00{***X88}</dd>

<dd>(15,8)</dd>

<dd><a href="man/lb.html">LB</a>7</dd>
</dl>

In this case, the shift parameter values 15,8 are applied to each
image, starting with ALL005 and ending with ALL009.

<p></p>

a1318 170
<h2><a name="procedures">Running SPIDER in Procedure Mode</a></h2>

<h3>Procedure Control Files</h3>

Procedure control files are user-created files containing sequences
of operations and parameter values. Procedure files can have any
alphanumeric name up to 80 characters but the name must begin with
a letter. Instead of taking the input from the terminal, SPIDER
uses the control sequence as it appears in the procedure file. All
output that would normally appear on the terminal is directed to
the RESULTS file, and no LOG file is created. 

<p>To invoke a procedure when SPIDER asks '.OPERATION:', the user
types an "at" sign <i>@@</i> followed by the name of the procedure
file without its extension.</p>

<dl>
<dd>.OPERATION: @@ALIGN10</dd>
</dl>

When calling a procedure from a another procedure file, the user
puts the parameters (if any) solicited by the procedure behind the
calling statement in the same order as they appear in the called
procedure file. For example: 

<dl>
<dt>Let procedure AD1 contain the following:</dt>

<dd><a href="man/ad.html">AD</a></dd>

<dd>PIC001</dd>

<dd>?SECOND PICTURE TO BE ADDED?</dd>

<dd>*</dd>

<dd><a href="man/re.html">RE</a></dd>

<dt>and let procedure B01 contain the following:</dt>

<dd><a href="man/rt.html">RT</a></dd>

<dd>WOW001</dd>

<dd>OUT001</dd>

<dd>180.00</dd>

<dd>@@AD1</dd>

<dd>OUT001</dd>

<dd><a href="man/en.html">EN</a></dd>
</dl>

Then '.OPERATION: @@B01' will cause WOW001 to be rotated by 180
degrees, and stored in OUT001. OUT001 will then be added to PIC001.
SPIDER will ultimately return to the level of the calling procedure
file, and terminate the session. Procedures allow the user to
specify parameters at run time. the procedure requires parameter
values in the order they have been <a href="#new">internally
defined when the procedure was written</a>.

<p>When called in the interactive mode, the procedure will solicit
the required parameters from the terminal. Solicitation messages
enclosed by question marks will appear in the order they are
defined in the <a href="#new">procedure operation
sequence.</a>.</p>

<p>Procedures may be called from:</p>

<ol>
<li>another procedure</li>

<li>an interactive session</li>
</ol>

If called from the interactive mode, when a 'RE' operation is
encountered, control will return to the terminal. If called from
another procedure file, control will be passed to the operation
following the procedure call. 

<p></p>

<h3>Execution Rules</h3>

Standard procedures are contained in the <a href="../proc/">SPIDER
system's procedure directory</a> with the extension <i>'spi'</i>.
These procedures form the standard procedure library for SPIDER. 

<p>For any procedure call, SPIDER will first scan the user's
directory. If a procedure file under the given name is found, then
this procedure becomes effective in the call. If no such procedure
is found, SPIDER will attempt to locate the given file with a
<i>.spi</i> extension in the SPIDER system's procedure
directory.</p>

<p></p>

<h3>Writing New Procedures</h3>

To create a procedure file the user must: 

<ol>
<li>Replace any parameter in the procedure file that the user
wishes to specify at run time by a solicitation message enclosed in
question marks, e.g., ?PICTURE TO BE ADDED? (See below).</li>

<li>Replace the <a href="man/en.html">EN</a> operation at the end
by a <a href="man/re.html">RE</a> operation.</li>
</ol>

At execution time, the user-specified solicitation messages are the
only messages that will appear on the terminal. 

<p>For example, if the following procedure was called from the
interactive mode:</p>

<dl>
<dd><a href="man/ad.html">AD</a></dd>

<dd>PIC001</dd>

<dd>?PICTURE TO BE ADDED?</dd>

<dd>*</dd>

<dd><a href="man/re.html">RE</a></dd>
</dl>

SPIDER would print '?PICTURE TO BE ADDED?' at the terminal and wait
for the user to specify the file to be added to PIC001. It would
then add the two pictures, and upon encountering the <a href=
"man/re.html">RE</a> operation, will return to the interactive
mode. 

<p>One restriction exists on the definition of procedures: The
parameter to be specified at run time may not be a operation. This
restriction is imposed because each operation may produce a
different number of subsequent solicitations.</p>

<h4>Symbolic Parameters</h4>

Frequently, one encounters the situation where more same
information is required in the procedure more than once. For
example, the following procedure definition solicits the name of
the image to be aligned twice from the user: 

<p></p>

<dl>
<dd>; PROCEDURE TO ALIGN IMAGE WITH REFERENCE <br>
<br>
<p></p>
</dd>

<dd><a href="man/pd.html">PD</a></dd>

<dd>?UNALIGNED IMAGE? &lt;unaligned&gt;</dd>

<dd>ACF001</dd>

<dd>128,128</dd>

<dd>N</dd>

<dd>33,33 <br>
<br>
<p></p>
</dd>
d1320 9
a1328 1
<dd><a href="man/pd.html">PD</a></dd>
a1329 436
<dd>?REFERENCE IMAGE?&lt;reference&gt;</dd>

<dd>ACF002</dd>

<dd>128,128</dd>

<dd>N</dd>

<dd>33,33</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/ac.html">AC</a></dd>

<dd>ACF001</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/ac.html">AC</a></dd>

<dd>ACF002</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/or2.html">OR 2</a> X10</dd>

<dd>ACF001</dd>

<dd>ACF002</dd>

<dd>5</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/rt.html">RT</a></dd>

<dd>&lt;unaligned&gt; ; symbolic parameter that was set above</dd>

<dd>?OUTPUT IMAGE?&lt;output&gt;</dd>

<dd>X10</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/rt.html">RE</a></dd>
</dl>

<br>
<br>
<p>SPIDER allows the user to tie a symbolic parameter label to any
procedure solicitation message (marked by a ?...? ). Later this
symbolic parameter label can be used in place of the repeated
solicitation message. The format for the label is: &lt;label&gt;,
where <i>label</i> may be any string. Note that the &lt;&gt;
brackets are required here to indicate a symbolic parameter
label!</p>

<p>In the example for a procedure definition given above, the
second occurrence of ?IMAGE TO BE ALIGNED? was be replaced by
&lt;unaligned&gt;, since this is the label assigned at the first
occurance of the ?IMAGE TO BE ALIGNED? use. A run-time
specification for ?IMAGE TO BE ALIGNED? will then be automatically
applied to the input.</p>

<p></p>

<h4>Variable Symbolic Parameters</h4>

Symbolic parameters that represent file names may be modified at
run time by attaching a register. The specified digits of the
filename are then replaced by new digits according to the current
value in the register. 

<p></p>

<dl>
<dt>Example --- 1:</dt>

<dd>; PR1 -- procedure to list file statistics</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/fr.html">FR</a></dd>

<dd>?ENTER FIRST IMAGE?&lt;1&gt;</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1
X88=2,10</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/fs.html">FS</a></dd>

<dd>&lt;1&gt;X88</dd>

<dd>N</dd>

<dd><a href="man/lb.html">LB</a>1</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/re.html">RE</a></dd>

<dd><br>
<br>
<p></p>
</dd>

<dt>Calling sequence:</dt>

<dd>@@PR1</dd>

<dd>PIC001</dd>
</dl>

<p>In the <a href="#loops">DO-loop</a>, PIC001 will then be
replaced by PIC002, PIC003, ... , PIC010.</p>

<dl>
<dt>Example --- 2:</dt>

<dd><br>
<br>
<p></p>
</dd>

<dd>; PR2 --procedure to list file statistics</dd>

<dd><a href="man/rr.html">RR</a>X15</dd>

<dd>?PIC OUTPUT FILE NUMBER?&lt;picout&gt;</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/fi.html">FI</a></dd>

<dd>PIC{***X15}</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/re.html">RE</a></dd>

<dd><br>
<br>
<p></p>
</dd>

<dt>Calling sequence:</dt>

<dd>@@PR2</dd>

<dd>5</dd>
</dl>

In this example, the operation <a href="man/fi.html">FI</a> is
applied to PIC005.

<dl>
<dt>Example --- 3:</dt>

<dd>;PR3</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/fr.html">FR</a></dd>

<dd>?ENTER ANY IMAGE OF SERIES? &lt;1&gt;</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/rr.html">RR</a> X10</dd>

<dd>?PICK OUT FILE NUMBER?&lt;2&gt;</dd>

<dd><a href="man/fs.html">FS</a></dd>

<dd>&lt;1&gt;X10</dd>

<dd><br>
<br>
<p></p>
</dd>

<dt>Calling sequence:</dt>

<dd>@@PR3</dd>

<dd>PIC003</dd>

<dd>20.</dd>
</dl>

In this example, the operation <a href="man/fs.html">FS</a> is
applied to PIC020. 

<h4>Symbolic Parameters in DO-Loops</h4>

Symbolic parameters cause a transfer of the whole input value at
the time of the execution, not just the transfer of a single
number. It is therefore possible to use a symbolic reference in <a
href="#loops">DO-loops</a>. 

<dl>
<dt>Example:</dt>

<dd><br>
<br>
<p></p>
</dd>

<dd>;PR4 -- procedure file</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1
X88=1,5</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PIC{***X88}</dd>

<dd>OUT{***X88}</dd>

<dd>?ENTER SHIFT COMPONENTS?&lt;shifts&gt;</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/sh.html">SH</a></dd>

<dd>PAD{***X88}</dd>

<dd>SCR{***X88}</dd>

<dd>&lt;shifts&gt;</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/lb.html">LB</a>1</dd>

<dd><br>
<br>
<p></p>
</dd>

<dd><a href="man/re.html">RE</a></dd>

<dd><br>
<br>
<p></p>
</dd>

<dt>Calling sequence:</dt>

<dd>@@PR4</dd>

<dd>5,1 4,3 8,5 10,1 0,0</dd>
</dl>

In this example, each pair of components is applied to both <a
href="man/sh.html">SH</a> operations; i.e. 5,1 for I=1, 4,3 for
I=2, etc. See <a href="#loops">DO-loops</a>. 

<h3>Using Registers in Nested Procedures</h3>

Registers, in calling procedure control files, are independent of
registers within the procedures called. However, if values need to
be transferred from the calling procedure to the procedure called,
either <a href="#argument">argument transfer</a> or the operation
<a href="man/rr.html">RR</a> may be used. 

<h3>Argument Transfer</h3>

Procedure calls may contain up to 12 register arguments if these
are matched by a defining argument sequence in the procedure
called. The defining argument sequence must appear as the first
line of the procedure (before any comments), and must be of the
form: 

<dl>
<dt></dt>

<dd>[X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,...]</dd>
</dl>

where X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,... are registers
appearing in the procedure. The calling sequence must have the same
number of registers, and must be of the form: 

<dl>
<dt></dt>

<dd>
@@&lt;PROCNAME&gt;[X&lt;M1&gt;,X&lt;M2&gt;,X&lt;M3&gt;,...].</dd>
</dl>

Register values are passed in both directions; i.e., from the upper
to the lower level and vice-versa. 

<dl>
<dt></dt>

<dd>X20=1</dd>

<dd>X30=5</dd>

<dd>X40=-4</dd>

<dd>@@PROC[X20,X30,X40]</dd>
</dl>

will result in the values: 

<dl>
<dt></dt>

<dd>X20=2</dd>

<dd>X30=-20</dd>

<dd>X40=-2</dd>
</dl>

if the procedure is defined as follows: 

<dl>
<dt></dt>

<dd>[X10,X11,X12]</dd>

<dd>X10=X10*2</dd>

<dd>X11=X11*X12</dd>

<dd>X12=X12/2</dd>

<dd><a href="man/re.html">RE</a></dd>
</dl>

<h3>Procedure calls in DO-Loops</h3>

An important restriction applies if a procedure is called within a
<a href="#loops">DO-loop</a>. Specifically, if different parameter
values are to be used in the different runs of the <a href=
"#loops">DO-loop</a>, they must not be entered as a string of
numbers:

<dl>
<dt></dt>

<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1
I=1,5</dd>

<dd>PS1</dd>

<dd>6.5 7.3 8.1 4.9 3.3</dd>

<dd><a href="man/lb.html">LB</a>1</dd>
</dl>

will result in the value 6.5 being repeatedly used by procedure
PS1. To use different values, the numbers must be successively
stored in a register which transfers them to PS1 (See also <a href=
"#loops">DO-loops</a>):

<dl>
<dt></dt>

<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1
I=1,5</dd>

<dd><a href="man/rr.html">RR</a> X20</dd>

<dd>6.5 7.3 8.1 4.9 3.3</dd>

<dd>PS1</dd>

<dd>X20</dd>

<dd><a href="man/lb.html">LB</a>1</dd>
</dl>

a1330 11
<h2><a name="memory">Memory Allocation &amp;
Multiprocessors</a></h2>

In SPIDER most memory intensive operations now make use of run time
allocation (and deallocation) of necessary memory. 

<p>SPIDER contains directives which can be used by <i>OpenMP</i>
parallelizing Fortran compilers available on SGI, DEC, Linux, and
NT multiprocessor machines. The <a href="./man/md.html">MD</a>
operation with 'SET MP' can be used to limit the number of
processors used during SPIDER execution on such machines.</p>
a1331 3
<p></p>

<hr>
d1333 9
a1341 9

Unix systems have queues available for scheduling execution of
batch jobs and methods of placing a process in the background. Some
old notes on this are contained in: <a href=
"batch-unix_doc.html">batch-unix_doc.html.</a> 

<hr>
<p><small>Source: user_doc.html &nbsp;&nbsp;&nbsp; Last update: 9
Jul. 2004 &nbsp;&nbsp;&nbsp; ArDean Leith</small></p>
a1343 1

@


1.48
log
@mising >
@
text
@d1 1
d4 1
a4 1

a5 1

a6 1

d10 90
a99 10
<p>
This Guide covers issues relating to the syntax, conventions,
and running of SPIDER.  It also has a section that discusses 
<li><a href="#procedures">procedures</a> 
and how to write them. <a href="errors.html">Error
handling</a>, specialized <a href="documents.html">techniques and tools</a>,
details on <a href="formats.html">file formats</a>, and 
<a href="installation.html">distribution and instaSollation</a>, and
<a href="release.html">release notes</a>,
are discussed elsewhere.</p>
d101 9
a109 2
<p>
This guide is organized under the following headings:
d111 6
a116 45
<li><a href="#interactive">Running SPIDER Interactively</a>
	<ul>
	<li><a href="#starting">Starting a Session</a></li>
	<li><a href="#cmd_line">Optional Command Line Parameters</a></li>
	<li><a href="#input_cmd">The Operation Input Status</a></li>
	<li><a href="#input_info">User-Solicited Information</a></li>
            <ul>
            <li><a href="#file_names">File Names</a></li>
            <li><a href="#file_handling">File Handling</a></li>
            <li><a href="#file_opening">File Opening</a></li>
            <li><a href="#file_image">Image File Storage</a></li>
            <li><a href="#file_inline">Inline Files</a></li>
            <li><a href="#file_stack">Image Stack Files</a></li>
            <li><a href="#file_inline_stack">Inline Stack Files</a></li>
            <li><a href="#indexed_stack">Indexed Stack Files</a></li>
            <li><a href="#params">Parameter Values</a></li>
            </ul>
	<li><a href="#completion">Completion of an Operation</a></li>
	<li><a href="#ending">Ending a SPIDER Session</a></li>
	<li><a href="#file_nonimage">Non-Image files used by SPIDER</a></li>
            <ul>
            <li><a href="#file_results">RESULTS File</a></li>
            <li><a href="#file_log">LOG File</a></li>
            <li><a href="#file_doc">Document Files</a></li>
            </ul>
	<li><a href="#registers">Registers</a>
            <ul>
            <li><a href="#registers_special">Special System Registers</a></li>
            <li><a href="#registers_input">Registers [or Arithmetic Expressions] as Input Parameters</a></li>
            <li><a href="#registers_output">Registers as Output Parameters</a></li>
            <li><a href="#registers_saving">Saving and Unsaving Registers</a></li>
            </ul>
	<li><a href="#pocketcalc">SPIDER's Pocket Calculator</a></li>
            <ul>
            <li><a href="#arithmetic">Arithmetic Operations</a>
            <li><a href="#expressions">Expressions</a>
            <li><a href="#math_functions">Mathematical Functions</a>
            </ul>

	<li><a href="#comments">Comments</a></li>
	<li><a href="#loops">DO-Loops</a></li>
            <ul>
            <li><a href="#loops_variable">Variable Value Input in DO-Loops</a></li>
            </ul>
	</ul>
d119 14
a132 14
	<ul>
	<li><a href="#control">Procedure Control Files</a></li>
	<li><a href="#execution">Execution Rules</a></li>
	<li><a href="#new">Writing New Procedures</a></li>
            <ul>
            <li><a href="#symbolic">Symbolic Parameters</a></li>
            <li><a href="#symbolic_var">Variable Symbolic Parameters</a></li>
            <li><a href="#symbolic_loops">Symbolic Parameters in DO-Loops</a></li>
            </ul>
	<li><a href="#proc_registers">Using Registers in Nested Procedures</a></li>
            	(or Procedures called from Procedure Files)
	<li><a href="#argument">Argument Transfer</a></li>
	<li><a href="#proc_loops">Procedure calls in DO-Loops</a></li>
	</ul>
d134 4
a137 1
<li><a href="#memory">Memory Allocation & Multiprocessors</a></li>
d139 2
a140 2
<li><a href="#unix">Submitting Batch Jobs on UNIX systems</a> </li>
</ul> 
d142 15
d158 914
d1073 1
a1073 5
<p> SPIDER can be run either interactively or in a procedure mode.
Interactive mode means that user input on the terminal is solicited by
messages appearing on  the  screen.  In the procedure mode, control
input is taken from a procedure control file where it has to appear in
exactly the same sequence as in an interactive session.
d1075 344
a1418 1
<h2><a name="interactive">Running SPIDER Interactively</a></h2>
d1420 1
a1420 860
 We call a session the entire sequence of operations  from
the  start  of  SPIDER  to  the  execution  of  the 
<a href="man/en.html">EN</a> (ENd) operation.

<a name="starting"><h3>Starting The Session</h3></a>
    	Log on in your directory, then start SPIDER by typing:
            <dl><dt>
            <dd> spider
            <dd> &nbsp;&nbsp;&nbsp;or
            <dd> spider &lt;Prj&gt;/&lt;Dat&gt;
            </dl>
            <br><p>

	SPIDER will then print some introductory information including:
             <dl><dt>
             <dd>The version number and issue date for this version.
             </dl>

	If the PROJECT/DATA EXTENSION is not given on the command line,
	SPIDER will then respond with:
             <dl><dt>
	     <dd>.ENTER PROJECT/DATA EXTENSION:
	     &lt;Prj&gt;/&lt;Dat&gt; 
             </dl> 

	The  project  extension &lt;Prj&gt;  consists  of  a  three
	letter sequence, e.g,  'GLS', is used to identify procedure
	files, the LOG  file, and the  RESULTS  file  by attaching this
	sequence to the file names as an extension.<p>

             The data extension &lt;Dat&gt; is optional.  It consists of a  three
        letter sequence, e.g., 'SCI', and is used to identify the data
        files by attaching this sequence to  data  file  names  as  an
        extension.<p>    

             For example, an image file specified as <i>'ACF001'</i>  during
        the  SPIDER  session will have as a full filename <i>'ACF001.SCI'</i>
        if the above data extension <i>'SCI'</i> is used.<p>   

             A file created as an output file of  a  SPIDER  operation
        will  have  the  &lt;Dat&gt;  extension  attached to its SPIDER file
        name.  If no data extension is given, the system uses  the  project
        extension as data extension.<p>                     

             The set of files having the same data  extension  can  be
        thought  of  as  a library.  Within one session of SPIDER, all
        image files accessed and created belong to the same library.<p>  

             [Note, however, that the new extension operation 
        <a href="man/nc.html">NC</a> (New  Code)
        may  be  used  within  the  SPIDER run to redefine the project
        extension/data extension.]<p>       

             If more than one SPIDER session is being run in the same
        directory,  different project extensions should be used.<p>              

             Each input line typed by the user is echoed by SPIDER  on
        the subsequent line so that typing errors become apparent.<p>   

             Each line produced by SPIDER that requires input is
        preceded by a period, e.g., '.INPUT FILE:'.<p>

<a name="cmd_line"><h3><dt>Optional Command Line Parameters</dt></h3></a>
            SPIDER can accept optional command line parameters
         in addition to the PROJECT/DATA EXTENSION.  
            <dl>
            <dt>procedure</dt>
            <dd> Initial procedure to be run when starting SPIDER. 
                 The @@ sign is necessary now.</dd>
            <dt> Result file version number</dt>
            <dd> Result file version number version number to be 
                 used by SPIDER run.  This will superceed value
                 determined by incrementing current version number</dd>
            <dt> Register assignments.</dt>
            <dd> Inital register assignments when starting SPIDER.
                 These assignments will be inherited by any 
                 inital proceedure. </dd>
            </dl>

            <dl>
            <dt>An example of a SPIDER run with optional command line 
                parameters follows:</dt>
            
            <dd><i> spider prj/dat @@procname 17 x11=3 x12=4</i></dd>
            </dl>  

<a name="input_cmd"><h3>The Operation Input Status</h3></a>
	The  system  now  asks:
            <dl><dt>
            <dd>.OPERATION:
            </dl>
	All   available operations are specified  by two or more
        letter operations, e.g. <a href="man/li.html">LI</a>
        for LIsting selected rows of an image.  A list of the operations
        and their meanings is available in the
	<a href="operations_doc.html">index of operations</a> which
        is part of this SPIDER documentation.  You may want to
        obtain a hardcopy listing of this and post it next to the
	terminal for reference.]<p>

<a name="input_info"><h3>User-Solicited Information</h3></a>
             After a operation is entered, additional information needed
        to carry out the operation is solicited from the user.  This
        information may be grouped into the following
        categories:  (a) File information on input and output (mostly
        image) files, and  (b) Values of parameters.  These types of
        input are described in what follows.

<a name="file_names"><h4>File  Names</h4></a>
             These  are  sequences of alphanumeric characters,   
        normally  (but not  necessarily) of the form &lt;ABC&gt;&lt;###&gt; 
        where &lt;ABC&gt;  is any sequence of three or more
        characters  (the  prefix),  and  &lt;###&gt;  is three or more digit
        number.  If this convention is followed, files can be accessed
        under  control  of  SPIDER  <a href="#loops">DO-loops</a>.  The file name
        (without extension) can have  up  to  79  characters  and  the
        prefix  can  contain  directory
        information. For example,
         <i>../usr/people/myself/A12BCDE001</i> is acceptable.<p>

	     SPIDER can substitute for any portion of the file name at
	run time using a numerical value contained in <A
	HREF="#registers">registers</a>. Any text entered as part of a 
        filename which is enclosed
	between "{" and "}" brackets is presumed to be part of a
	desired substitution request.  <p>

               To substitute a register value into a file 
        name, use the sequence <i> {****X&lt;##&gt} </i> where the "*" string
        denotes the number of digits for the substitution and the "##" denote
        the register whose contents are to be substituted in place of
        the astericks.  Any register from <i> 0...99 </i> may be used for
        substitution.  E.g. if the the file name entered is <i> ABC6{***X11}
        </i> and the run time content of register X11 is the value
        <i>34</i>, then the resulting filename is: <i> ABC6034</i>.
        This mechanism can also be used inside a 
        <a href="#loops">DO-loop</a> to substitute 
        the current DO-loop index register value into a filename. 
        <p>

	There may be any number of substitution strings within a single
	filename, e.g. the following is a valid filename: <i>
	/usr/dir{*X33}/abcd{****X34} </i>, if the value in register X33
	only contains a single digit and the value in X34 has less than
	5 digits.  If the value to be substituted contains more digits
	than the number of astericks specified an <b> error will occur
	</b>.  <p> The less powerfull and more ambiguous <A
	HREF="oldfilenamesub.html">old formalism </a> for filename
	substitution is no longer available. <p>

             The full file name is the above character string  amended
        with  .&lt;Dat&gt;,  where  &lt;Dat&gt;  is the data extension specified at the
        beginning of the session.<p>

             The use of the  character  '*'  as  the  first  character
        (subsequent  ones are ignored) of the file name terminates the
        current operation and makes the system ready to accept  a  new
        operation.   Some  operations  with implied DO-loops continue to
        solicit input files until the escape character '*' is used  as
        a file name.  Examples include <a href="man/ad.html">AD</a> and  
	<a href="man/su.html">SU</a>.

<a name="file_handling"><h4>File Handling</h4></a>  
             The file whose  name  is  typed  in  is either an input
        or an output file.<p>

             Input files are assumed to exist and contain data used as
        input  to the operation.  The fact that a file is input to the
        operation does not necessarily exclude changes  to  the  file;
        An example of operations that changes the file is 
        <a href="man/ppll.html">PP LL</a> (Put Lines in image from 
        doc file) . <p>

             If an operation requires more than one input file,  these
        are  distinguished in the solicitation messages as 'INPUT1',
        'INPUT2', etc.     <p>

             In the case of the Cross-Correlation operation 
	(<a href="man/cc.html">CC</a>), one  of  the
        input  files  is used as a reference file, and is solicited as
        'REFERENCE FILE'.   <p>

             Output files can be either files that already  exist,  or
        files  that  are to be created under the name specified by the
        user.   Already  existing files having the same name are
        overwritten without a warning message.  <p>

             The dimensions of the output file are  dependent  on  the
        operation, and are either copied from the input file (e.g
        <a href="man/sh.html">SHift</a>,  <a href="man/rt.html">RoTate</a>)
	or  are solicited from the user (e.g.
        <a href="man/ip.html">InterPolate</a>, <a href="man/wi.html">WIndow</a>).

<a name="file_opening"><h4>File Opening</h4></a>  
             After each input file or output file specification,  
        SPIDER will attempt to open the file.  After the file is opened, 
        a statement is written on the terminal which has the following 
        form:<dl><dt>
                  <dd>&lt;ABC&gt;&lt;###&gt; /&lt;Title&gt;<br>
                  (&lt;T&gt;) &lt;NSAM&gt; &lt;NROW&gt; &lt;NSLICE&gt; 
                  CREATED &lt;Date&gt;  AT
                  &lt;Time&gt; &lt;D&gt; HEADER BYTES: &lt;BYTES&gt; <p>

        	<dd>where:
                <dl>
		<dt>&lt;ABC&gt;&lt;###&gt;
                <dd>is the file name.<p>

        	<dt>&lt;Title&gt;
                <dd>is the title previously entered by the user.<p>

		<dt>&lt;T&gt;
                <dd>is the data type code and has the
                    following values:<dl>
                    <dt><dd>
                    'O2' for mixed radix -2 Fourier data 
                        corresponding to odd-length real image data.<br>
                    'E2 for mixed radix -2 Fourier data 
                         corresponding to even-length real image data.<br>
                    'O3' for mixed radix -2 Fourier data 
                         corresponding to odd-length real volume data.<br>
                    'E3 for mixed radix -2 Fourier data corresponding 
                          to even-length real volume data.<br>
                    'R2' for 2D Real image data.<br>
                    'R3' for 3d Real volume data.<br>

		    'S2' for stacked 2D real image data.<br> 
                    'S3' for stacked 3D real volume data.<br> </dl>

		    'I2' for indexed, stacked 2D real image data.<br> 
                    'I3' for indexed, stacked 3D real volume data.<br> </dl>

		    The type code in the file label is used to prevent
		    operations inconsistent with the data format from
		    being carried out (e.g., Real data cannot be
		    inversely Fourier transformed)<p>

		<dt>&lt;NSAM&gt;,&lt;NROW&gt;,&lt;NSLICE&gt; 
                <dd>is the number of sampling points (columns),
                    number of rows, and number of slices in the
                    image.  In the case of Fourier transforms, 
                    the numbers correspond to those of the 
                    transformed image.<p>

     		<dt>&lt;Date&gt;,&lt;Time&gt; 
                <dd>is the date and time of file creation.<p>
     		<dt>&lt;D&gt; 
                <dd>is the disposition of the file.  The
                    following codes are used:<dl><dt>
                    <dd>'N' if file is newly created<br>
                        'O' if file is old
	           </dl><p>

     		<dt>&lt;BYTES&gt;
                <dd>is the number of bytes in the SPIDER header for
                    this file<p>
		</dl>
	</dl>
        In case of abnormal termination of the session, the  user  should
        carefully check the opening information of all files that were
        open when the program failed.  This will tell him/her  if  the
        image  format  was  correct, and if the correct image file has
        been accessed.

<a name="file_image"><h4>Image File Storage</h4></a>
	     The exact format in  which  images and volumes  are stored
	on disk along with their headers, and the contents of the
	headers is detailed <a href="formats.html#image">elsewhere</a>.
	The only operation that  accesses the image or volume files by
	explicit record numbers is <a href="man/li.html">LI</a>
	(LIst). This operation is useful for dumping image contents 
        or for debugging purposes.

<a name="file_inline"><h4>Inline Files</h4></a>
        Many SPIDER uses involve the creation of temporary image
        files which undergo further processing later in the
	session.  Computer access to these files is faster when they
	are kept in memory instead of being written out to disk.  A
	inline file is referred to as:  <i>_#</i>.  Where <i>_#</i>
	is one to three underscore symbol(s) followed by one or two
	digits.  Any such file is stored in memory as an "inline file".
	Ninety-nint inline files are available and they can hold any size
	image. An example of a filename that denotes an inline file
	number <i>2</i> is: <i>_2</i>.

<a name="file_stack"><h4>Image Stacks</h4></a>
     Multiple images can be stored within a single SPIDER "stack
     file".  A stack file differs from a SPIDER volume in that each
     image keeps its own full header. A stacked image is referred to
     as:  &lt;ABC&gt;&lt;###&gt;@@&lt;###&gt; where &lt;ABC&gt; is a
     sequence of alphanumeric characters and &lt;###&gt; is a sequence
     of digits. The digits afer the '@@' symbol represent the image
     number within a stack.  Stacked images can be used anywhere a
     normal SPIDER file name would be used.  An example of a filename
     that denotes image number <i>4056</i> inside stack file
     <i>fil001</i> is: <i> fil001@@4056</i>.

<a name="file_inline_stack"><h4>Inline Stack Files</h4></a>
     Inline stack files are available and should be useful on 
     machines with large physical memory. An inline stacked image is 
     referred  to as: &lt;_#&gt;@@&lt;###&gt;.  Where &lt;_#&gt; is 
     one to three underscore symbol(s) followed by a one or two digits 
     and
      <i>###</i> is a sequence of digits. The digits afer the '@@'
     symbol represent the image number within a stack.
      Inline stacked images can be used anywhere a normal
     SPIDER file name would be used.  In this case, the first
     time a particular inline stack is referenced you will be asked for
     the total number of images in the stack. Alternatively, a stack can
     be created using the <a href="./man/ms.html">MS</a>  (Make Stack) 
     operation.
     An example of a filename that denotes image number <i>4056</i>
     inside inline stack number two is: <i>_2@@4056</i>.
 
<a name="indexed_stack"><h4>Indexed Stack Files</h4></a>
     Both disk based and inline stack files are available with
     an index and may be  used like normal SPIDER stack files. An
     indexed stack may be useful if you have a sparsely populated large
     stack.  In an indexed stack there is an extra set of records 
     following the overall header that stores the indices.  Unlike a
     normal stack there is no space wasted for a missing image in
     the stack.  For indexed stacks the first
     time a particular indexed stack is referenced you will be asked for
     the maximum number of any image in the index.  For indexed inline
     stacks this number is usually different
     from the maximum number of images that can be held in the stack.
     An indexed stack 
     can only be created using the <a href="./man/msi.html">MS I</a> or
    <a href="./man/cpi.html">CP I</a> operations.
 
<a name="params"><h4>Parameter Values</h4></a>  
             Values of parameters solicited by an operation can be real, 
        integer, or alphanumeric.  Alphanumeric parameters are  used  to  
        specify options (e.g., (S)ine or (C)osine). <p>

             Real and integer parameters are read in without
        formatting  rules;  they can be at any place on the line,
        separated by commas or any number of blanks, and spread  out
        over any number of (non-blank) lines.  They are checked for
        correct type and possible typing errors.  Such errors and type
        inconsistencies result in an error message:<dl><dt>      

                  <dd>.BAD INPUT PARAMETER(S).  RE-ENTER:
		</dl>
        The user then has to re-enter the entire line containing the
        error.  For example, in <a href="man/ip.html">IP</a> (InterPolate), 
	the user enters the dimensions of the output file:<dl><dt>     
                  <dd>41 50.0 
		 </dl>    
        where only integer input is allowed.  After the error message,
        he has to re-enter:<dl><dt>              
                 <dd>41 50
		</dl>
             However, if he had entered the two  parameter  values  on
        two separate lines:<dl><dt>                                     
                  <dd>41
                  <dd>50
		</dl>
        then the error message would relate to the last line only, and
        it is this line only which he has to re-enter by typing:<dl><dt>      
                  <dd>50         
		</dl>

<a name="completion"><h3>Completion of an Operation</h3></a>
	    After successful completion of the operation, the  system
        returns   to   the  operation  input  status,  by  printing  the
        solicitation message '.OPERATION:' on the screen.    <p>

<a name="ending"><h3>Ending a SPIDER Session</h3></a>
             If you want to terminate the session, you sign  off  with
        the  <a href="man/en.html">EN</a> operation. 
	SPIDER then responds with the terminal message:<dl><dt>  
                  <dd>SPIDER NORMAL STOP              
		</dl>

<a name="file_nonimage"><h3>Non-Image files used by SPIDER</h3></a>
             SPIDER produces  two  files  as  a  result  of  the  user
        session:  the <a href="#file_results">RESULTS file</a> and the 
	<a href="#file_log">LOG file</a><p>

             SPIDER also produces and uses 
         <a href="#file_doc">document files</a>. Document files
        are keyed, formatted, sequential text files  used  to  store  
        register  contents and misc. numerical data.   Unlike 
        image files, they can be read and edited. <p>
            
<a name="file_results"><h4>RESULTS file</h4></a>  
	    During an interactive  session,  any  listings  generated
        that  are too lengthy to be listed at the terminal are written
        instead to the RESULTS file, RESULTS.&lt;Prj&gt;. This file also
        contains the protocol of any procedure started interactively. <p>

             During a procedure session, the  RESULTS  file  contains  the
        protocol  of  the  operation sequence executed, as well as lists
        generated by it in their logical order. <p>

             The <a href="./man/md.html">'MD'</a> operation with 'VB OFF' 
        (Verbose Off) can be used to decrease the amount of output
        from do-loops and from the 'SD' and 'UD IC' operations.
        This can decrease the length of RESULTS files by thousands of 
        lines. <p>

<a name="file_log"><h4>LOG file</h4></a> 
             The  LOG  file,  LOG.&lt;Prj&gt;, is a complete record of
        everything that has been typed in by the user during the
        interactive session.  It is sometimes useful as a record  of
        the session. 
 
<a name="file_doc"><h4>Document files</h4></a>
            These are keyed, <a href="docfile.html">formatted</a>, 
        sequential files  created  by
        executing  the  <a href="man/sd.html">SD</a> operation and certain 
        additional operations.  Document files are used to  permanently
        store  the  contents  of  a  group  of  registers (e.g., shift
        coordinates, angles, etc.) as  realized  in  different  images
        (specified  by  keys).  Any subsequent SPIDER run can retrieve
        these register values by their keys. <p>

             Document files are also used for communication between Web
        and SPIDER.  For example the "particle picking" operation in Web
        creates a set of document files used by certain operations in
        SPIDER. <p>

             Document files may also be used to define  a  processing
        protocol;  switch  on  and  off  the  execution  of 
        procedure files, or include/exclude images of  a  series  from
        processing depending on the result of previous operations. 

<a name="registers"><h3>Registers</h3></a>

             SPIDER has 100 system registers available, X0-X99. The
        number of registers may be increased using the 
		    <dd><a href="man/md.html">MD</a> operation with
        option "SET REGS". These registers
        are  used for storing and transferring parameter values.  
        A register can be filled in one of three ways:
	<OL>
        <li>as output resulting from an operation.
        <li>when used as an index in a do-loop.
        <li>by being explicitly set equal to a value or an
                      arithmetic expression
	</OL>
        For example, when SPIDER  asks  '.OPERATION:',  the  user  may
        type:<dl><dt>
                <dd>X10=3.14159
		</dl>
        System register X10 will then  have  the  value  3.14159.   To
        examine  the  contents  of a register, the user need only type
        the register he/she wishes to examine.  If 'X10'  was  entered
        in  the  above example, the contents of X10, 3.14159, would be
        printed on the screen. <p>

             All registers are set equal to zero at the start  of  the
        SPIDER session. <p>

<a name="registers_special"><h4>Special System Registers</h4></a>
             The first 10 registers, X0-X9, are reserved for SPIDER
        internal use, they should not be used for parameter transfer 
        between operations.     <p>

	The contents of special registers X0 and X9 are:<dl><dd>
		<table border=0>
                <tr valign=top><td>  X0 </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Index </td>
                <td>&nbsp;&nbsp;&nbsp;&nbsp;most recent value of the DO-loop index <br>
                 &nbsp;&nbsp;&nbsp;&nbsp;(updated
                      after each execution of the <a href="man/lb.html">LB</a># statement)</td><tr>

                 <TR VALIGN=TOp><td>  X9 </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Error flag</td><td>&nbsp;&nbsp;&nbsp;&nbsp;  [0 if no error occurred and
                                     1 if an error occured <br>&nbsp;&nbsp;&nbsp;&nbsp;in the most
                                     recent operation]</td><tr>
                </TABLE>
		</dl>
        [Registers 1..8 were used in early SPIDER
        releases for communicating file parameters but are no longer 
        supported in the current SPIDER releases!]

           Registers may appear in <a href="#arithmetic">arithmetic expressions</a>,
	<a href="#math_functions">mathematical functions</a>,  
	as <a href="#registers_input">input  parameters</a>, and as  
	<a href="#registers_output">output parameters</a> in
        operation lines.
	
<a name="registers_input"><h4>Registers [or Arithmetic Expressions] as Input Parameters</h4></a>

	     Registers  or  valid  arithmetic  expressions  containing
	registers  may  be  used  wherever  integer  or floating point
	values are solicited by operations. <p> 
                <dl><dt>Example 1:
		    <dd><a href="man/rt.html">RT</a> 
                    <dd>PIC001
		    <dd>PIC002 
                    <dd>X11
	</dl> 
        is a  valid  sequence:   the  contents  of  register
	X11  are interpreted as a rotation angle.<p> 
                 <dl><dt>Example 2:
		    <dd><a href="man/sh.html">SH</a> 
                    <dd>PIC001
		    <dd>PIC002 
                    <dd>X11,X12
	</dl> Here the contents of X11,X12 are interpreted as
	components  of a shift vector.<p> 
                 <dl><dt>Example 3:
		    <dd><a href="man/sh.html">SH</a> 
                     <dd>PIC001
		    <dd>PIC002 
                    <dd>(X114.3-X10),SIN(X123.14/180.)
	</dl> 
        Here each arithmetic expression is evaluated  first,
	and  the resulting  values  are  interpreted  as  components of
	a shift vector. <p>

             Note that the register content is always a floating point
        number.   If  read in as an integer, the closest integer value
        is used, e.g.  4 for 3.8, 3 for 3.2, -4 for -4.25, etc.  <p>

        Rules for use of registers or expressions as value input:    
		<OL>
        	<li> Mixing of registers or  expressions  with  numbers  is  not
        	allowed  in  the  input;  e.g.   X11,5  may not be used in
        	Example 2.                            

        	<li>  In  <a href="#loops">DO-loops</a>,  only one register  [or register
                set, respectively] or one  expression [or expression 
                set] may be used.  This set will be applied to each 
                run of the <a href="#loops">DO-loop</a>.     

        	<dl><dt>Example:  
		  	<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 X88=1,5
                  	<dd><a href="man/sh.html">SH</a>
                  	<dd>PIC{***X88}
                  	<dd>OUT{***X88}
                  	<dd>X11,X12
                  	<dd><a href="man/lb.html">LB</a>1 
		</dl>
        	This sequence will apply the values of X11,X12 to each run of
        	the  DO-loop.   Parentheses around X11,X12 are not needed:  if
        	each run of the DO-loop requires different values,  these  may
        	be introduced before the operation by an <a href="man/rr.html">RR</a> operation. <p>

        	<dl><dt>Example:  
		  	<dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 X88=1,5
                  	<dd><a href="man/rr.html">RR</a> X11 3.3, 1.5, 6.0, -8.1, 0.0
                        <dd>  RR  X12  -7.5,  5.1, 3.2, -0.4, 8.1
                  	<dd><a href="man/sh.html">SH</a> F
                  	<dd>PIC{***X88}
                  	<dd>OUT{***X88}
                  	<dd>X11,X12
                  	<dd><a href="man/lb.html">LB</a>1
       		</dl>                                   
		</OL>
<a name="registers_output"><h4>Registers as Output Parameters</h4></a>
             Some operations such as <a href="man/fs.html">FS</a>, 
	and  <a href="man/pk.html">PK</a>  allow  the
        specification  of  registers  to  accept  output  values.  For
        example, <a href="man/pk.html">PK</a> X11,X12.  After completion 
	of the <a href="man/pk.html">PK</a>  operation,
        the peak position components are contained in X11,X12.<p> 

             As an example for a value transfer between operations  by
        registers, consider the following sequence:<dl><dt>
                  <dd><a href="man/pk.html">PK</a> X11,X12
                  <dd>COR001
                  <dd>3
                  <dd><a href="man/sh.html">SH</a>
                  <dd>PIC001
                  <dd>NEW001
                  <dd>-X11,-X12
	          </dl>
        <a href="man/pk.html">PK</a> is  an  operation that searches for the peak  position
        in  a  file, normally a cross-correlation function.  It allows
        specification of output registers (in  the  example,  X11,X12)
        where  the peak coordinates are to be stored.  These registers
        may be used by any subsequent operation as floating  point  or
        integer  input, in this example by <a href="man/sh.html">SH</a> (SHift).  A minus sign
        may be used to invert the sign  of  the  value  input  from  a
        register.      

             Note  that  mixed  input  will  not  be  accepted   where
        parameters are solicited.  For example:<dl><dt>
                  <dd><a href="man/sh.html">SH</a>
                  <dd>PIC001
                  <dd>NEW001
                  <dd>-X11,15
		  </dl>
        will result in an error.  In this case, the value 15 should be
        introduced  into  one  of  the  registers  prior  to  the 'SH'
        operation, like this:<dl><dt>
                  <dd>X12=15
                  <dd><a href="man/sh.html">SH</a>
                  <dd>PIC001
                  <dd>NEW001
                  <dd>-X11,X12
                  </dl>                     
             Three  registers, X100-X102, are reserved for keeping  
        track of certain device-dependent parameters. 

<a name="registers_saving"><h4>Saving and Unsaving Registers</h4></a>
             At any given time during the session, the 
        contents of the registers X0 - X99 can be saved by using the 
        <a href="man/sr.html">SR</a>
        operation with the "save"  option.   Any subsequent  operations on 
        registers do not affect this stored register set. Execution of the
         <a href="man/sr.html">SR</a> operation 
        with "unsave" option will fetch the stored register set into the 
        working register area. <p>      

             Any number of register values can be saved in a permanent file 
        by using the <a href="man/sd.html">SD</a> (Save Document) operation. A subsequent 
	<a href="man/ud.html">UD</a> operation 
        issued in a different (or the same) session, refering  to  the  same 
        document file, retrieves these register values. For details on saving
        and unsaving registers, see the <a href="man/sd.html">SD</a> and 
        <a href="man/ud.html">UD</a> manual chapters.  <p>   

<a name="pocketcalc"><h3>SPIDER's Pocket Calculator</h3></a>
	     SPIDER  incorporates  a  "pocket  calculator"  
	which evaluates <a href="#arithmetic">arithmetic operations</a>,
	<a href="#expressions">expressions</a>, and
	<a href="#math_functions">mathematical functions</a>. 

<a name="arithmetic"><h4>Arithmetic Operations</h4></a>
	At the operation prompt in SPIDER, the  user  may
        type:<dl><dt>   
                   <dd>2*3+5
		   </dl>
        SPIDER will then respond with '11.0000'.<p>

	Available arithmetic operations are:
                  <dl><dd>
                  <TABLE BORDER=0)>
                  <tr><td>+ </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Addition</td></tr>       
                  <tr><td>- </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Subtraction</td></tr>        
                  <tr><td>* </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Multiplication</td></tr>       
                  <tr><td>/ </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Division</td></tr>            
                  <tr><td>** </td><td>&nbsp;&nbsp;&nbsp;&nbsp;Exponentiation</td></tr>
		  <tr><td><a href="#math_functions">mathematical function</td></tr>       	
		  </TABLE></dl>

<a name="expressions"><h4>Expressions</h4></a>
        Epressions can be used within the SPIDER calculator and
        also in certain operations such as 
        <a href="man/if.html">IF</a>,  
        <a href="man/if_goto.html">IF...GOTO</a>, and 
        <a href="man/if_then.html">IF THEN</a>. 
 
	Expressions are evaluated from left to right with
        standard rules of precedence with one important exception:
        <b>string of adjacent arithmetic operators are not allowed</b>.
        In addition, the user may
        specify negative numbers and parentheses just as he/she would
        normally.  For example, if the user typed:
                  <dl><dt>    
                  <dd>(3*(-2))*(2+6)
		 </dl>
        SPIDER would respond with '-48.0000'. <p>
        Scientific notation (i.e., 2.3E-4) is allowed. <p>

	These operations may be used to manipulate registers as well.
        For example, if the user typed the following sequence:
                  <dl><dt>
                  <dd>X11=4.1
                  <dd>2*X11
		  </dl>
        SPIDER would respond with 8.2000.  <p>  

	In addition, the user may set a register equal to an expression.  
        For example, if the user typed:
                  <dl><dt>
                  <dd>X12=9.6E-2
                  <dd>X12=X12+5  
		 </dl>
        SPIDER would store in X12 the value 14.6.<p>      

             If the user types an expression  that  does  not  conform
        with  the syntax rules of the conversion routines, SPIDER will
        respond with:
                   <dl><dt> 
                   <dd>  *** ERROR: INVALID ARITHMETIC EXPRESSION
		   </dl>
        Examples of valid expressions are:
                  <dl><dt>
                  <dd>2*(-6)
                  <dd>((3+6)*(7*3))**9.1
                  <dd>X11=(X12+7)*(X16/X13)
                  <dd>X11=3.4e-4*1.0
		 </dl>
        Examples of invalid expressions are:
                  <dl><dt>
                  <dd>X100          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Register number exceeds 99]
                  <dd>X12=(2+3      &nbsp;&nbsp;&nbsp;&nbsp;[Unbalanced parenthesis]
                  <dd>(2+3/6))      &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Unbalanced parenthesis]      
                  <dd>2*-6          &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Adjacent arithmetic operators]      
                  <dd>2*(-6E2)        &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[No dot in the number]
		  </dl>

<a name="math_functions"><h4>Mathematical functions</h4></a>

	Available mathematical functions are:<p>
            <dl><dd>
            <table border="0")
	    tr><td>PAD(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; next highest power of two of expression</td></TR	
            <tr><td>SIN(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; sine of expression</td></tr>
            <tr><td>COS(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; cosine of expression</td></tr>
            <tr><td>EXP(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; exponential of expression</td></tr>
            <tr><td>LOG(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; logarithm (Base 10) of expression</td></tr>
            <tr><td>LON(&lt;Expression&gt;)   </td><td>&nbsp;&nbsp;&nbsp;&nbsp; natural log of expression</td></tr>
            <tr><td>SQR(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; square root of expression</td></tr>
            <tr><td>INT(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; truncates to integer</td></tr>
            <tr><td>ABS(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; absolute value of expression</td></tr>
            <tr><td>ATA(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; arc tangent of expression (in degrees)</td></tr>
            <tr><td>ASI(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; arc sine of expression (in degrees)</td></tr>
            <tr><td>ACO(&lt;Expression&gt;)  </td><td>&nbsp;&nbsp;&nbsp;&nbsp; arc cosine of expression (in degrees)</td></tr>
            <tr><td>TAN(&lt;Expression&gt;)   </td><td>&nbsp;&nbsp;&nbsp;&nbsp; tangent of expression</td></tr>
            <tr><td>RAN(&lt;Any register&gt;)   </td><td>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random uniform number generator in the range from 0 to 1.</td></tr>
            <tr><td>RNN(&lt;Any register&gt;)   </td><td>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random number generator, normal distribution (0,1).</td></tr>
  	    </table></dl><p>

            where  &lt;Expression&gt;  stands for any   
            <a href="#expressions">valid math expression</a>.<p>
            All trigonometric functions use arguments (or give results)
            in degrees.<p>

	Examples of valid usage:<dl><dt>
		<dd>SIN(4.5/(X5-100.))
		<dd>X10=EXP(-400./X11**2)		
		<dd>X15=X14-SIN(45./180.*X91)
		<dd>X16=SIN(45./180.*X91)
		<dd>X15=X14-COS(LON(X16))
		<dd>X16=RAN(X14)    ; <EM> Value of X14 is not changed nor is
                                      it used for anything!</EM>

		</dl>

<a name="comments"><h3>Comments</h3></a>

             Comment  lines  may  be  inserted  in procedure  files.  
              A comment has the form:
                <dl>
                <dt></dt>
		<dd>; This is a comment             </dd>
		</dl>
        A comment is a non-executable statement that  will  simply  be
        printed out in the RESULTS file.     <p>

             Comments may also appear on any lines that  carry  SPIDER
        statements.  They must be separated from the last character of
        such a statement by  at  least  one  blank  and  a  semicolon.
        Example:
                <dl><dt></dt>
		<dd><a href="man/pd.html">PD</a> ; Now pad input image </dd> 
		<dd>PIC001	; From previous window            </dd> 
		<dd>PAD005	; Output will be used for FT      </dd>
		<dd>128,128	; Next power of two dimensions    </dd>
		<dd>Y		; Use average for padding         </dd>
		<dd>1,1		; Top left coord. arbitrary in    </dd>
		<dd>		; this case                       </dd>
		</dl>
         <p>           

        Exceptions are statements that specify sets of  numbers  using
        hyphens, e.g., in the input to operation <a href="man/as.html">AS</a>:  1-7,15-20.
        No comment is allowed in this type of statement. 

<a name="loops"><h3>DO-Loops</h3></a>

             DO-Loops similar to those in FORTRAN are available in
        SPIDER.  They are started by the statement:
                <dl><dt></dt>
                <dd><a href="man/do.html">DO</a> 
                    <a href="man/lb.html">LB</a>
                    &lt;L&gt;&nbsp;&nbsp; &lt;C&gt;=&lt;M&gt;,&lt;N&gt;  </dd>
		</dl>
        and terminated by:
                <dl><dt></dt>
                <dd><a href="man/lb.html">LB</a>&lt;L&gt;  </dd>
                </dl>
       where  
                <dl> 
		<dl>
                <dt>&lt;L&gt;</dt>
                <dd>is a one or two digit integer used for distinguishing 
                    the terminating label and the associated 
                    DO-loops.</dd>
         
                <dt>&lt;C&gt;</dt>
                <dd>is a <a href="#register">register</a> 
                  for the DO-loop index.</dd>

                <dt>&lt;M&gt;,&lt;N&gt; 
                <dd>are positive-valued integers or registers 
                      defining beginning and end of the DO-loop. 
                      Successively, the index &lt;C&gt; will be assigned 
                      the values &lt;M&gt;, &lt;M&gt;+1, &lt;M&gt;+2, ... &lt;N&gt;.
                      Note that &lt;N&gt; must be greater than &lt;M&gt;.  
                       &lt;M&gt; and &lt;N&gt; must be &lt; 100,000.</dd>
		</dl>
		</dl>
             DO-loops may be nested, but they must be distinguished by
        different labels and different index registers or symbols. 

<a name="loops_variable"><h4>Variable Value Input in DO-Loops</h4></a>
             There are basically two different uses of DO-loops in an image  
        processing application:
                <OL>
		<li>
                  Applying the same sequence of  operations  with  the
                  same parameter values to different images,
                  distinguished by numbered file names.
                <li>
                  Applying  the  same  sequence  of  operations   with
                  different parameter values to the same image. <p>
		</OL>
             To serve the first application, variable file  names  are
        provided:
                  <dl><dt></dt>
                  <dd>&lt;ABC&gt; {****&lt;C&gt;}  </dd>
                  </dl>
        where:
                  <dl><dt></dt>
                     <dl>   
                     <dt>&lt;ABC&gt;                         </dd>
                     <dd>is a file prefix,  the "*" (s) denote the
                     number of digits for the substitution and
                     <dt>&lt;C&gt;                           </dd>
                     <dd>is the DO-loop count register defined above. </dd> 
                     </dl>
		  </dl>
             To make variable parameter input possible, values may  be
        entered  as  arrays,  to  be  picked  according to the DO-loop
        count.  Example:
                  <dl><dt></dt>
                  <dd><a href="man/do.html">DO</a>          </dd>
                      <a href="man/lb.html">LB</a>1 X10=1,3 </dd>
                  <dd><a href="man/rt.html">RT</a>          </dd>
                  <dd>PIC{***X10}                           </dd>
                  <dd>OUT{***X10}                           </dd>
                  <dd>45.  61.  78                          </dd>
                  <dd><a href="man/lb.html">LB</a>1         </dd>
		  </dl>
        In this example, <a href="man/rt.html">RT</a> 
        uses the angles 45, 61  and  78  degrees
        with the pictures PIC001, PIC002, and PIC003, respectively.   <p>

             In the case of operations requiring  a  pair  of  numbers
        (e.g.,  shift  coordinates),  one  pair has to be provided for
        each run of the DO-loop.  However, if the same floating  point
        number  or  pair of numbers should be used for each run of the
        DO-loop, this may be specified by using a  single  number  (or
        pair of numbers) enclosed in parentheses.  Example:
                  <dl><dt></dt>
                  <dd><a href="man/do.html">DO </a> LB7 X88=5,9  </dd>
                  <dd><a href="man/sh.html">SH</a>               </dd>
                  <dd>ALL00{***X88}                              </dd>
                  <dd>SHI00{***X88}                              </dd>
                  <dd>(15,8)                                     </dd>
                  <dd><a href="man/lb.html">LB</a>7              </dd>
		  </dl>
        In this case, the shift parameter values 15,8 are  applied  to
        each image, starting with ALL005 and ending with ALL009.<p>
d1422 1
a1422 1
<HR>
d1425 163
a1587 1
<a name="control"><h3>Procedure Control Files</h3></a>
d1589 4
a1592 349
             Procedure control files are user-created files containing
        sequences of operations and parameter values.  Procedure files
        can have any alphanumeric name up to 80 characters but the
        name must begin with a letter.  Instead of taking
        the input from the terminal, SPIDER uses the control sequence
        as it appears in the procedure file.  All output that would
        normally appear on the terminal is directed to the RESULTS
        file, and no LOG file is created. <p>       

             To invoke a procedure when SPIDER asks
	'.OPERATION:', the  user  types an "at" sign <i>@@</i> 
        followed by the name of the procedure file without its extension.  

        <dl><dt></dt>
         <dd>.OPERATION: @@ALIGN10
         </dl>

       When calling a procedure from a another procedure file, the user puts the
        parameters  (if  any)  solicited  by  the procedure behind the
        calling statement in the same order  as  they  appear  in  the
        called procedure file.  For example:
                <dl>
		<dt>Let procedure AD1 contain the following: </dt>
		<dd><a href="man/ad.html">AD</a>             </dd>
		<dd>PIC001                                   </dd>
		<dd>?SECOND  PICTURE  TO   BE ADDED?         </dd>
		<dd>*                                        </dd>
		<dd><a href="man/re.html">RE</a>             </dd>
		<dt>and let procedure B01 contain the following: </dt>
		<dd><a href="man/rt.html">RT</a>             </dd>
		<dd>WOW001                                   </dd>
		<dd>OUT001                                   </dd>
		<dd>180.00                                   </dd>
		<dd>@@AD1                                      </dd>
		<dd>OUT001                                   </dd>
		<dd><a href="man/en.html">EN</a>             </dd>
		</dl>
	Then '.OPERATION:  @@B01' will cause WOW001 to be rotated by  180  degrees,  and
        stored  in  OUT001.   OUT001  will then be added to PIC001.  SPIDER
        will ultimately return to the level of the calling procedure file, and terminate
        the session.               
  
             Procedures allow the user to specify  parameters  at  run
        time. the
        procedure requires parameter values in  the  order  they  have
        been  <a href="#new">internally  defined  when the procedure was written</a>.<p>                                     

             When called in the interactive mode, the  procedure  will
        solicit the required parameters from the terminal.

              Solicitation messages enclosed  by  question  marks  will
        appear  in the order they are defined in the <a href="#new">
	procedure operation sequence.</a>.<p>

        Procedures may be called from:
            <OL>
            <li>another procedure
            <li>an interactive session
            </OL>

             If called from the interactive mode, when a 'RE'  operation
        is  encountered,  control  will  return  to  the terminal.  If
        called from another procedure file, control will be passed  to
        the operation following the procedure call. <p>          


<a name="execution"><h3>Execution Rules</h3></a>
	
             Standard  procedures  are  contained  in the 
        <a href="../proc/">SPIDER system's procedure directory</a> 
        with the extension <i>'spi'</i>.  
        These procedures form the standard procedure library for SPIDER. <p>

             For any procedure call, SPIDER will first scan the user's
        directory.   If  a procedure file under the given name
        is found, then this procedure becomes effective in  the  call.
        If  no  such  procedure is found, SPIDER will attempt to
        locate the given file with a <i>.spi</i> extension in the SPIDER 
        system's procedure directory. <p>

<a name="new"><h3>Writing New Procedures</h3></a>
        To create a procedure file the user must:
	     <OL>
            <li>Replace any parameter in the procedure file that the  user
            wishes  to  specify  at run time by a solicitation message
            enclosed in question marks, e.g., ?PICTURE  TO  BE  ADDED?
            (See below).

            <li>Replace the <a href="man/en.html">EN</a> operation at 
	    the end by a <a href="man/re.html">RE</a> operation.
	    </OL>

	At  execution  time,  the   user-specified   solicitation
        messages  are  the  only  messages  that  will  appear  on the
        terminal.            <p>

             For example, if the following procedure was called from
        the interactive mode:
            <dl><dt></dt>
            <dd><a href="man/ad.html">AD</a>
            <dd>PIC001
            <dd>?PICTURE TO BE ADDED?
            <dd>*
            <dd><a href="man/re.html">RE</a>
            </dl>
        SPIDER would print '?PICTURE TO BE ADDED?' at the terminal and
        wait  for  the user to specify the file to be added to PIC001.
        It would then add the two pictures, and upon encountering  the
        <a href="man/re.html">RE</a> operation, will return to the interactive mode.
        <p>
        One restriction exists on the definition of procedures:  
            The parameter to be specified at run time may not be a
            operation.  This restriction is imposed because each operation
            may produce a different number of subsequent
            solicitations.
	    

<a name="symbolic"><h4>Symbolic Parameters</h4></a>
             Frequently, one encounters  the situation where more 
        same information is required in the procedure more than once. For 
        example, the following procedure definition solicits the name 
        of the image to be aligned twice from the user:
            <p>
            <dl>
            <dd>; PROCEDURE TO ALIGN IMAGE WITH REFERENCE
            </p><p>
            <dd><a href="man/pd.html">PD</a>
            <dd>?UNALIGNED IMAGE? &lt;unaligned&gt;
            <dd>ACF001
            <dd>128,128
            <dd>N
            <dd>33,33
            </p><p>
            <dd><a href="man/pd.html">PD</a>
            <dd>?REFERENCE IMAGE?&lt;reference&gt; </dd>
            <dd>ACF002</dd>
            <dd>128,128</dd>
            <dd>N</dd>
            <dd>33,33</dd>
            </p><p>
            <dd><a href="man/ac.html">AC</a></dd>
            <dd>ACF001</dd>
            </p><p>
            <dd><a href="man/ac.html">AC</a></dd>
            <dd>ACF002</dd>
            </p><p>
            <dd><a href="man/or2.html">OR 2</a> X10</dd>
            <dd>ACF001</dd>
            <dd>ACF002</dd>
            <dd>5</dd>
            </p><p>
            <dd><a href="man/rt.html">RT</a></dd>
            <dd>&lt;unaligned&gt;  ; symbolic parameter that was set above</dd>
            <dd>?OUTPUT IMAGE?&lt;output&gt;</dd>
            <dd>X10</dd>
            </p><p>
            <dd><a href="man/rt.html">RE</a></dd>
            </dl>
            </p><p>
        SPIDER allows the user to  tie a symbolic parameter
        label to any procedure solicitation message (marked  by  a  ?...? ).  
        Later this symbolic parameter label can be used in place of the 
        repeated solicitation message.  The format for the label is: &lt;label&gt;, 
        where <i> label </i> may be any string. Note that the &lt;&gt; 
        brackets are required here to indicate a symbolic parameter label! <p>

             In the example for a procedure definition given above,
        the second occurrence of ?IMAGE TO BE ALIGNED? was
        be replaced by &lt;unaligned&gt;, since this is the label assigned at the first 
        occurance of the ?IMAGE TO BE ALIGNED? use.
        A run-time specification for ?IMAGE TO BE ALIGNED? will then
        be automatically applied to the input. <p>

<a name="symbolic_var"><h4>Variable Symbolic Parameters</h4></a>
 
             Symbolic parameters that represent file names may be modified 
        at run time by attaching a register. The specified  digits of the 
        filename are then replaced by new digits 
        according to the current value in the register.
        <p>
        <dl>
        <dt>Example --- 1:</dt>
            <dd>; PR1 -- procedure to list file statistics</dd>
            </p><p>
            <dd><a href="man/fr.html">FR</a></dd>
            <dd>?ENTER FIRST IMAGE?&lt;1&gt;</dd>
            </p><p>
            <dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 X88=2,10</dd>
            </p><p>
            <dd><a href="man/fs.html">FS</a></dd>
            <dd>&lt;1&gt;X88</dd>
            <dd>N</dd>
            <dd><a href="man/lb.html">LB</a>1</dd>
            </p><p>
            <dd><a href="man/re.html">RE</a></dd>
            </p><p>
        <dt>Calling sequence:</dt>
            <dd>@@PR1</dd>
            <dd>PIC001</dd>
	</dl>
        <p>

        In the <a href="#loops">DO-loop</a>,  PIC001 will then be replaced by PIC002,
        PIC003, ...  , PIC010.<dl>

        <dt>Example --- 2:</dt>
            </p><p>
            <dd>; PR2 --procedure to list file statistics</dd>
            <dd><a href="man/rr.html">RR</a>X15
            <dd>?PIC OUTPUT FILE NUMBER?&lt;picout&gt;</dd>
            </p><p>
            <dd><a href="man/fi.html">FI</a></dd>
            <dd>PIC{***X15}</dd>
            </p><p>
            <dd><a href="man/re.html">RE</a></dd>
            </p><p>
        <dt>Calling sequence:</dt>
            <dd>@@PR2</dd>
            <dd>5</dd>
	</dl>
        In this example, the operation <a href="man/fi.html">FI</a> is applied to PIC005.<dl>

        <dt>Example --- 3:</dt>
            <dd>;PR3</dd>
            </p><p>
            <dd><a href="man/fr.html">FR</a></dd>
            <dd>?ENTER ANY IMAGE OF SERIES? &lt;1&gt;</dd>
            </p><p>
            <dd><a href="man/rr.html">RR</a> X10</dd>
            <dd>?PICK OUT FILE NUMBER?&lt;2&gt;</dd>
            <dd><a href="man/fs.html">FS</a></dd>
            <dd>&lt;1&gt;X10</dd>
            </p><p>
                   
        <dt>Calling sequence:</dt>
            <dd>@@PR3</dd>
            <dd>PIC003</dd>
            <dd>20.</dd>
        </dl>          
        In this example, the operation <a href="man/fs.html">FS</a> is applied to PIC020.

<a name="symbolic_loops"><h4>Symbolic Parameters in DO-Loops</h4></a>
             Symbolic  parameters cause a transfer of the whole input value 
        at the time of the execution, not just the transfer of a single  
        number.  It is therefore possible to use a symbolic reference in 
        <a href="#loops">DO-loops</a>.

        <dl>
        <dt>Example:</dt>
            </p><p>
            <dd>;PR4 -- procedure file</dd>
            </p><p>
            <dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 X88=1,5</dd>
            </p><p>
            <dd><a href="man/sh.html">SH</a></dd>
            <dd>PIC{***X88}</dd>
            <dd>OUT{***X88}</dd>
            <dd>?ENTER SHIFT COMPONENTS?&lt;shifts&gt;</dd>
            </p><p>
            <dd><a href="man/sh.html">SH</a></dd>
            <dd>PAD{***X88}</dd>
            <dd>SCR{***X88}</dd>
            <dd>&lt;shifts&gt;</dd>
            </p><p>
            <dd><a href="man/lb.html">LB</a>1</dd>
            </p><p>
            <dd><a href="man/re.html">RE</a></dd>
            </p><p>
        <dt>Calling sequence:</dt>
            <dd>@@PR4</dd>
            <dd>5,1 4,3 8,5 10,1 0,0</dd>
        </dl>

        In this example, each pair of components is applied to both
        <a href="man/sh.html">SH</a> operations; i.e.   
        5,1 for I=1, 4,3 for I=2, etc. See
        <a href="#loops">DO-loops</a>.

<a name="proc_registers"><h3>Using Registers in Nested Procedures
        </h3></a>
        Registers, in calling procedure  control  files,
        are  independent  of  registers  within the procedures called.
        However, if values need to be  transferred  from  the  calling
        procedure  to  the  procedure called, either 
	<a href="#argument">argument transfer</a>
        or the operation <a href="man/rr.html">RR</a> may be used.       

<a name="argument"><h3>Argument Transfer</h3></a>
             Procedure calls may contain up to 12 register arguments if
        these  are  matched  by  a  defining  argument sequence in the
        procedure called.  The defining argument sequence must  appear
        as the first line of the procedure (before any comments), 
        and must be of the form:
            <dl><dt>
            <dd>[X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,...]
            </dl>
        where X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,...  are registers  appearing  in  the
        procedure.   The calling sequence must have the same number of
        registers, and must be of the form:
            <dl><dt>
            <dd>@@&lt;PROCNAME&gt;[X&lt;M1&gt;,X&lt;M2&gt;,X&lt;M3&gt;,...].
            </dl>
        Register values are passed in both  directions;
        i.e.,   from  the  upper  to  the  lower  level  and
        vice-versa.
            <dl>
            <dt>
            <dd>X20=1
            <dd>X30=5
            <dd>X40=-4
            <dd>@@PROC[X20,X30,X40]
            </dl>
        will result in the values:
            <dl><dt>
            <dd>X20=2
            <dd>X30=-20
            <dd>X40=-2
            </dl>
        if the procedure is defined as follows:
            <dl><dt>
            <dd>[X10,X11,X12]
            <dd>X10=X10*2
            <dd>X11=X11*X12
            <dd>X12=X12/2
            <dd><a href="man/re.html">RE</a>
            </dl>
<a name="proc_loops"><h3>Procedure calls in DO-Loops</h3></a>
           An important restriction applies if a procedure
        is   called  within  a  <a href="#loops">DO-loop</a>.   Specifically,  if
        different parameter values are to  be  used  in  the
        different  runs  of  the  <a href="#loops">DO-loop</a>,  they must not be
        entered as a string of numbers:<dl><dt>
            <dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 I=1,5
            <dd>PS1
            <dd>6.5 7.3 8.1 4.9 3.3
            <dd><a href="man/lb.html">LB</a>1
            </dl>
        will result in the value 6.5 being  repeatedly  used
        by  procedure  PS1.   To  use  different values, the
        numbers must be successively stored  in  a  register
        which  transfers  them  to  PS1 
	(See also <a href="#loops">DO-loops</a>):<dl><dt>
            <dd><a href="man/do.html">DO</a> <a href="man/lb.html">LB</a>1 I=1,5
            <dd><dd><a href="man/rr.html">RR</a> X20
            <dd>6.5 7.3 8.1 4.9 3.3
            <dd>PS1
            <dd>X20
            <dd><a href="man/lb.html">LB</a>1
            </dl>
d1594 438
d2033 5
d2039 5
a2043 9
<h2><a name="memory">Memory Allocation & Multiprocessors</a></h2>
    In SPIDER most memory intensive operations now make use of run time
    allocation (and deallocation) of necessary memory. <p>

    SPIDER contains directives which can be used by <i>OpenMP</i>  parallelizing
    Fortran compilers available on SGI, DEC, Linux, and NT multiprocessor machines.  The 
    <a href="./man/md.html">MD</a>  operation with 'SET MP' can be used to 
    limit the number of processors used during SPIDER execution on such machines. 
    <p>
d2045 2
d2048 1
d2050 8
a2057 10
<h2><a name="unix">Submitting Batch Jobs on UNIX systems</a></h2>
    Unix systems have queues available for scheduling execution of
    batch jobs and methods of placing a process in the background.  Some
    old notes on this are contained in:  
    <a href="batch-unix_doc.html">batch-unix_doc.html.</a>

<hr> <p><small>
Source:      user_doc.html  &nbsp;&nbsp;&nbsp;  
Last update: 9 Jul. 2004  &nbsp;&nbsp;&nbsp;
ArDean Leith  </small></p>
d2060 1
@


1.47
log
@update date
@
text
@d732 1
a732 1
                  <TABLE BORDER=0)
@


1.46
log
@indexed stacks
@
text
@d1340 1
a1340 1
Last update: 23 Jan. 2003  &nbsp;&nbsp;&nbsp;
@


1.45
log
@inline files --> 99
@
text
@d3 1
d5 1
d27 4
a30 4
	<li><a href="#starting">Starting a Session</a>
	<li><a href="#cmd_line">Optional Command Line Parameters</a>
	<li><a href="#input_cmd">The Operation Input Status</a>
	<li><a href="#input_info">User-Solicited Information</a>
d32 9
a40 8
            <li><a href="#file_names">File Names</a>
            <li><a href="#file_handling">File Handling</a>
            <li><a href="#file_opening">File Opening</a>
            <li><a href="#file_image">Image File Storage</a>
            <li><a href="#file_inline">Inline Files</a>
            <li><a href="#file_stack">Image Stack Files</a>
            <li><a href="#file_inline_stack">Inline Stack Files</a>
            <li><a href="#params">Parameter Values</a>
d42 3
a44 3
	<li><a href="#completion">Completion of an Operation</a>
	<li><a href="#ending">Ending a SPIDER Session</a>
	<li><a href="#file_nonimage">Non-Image files used by SPIDER</a>
d46 3
a48 3
            <li><a href="#file_results">RESULTS File</a>
            <li><a href="#file_log">LOG File</a>
            <li><a href="#file_doc">Document Files</a>
d52 4
a55 4
            <li><a href="#registers_special">Special System Registers</a>
            <li><a href="#registers_input">Registers [or Arithmetic Expressions] as Input Parameters</a>
            <li><a href="#registers_output">Registers as Output Parameters</a>
            <li><a href="#registers_saving">Saving and Unsaving Registers</a>
d57 1
a57 1
	<li><a href="#pocketcalc">SPIDER's Pocket Calculator</a>
d64 2
a65 2
	<li><a href="#comments">Comments</a>
	<li><a href="#loops">DO-Loops</a>
d67 1
a67 1
            <li><a href="#loops_variable">Variable Value Input in DO-Loops</a>
d71 1
a71 1
<li><a href="#procedures">Running SPIDER in Procedure Mode</a>
d73 3
a75 3
	<li><a href="#control">Procedure Control Files</a>
	<li><a href="#execution">Execution Rules</a>
	<li><a href="#new">Writing New Procedures</a>
d77 3
a79 3
            <li><a href="#symbolic">Symbolic Parameters</a>
            <li><a href="#symbolic_var">Variable Symbolic Parameters</a>
            <li><a href="#symbolic_loops">Symbolic Parameters in DO-Loops</a>
d81 1
a81 1
	<li><a href="#proc_registers">Using Registers in Nested Procedures</a>
d83 2
a84 2
	<li><a href="#argument">Argument Transfer</a>
	<li><a href="#proc_loops">Procedure calls in DO-Loops</a>
d87 1
a87 1
<li><a href="#memory">Memory Allocation & Multiprocessors</a>
d89 4
a92 1
<li><a href="#unix">Submitting Batch Jobs on UNIX systems</a> </ul> 
d94 1
a94 1
<HR><p> SPIDER can be run either interactively or in a procedure mode.
d113 1
a113 1
            <BR><p>
d300 1
a300 1
                  <dd>&lt;ABC&gt;&lt;###&gt; /&lt;Title&gt;<BR>
d318 1
a318 1
                        corresponding to odd-length real image data.<BR>
d320 1
a320 1
                         corresponding to even-length real image data.<BR>
d322 1
a322 1
                         corresponding to odd-length real volume data.<BR>
d324 3
a326 3
                          to even-length real volume data.<BR>
                    'R2' for 2D Real image data.<BR>
                    'R3' for 3d Real volume data.<BR>
d328 2
a329 2
		    'S2' for stacked 2D real image data.<BR> 
                    'S3' for stacked 3D real volume data.<BR> </dl>
d331 3
d351 1
a351 1
                    <dd>'N' if file is newly created<BR>
d401 2
a402 2
     machines with large physical memory. An inline stacked image is referred 
     to as: &lt;_#&gt;@@&lt;###&gt;.  Where &lt;_#&gt; is 
d404 1
a404 1
    and
d411 1
a411 1
     be created using the <a href="./man/ms.html"> MS </a>  (Make Stack) 
d416 16
d563 3
a565 3
		<TABLE BORDER=0>
                <TR VALIGN=TOp><TD>  X0 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Index </TD>
                <TD>&nbsp;&nbsp;&nbsp;&nbsp;most recent value of the DO-loop index <BR>
d567 1
a567 1
                      after each execution of the <a href="man/lb.html">LB</a># statement)</TD><TR>
d569 3
a571 3
                 <TR VALIGN=TOp><TD>  X9 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Error flag</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;  [0 if no error occurred and
                                     1 if an error occured <BR>&nbsp;&nbsp;&nbsp;&nbsp;in the most
                                     recent operation]</TD><TR>
d733 6
a738 6
                  <TR><TD>+ </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Addition</TD></TR>       
                  <TR><TD>- </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Subtraction</TD></TR>        
                  <TR><TD>* </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Multiplication</TD></TR>       
                  <TR><TD>/ </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Division</TD></TR>            
                  <TR><TD>** </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Exponentiation</TD></TR>
		  <TR><TD><a href="#math_functions">mathematical function</TD></TR>       	
d802 17
a818 17
            <TABLE BORDER=0)
	    TR><TD>PAD(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; next highest power of two of expression</TD></TR	
            <TR><TD>SIN(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; sine of expression</TD></TR>
            <TR><TD>COS(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; cosine of expression</TD></TR>
            <TR><TD>EXP(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; exponential of expression</TD></TR>
            <TR><TD>LOG(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; logarithm (Base 10) of expression</TD></TR>
            <TR><TD>LON(&lt;Expression&gt;)   </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; natural log of expression</TD></TR>
            <TR><TD>SQR(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; square root of expression</TD></TR>
            <TR><TD>INT(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; truncates to integer</TD></TR>
            <TR><TD>ABS(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; absolute value of expression</TD></TR>
            <TR><TD>ATA(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; arc tangent of expression (in degrees)</TD></TR>
            <TR><TD>ASI(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; arc sine of expression (in degrees)</TD></TR>
            <TR><TD>ACO(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; arc cosine of expression (in degrees)</TD></TR>
            <TR><TD>TAN(&lt;Expression&gt;)   </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; tangent of expression</TD></TR>
            <TR><TD>RAN(&lt;Any register&gt;)   </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random uniform number generator in the range from 0 to 1.</TD></TR>
            <TR><TD>RNN(&lt;Any register&gt;)   </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random number generator, normal distribution (0,1).</TD></TR>
  	    </TABLE></dl><p>
d1319 1
d1325 1
a1325 1
    Fortran compilers available on SGI, DEC, and NT multiprocessor machines.  The 
d1331 1
d1340 2
a1341 2
Last update: 27 June 2002  &nbsp;&nbsp;&nbsp;
ArDean Leith  </small><p>
@


1.44
log
@sympar
@
text
@d371 4
a374 4
	inline file is referred to as:  &lt;_#&gt;.  Where &lt;_#&gt;
	is one to three underscore symbol(s) followed by a single
	digit.  Any such file is stored in memory as an "inline file".
	Nine inline files are available and they can hold any size
d394 3
a396 2
     one to three underscore symbol(s) followed by a single digit and
      &lt;###&gt; is a sequence of digits. The digits afer the '@@'
@


1.43
log
@.sys --> .spi
@
text
@d1 4
a4 4
<HTML>
<HEAD>
<TITLE>SPIDER: Working with SPIDER - A User's Guide</TITLE>
</HEAD>
d6 2
a7 2
<BODY>
<H2 ALIGN=CENTER>WORKING WITH SPIDER - A USER'S GUIDE</H2>
d9 1
d12 9
a20 8
<LI><A HREF="#procedures">procedures</A> 
and how to write them. <A HREF="errors.html">Error
handling</A>, specialized <A HREF="documents.html">techniques and tools</A>,
details on <A HREF="formats.html">file formats</A>, and 
<A HREF="installation.html">distribution and installation</A>, and
<A HREF="release.html">release notes</A>,
are discussed elsewhere.
<P>
d22 57
a78 57
<UL>
<LI><A HREF="#interactive">Running SPIDER Interactively</A>
	<UL>
	<LI><A HREF="#starting">Starting a Session</A>
	<LI><A HREF="#cmd_line">Optional Command Line Parameters</A>
	<LI><A HREF="#input_cmd">The Operation Input Status</A>
	<LI><A HREF="#input_info">User-Solicited Information</A>
            <UL>
            <LI><A HREF="#file_names">File Names</A>
            <LI><A HREF="#file_handling">File Handling</A>
            <LI><A HREF="#file_opening">File Opening</A>
            <LI><A HREF="#file_image">Image File Storage</A>
            <LI><A HREF="#file_inline">Inline Files</A>
            <LI><A HREF="#file_stack">Image Stack Files</A>
            <LI><A HREF="#file_inline_stack">Inline Stack Files</A>
            <LI><A HREF="#params">Parameter Values</A>
            </UL>
	<LI><A HREF="#completion">Completion of an Operation</A>
	<LI><A HREF="#ending">Ending a SPIDER Session</A>
	<LI><A HREF="#file_nonimage">Non-Image files used by SPIDER</A>
            <UL>
            <LI><A HREF="#file_results">RESULTS File</A>
            <LI><A HREF="#file_log">LOG File</A>
            <LI><A HREF="#file_doc">Document Files</A>
            </UL>
	<LI><A HREF="#registers">Registers</A>
            <UL>
            <LI><A HREF="#registers_special">Special System Registers</A>
            <LI><A HREF="#registers_input">Registers [or Arithmetic Expressions] as Input Parameters</A>
            <LI><A HREF="#registers_output">Registers as Output Parameters</A>
            <LI><A HREF="#registers_saving">Saving and Unsaving Registers</A>
            </UL>
	<LI><A HREF="#pocketcalc">SPIDER's Pocket Calculator</A>
            <UL>
            <LI><A HREF="#arithmetic">Arithmetic Operations</A>
            <LI><A HREF="#expressions">Expressions</A>
            <LI><A HREF="#math_functions">Mathematical Functions</A>
            </UL>

	<LI><A HREF="#comments">Comments</A>
	<LI><A HREF="#loops">DO-Loops</A>
            <UL>
            <LI><A HREF="#loops_variable">Variable Value Input in DO-Loops</A>
            </UL>
	</UL>

<LI><A HREF="#procedures">Running SPIDER in Procedure Mode</A>
	<UL>
	<LI><A HREF="#control">Procedure Control Files</A>
	<LI><A HREF="#execution">Execution Rules</A>
	<LI><A HREF="#new">Writing New Procedures</A>
            <UL>
            <LI><A HREF="#symbolic">Symbolic Parameters</A>
            <LI><A HREF="#symbolic_var">Variable Symbolic Parameters</A>
            <LI><A HREF="#symbolic_loops">Symbolic Parameters in DO-Loops</A>
            </UL>
	<LI><A HREF="#proc_registers">Using Registers in Nested Procedures</A>
d80 3
a82 3
	<LI><A HREF="#argument">Argument Transfer</A>
	<LI><A HREF="#proc_loops">Procedure calls in DO-Loops</A>
	</UL>
d84 1
a84 1
<LI><A HREF="#memory">Memory Allocation & Multiprocessors</A>
d86 1
a86 1
<LI><A HREF="#unix">Submitting Batch Jobs on UNIX systems</A> </UL> 
d88 1
a88 1
<HR><P> SPIDER can be run either interactively or in a procedure mode.
d94 1
a94 1
<H2><A NAME="interactive">Running SPIDER Interactively</A></H2>
d98 1
a98 1
<A HREF="man/en.html">EN</A> (ENd) operation.
d100 1
a100 1
<A NAME="starting"><H3>Starting The Session</H3></A>
d102 6
a107 6
            <DL><DT>
            <DD> spider
            <DD> &nbsp;&nbsp;&nbsp;or
            <DD> spider &lt;Prj&gt;/&lt;Dat&gt;
            </DL>
            <BR><P>
d110 3
a112 3
             <DL><DT>
             <DD>The version number and issue date for this version.
             </DL>
d116 2
a117 2
             <DL><DT>
	     <DD>.ENTER PROJECT/DATA EXTENSION:
d119 1
a119 1
             </DL> 
d124 1
a124 1
	sequence to the file names as an extension.<P>
d129 1
a129 1
        extension.<P>    
d131 3
a133 3
             For example, an image file specified as <I>'ACF001'</I>  during
        the  SPIDER  session will have as a full filename <I>'ACF001.SCI'</I>
        if the above data extension <I>'SCI'</I> is used.<P>   
d138 1
a138 1
        extension as data extension.<P>                     
d142 1
a142 1
        image files accessed and created belong to the same library.<P>  
d145 1
a145 1
        <A HREF="man/nc.html">NC</A> (New  Code)
d147 1
a147 1
        extension/data extension.]<P>       
d150 1
a150 1
        directory,  different project extensions should be used.<P>              
d153 1
a153 1
        the subsequent line so that typing errors become apparent.<P>   
d156 1
a156 1
        preceded by a period, e.g., '.INPUT FILE:'.<P>
d158 1
a158 1
<A NAME="cmd_line"><H3><DT>Optional Command Line Parameters</DT></H3></A>
d161 6
a166 6
            <DL>
            <DT>procedure</DT>
            <DD> Initial procedure to be run when starting SPIDER. 
                 The @@ sign is necessary now.</DD>
            <DT> Result file version number</DT>
            <DD> Result file version number version number to be 
d168 3
a170 3
                 determined by incrementing current version number</DD>
            <DT> Register assignments.</DT>
            <DD> Inital register assignments when starting SPIDER.
d172 2
a173 2
                 inital proceedure. </DD>
            </DL>
d175 3
a177 3
            <DL>
            <DT>An example of a SPIDER run with optional command line 
                parameters follows:</DT>
d179 2
a180 2
            <DD><I> spider prj/dat @@procname 17 x11=3 x12=4</I></DD>
            </DL>  
d182 1
a182 1
<A NAME="input_cmd"><H3>The Operation Input Status</H3></A>
d184 3
a186 3
            <DL><DT>
            <DD>.OPERATION:
            </DL>
d188 1
a188 1
        letter operations, e.g. <A HREF="man/li.html">LI</A>
d191 1
a191 1
	<A HREF="operations_doc.html">index of operations</A> which
d194 1
a194 1
	terminal for reference.]<P>
d196 1
a196 1
<A NAME="input_info"><H3>User-Solicited Information</H3></A>
d204 1
a204 1
<A NAME="file_names"><H4>File  Names</H4></A>
d210 1
a210 1
        under  control  of  SPIDER  <A HREF="#loops">DO-loops</A>.  The file name
d214 1
a214 1
         <I>../usr/people/myself/A12BCDE001</I> is acceptable.<P>
d218 1
a218 1
	HREF="#registers">registers</A>. Any text entered as part of a 
d221 1
a221 1
	desired substitution request.  <P>
d224 1
a224 1
        name, use the sequence <I> {****X&lt;##&gt} </I> where the "*" string
d227 4
a230 4
        the astericks.  Any register from <I> 0...99 </I> may be used for
        substitution.  E.g. if the the file name entered is <I> ABC6{***X11}
        </I> and the run time content of register X11 is the value
        <I>34</I>, then the resulting filename is: <I> ABC6034</I>.
d232 1
a232 1
        <A HREF="#loops">DO-loop</A> to substitute 
d234 1
a234 1
        <P>
d237 2
a238 2
	filename, e.g. the following is a valid filename: <I>
	/usr/dir{*X33}/abcd{****X34} </I>, if the value in register X33
d241 4
a244 4
	than the number of astericks specified an <B> error will occur
	</B>.  <P> The less powerfull and more ambiguous <A
	HREF="oldfilenamesub.html">old formalism </A> for filename
	substitution is no longer available. <P>
d248 1
a248 1
        beginning of the session.<P>
d255 2
a256 2
        a file name.  Examples include <A HREF="man/ad.html">AD</A> and  
	<A HREF="man/su.html">SU</A>.
d258 1
a258 1
<A NAME="file_handling"><H4>File Handling</H4></A>  
d260 1
a260 1
        or an output file.<P>
d266 2
a267 2
        <A HREF="man/ppll.html">PP LL</A> (Put Lines in image from 
        doc file) . <P>
d271 1
a271 1
        'INPUT2', etc.     <P>
d274 1
a274 1
	(<A HREF="man/cc.html">CC</A>), one  of  the
d276 1
a276 1
        'REFERENCE FILE'.   <P>
d281 1
a281 1
        overwritten without a warning message.  <P>
d285 1
a285 1
        <A HREF="man/sh.html">SHift</A>,  <A HREF="man/rt.html">RoTate</A>)
d287 1
a287 1
        <A HREF="man/ip.html">InterPolate</A>, <A HREF="man/wi.html">WIndow</A>).
d289 1
a289 1
<A NAME="file_opening"><H4>File Opening</H4></A>  
d293 2
a294 2
        form:<DL><DT>
                  <DD>&lt;ABC&gt;&lt;###&gt; /&lt;Title&gt;<BR>
d297 1
a297 1
                  &lt;Time&gt; &lt;D&gt; HEADER BYTES: &lt;BYTES&gt; <P>
d299 12
a310 12
        	<DD>where:
                <DL>
		<DT>&lt;ABC&gt;&lt;###&gt;
                <DD>is the file name.<P>

        	<DT>&lt;Title&gt;
                <DD>is the title previously entered by the user.<P>

		<DT>&lt;T&gt;
                <DD>is the data type code and has the
                    following values:<DL>
                    <DT><DD>
d323 1
a323 1
                    'S3' for stacked 3D real volume data.<BR> </DL>
d328 1
a328 1
		    inversely Fourier transformed)<P>
d330 2
a331 2
		<DT>&lt;NSAM&gt;,&lt;NROW&gt;,&lt;NSLICE&gt; 
                <DD>is the number of sampling points (columns),
d335 1
a335 1
                    transformed image.<P>
d337 6
a342 6
     		<DT>&lt;Date&gt;,&lt;Time&gt; 
                <DD>is the date and time of file creation.<P>
     		<DT>&lt;D&gt; 
                <DD>is the disposition of the file.  The
                    following codes are used:<DL><DT>
                    <DD>'N' if file is newly created<BR>
d344 1
a344 1
	           </DL><P>
d346 5
a350 5
     		<DT>&lt;BYTES&gt;
                <DD>is the number of bytes in the SPIDER header for
                    this file<P>
		</DL>
	</DL>
d357 1
a357 1
<A NAME="file_image"><H4>Image File Storage</H4></A>
d360 1
a360 1
	headers is detailed <A HREF="formats.html#image">elsewhere</A>.
d362 1
a362 1
	explicit record numbers is <A HREF="man/li.html">LI</A>
d366 1
a366 1
<A NAME="file_inline"><H4>Inline Files</H4></A>
d376 1
a376 1
	number <I>2</I> is: <I>_2</I>.
d378 1
a378 1
<A NAME="file_stack"><H4>Image Stacks</H4></A>
d387 2
a388 2
     that denotes image number <I>4056</I> inside stack file
     <I>fil001</I> is: <I> fil001@@4056</I>.
d390 1
a390 1
<A NAME="file_inline_stack"><H4>Inline Stack Files</H4></A>
d401 1
a401 1
     be created using the <A HREF="./man/ms.html"> MS </A>  (Make Stack) 
d403 2
a404 2
     An example of a filename that denotes image number <I>4056</I>
     inside inline stack number two is: <I>_2@@4056</I>.
d406 1
a406 1
<A NAME="params"><H4>Parameter Values</H4></A>  
d409 1
a409 1
        specify options (e.g., (S)ine or (C)osine). <P>
d416 1
a416 1
        inconsistencies result in an error message:<DL><DT>      
d418 2
a419 2
                  <DD>.BAD INPUT PARAMETER(S).  RE-ENTER:
		</DL>
d421 4
a424 4
        error.  For example, in <A HREF="man/ip.html">IP</A> (InterPolate), 
	the user enters the dimensions of the output file:<DL><DT>     
                  <DD>41 50.0 
		 </DL>    
d426 3
a428 3
        he has to re-enter:<DL><DT>              
                 <DD>41 50
		</DL>
d430 4
a433 4
        two separate lines:<DL><DT>                                     
                  <DD>41
                  <DD>50
		</DL>
d435 3
a437 3
        it is this line only which he has to re-enter by typing:<DL><DT>      
                  <DD>50         
		</DL>
d439 1
a439 1
<A NAME="completion"><H3>Completion of an Operation</H3></A>
d442 1
a442 1
        solicitation message '.OPERATION:' on the screen.    <P>
d444 1
a444 1
<A NAME="ending"><H3>Ending a SPIDER Session</H3></A>
d446 4
a449 4
        the  <A HREF="man/en.html">EN</A> operation. 
	SPIDER then responds with the terminal message:<DL><DT>  
                  <DD>SPIDER NORMAL STOP              
		</DL>
d451 1
a451 1
<A NAME="file_nonimage"><H3>Non-Image files used by SPIDER</H3></A>
d453 2
a454 2
        session:  the <A HREF="#file_results">RESULTS file</A> and the 
	<A HREF="#file_log">LOG file</A><P>
d457 1
a457 1
         <A HREF="#file_doc">document files</A>. Document files
d460 1
a460 1
        image files, they can be read and edited. <P>
d462 1
a462 1
<A NAME="file_results"><H4>RESULTS file</H4></A>  
d466 1
a466 1
        contains the protocol of any procedure started interactively. <P>
d470 1
a470 1
        generated by it in their logical order. <P>
d472 1
a472 1
             The <A HREF="./man/md.html">'MD'</A> operation with 'VB OFF' 
d476 1
a476 1
        lines. <P>
d478 1
a478 1
<A NAME="file_log"><H4>LOG file</H4></A> 
d484 2
a485 2
<A NAME="file_doc"><H4>Document files</H4></A>
            These are keyed, <A HREF="docfile.html">formatted</A>, 
d487 1
a487 1
        executing  the  <A HREF="man/sd.html">SD</A> operation and certain 
d492 1
a492 1
        these register values by their keys. <P>
d497 1
a497 1
        SPIDER. <P>
d504 1
a504 1
<A NAME="registers"><H3>Registers</H3></A>
d508 1
a508 1
		    <DD><A HREF="man/md.html">MD</A> operation with
d513 3
a515 3
        <LI>as output resulting from an operation.
        <LI>when used as an index in a do-loop.
        <LI>by being explicitly set equal to a value or an
d519 3
a521 3
        type:<DL><DT>
                <DD>X10=3.14159
		</DL>
d526 1
a526 1
        printed on the screen. <P>
d529 1
a529 1
        SPIDER session. <P>
d531 1
a531 1
<A NAME="registers_special"><H4>Special System Registers</H4></A>
d534 1
a534 1
        between operations.     <P>
d536 1
a536 1
	The contents of special registers X0 and X9 are:<DL><DD>
d538 1
a538 1
                <TR VALIGN=TOP><TD>  X0 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Index </TD>
d541 1
a541 1
                      after each execution of the <A HREF="man/lb.html">LB</A># statement)</TD><TR>
d543 1
a543 1
                 <TR VALIGN=TOP><TD>  X9 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Error flag</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;  [0 if no error occurred and
d547 1
a547 1
		</DL>
d552 4
a555 4
           Registers may appear in <A HREF="#arithmetic">arithmetic expressions</A>,
	<A HREF="#math_functions">mathematical functions</A>,  
	as <A HREF="#registers_input">input  parameters</A>, and as  
	<A HREF="#registers_output">output parameters</A> in
d558 1
a558 1
<A NAME="registers_input"><H4>Registers [or Arithmetic Expressions] as Input Parameters</H4></A>
d562 7
a568 7
	values are solicited by operations. <P> 
                <DL><DT>Example 1:
		    <DD><A HREF="man/rt.html">RT</A> 
                    <DD>PIC001
		    <DD>PIC002 
                    <DD>X11
	</DL> 
d570 14
a583 14
	X11  are interpreted as a rotation angle.<P> 
                 <DL><DT>Example 2:
		    <DD><A HREF="man/sh.html">SH</A> 
                    <DD>PIC001
		    <DD>PIC002 
                    <DD>X11,X12
	</DL> Here the contents of X11,X12 are interpreted as
	components  of a shift vector.<P> 
                 <DL><DT>Example 3:
		    <DD><A HREF="man/sh.html">SH</A> 
                     <DD>PIC001
		    <DD>PIC002 
                    <DD>(X114.3-X10),SIN(X123.14/180.)
	</DL> 
d586 1
a586 1
	a shift vector. <P>
d590 1
a590 1
        is used, e.g.  4 for 3.8, 3 for 3.2, -4 for -4.25, etc.  <P>
d594 1
a594 1
        	<LI> Mixing of registers or  expressions  with  numbers  is  not
d598 1
a598 1
        	<LI>  In  <A HREF="#loops">DO-loops</A>,  only one register  [or register
d601 1
a601 1
                run of the <A HREF="#loops">DO-loop</A>.     
d603 8
a610 8
        	<DL><DT>Example:  
		  	<DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 X88=1,5
                  	<DD><A HREF="man/sh.html">SH</A>
                  	<DD>PIC{***X88}
                  	<DD>OUT{***X88}
                  	<DD>X11,X12
                  	<DD><A HREF="man/lb.html">LB</A>1 
		</DL>
d614 1
a614 1
        	be introduced before the operation by an <A HREF="man/rr.html">RR</A> operation. <P>
d616 10
a625 10
        	<DL><DT>Example:  
		  	<DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 X88=1,5
                  	<DD><A HREF="man/rr.html">RR</A> X11 3.3, 1.5, 6.0, -8.1, 0.0
                        <DD>  RR  X12  -7.5,  5.1, 3.2, -0.4, 8.1
                  	<DD><A HREF="man/sh.html">SH</A> F
                  	<DD>PIC{***X88}
                  	<DD>OUT{***X88}
                  	<DD>X11,X12
                  	<DD><A HREF="man/lb.html">LB</A>1
       		</DL>                                   
d627 3
a629 3
<A NAME="registers_output"><H4>Registers as Output Parameters</H4></A>
             Some operations such as <A HREF="man/fs.html">FS</A>, 
	and  <A HREF="man/pk.html">PK</A>  allow  the
d631 3
a633 3
        example, <A HREF="man/pk.html">PK</A> X11,X12.  After completion 
	of the <A HREF="man/pk.html">PK</A>  operation,
        the peak position components are contained in X11,X12.<P> 
d636 10
a645 10
        registers, consider the following sequence:<DL><DT>
                  <DD><A HREF="man/pk.html">PK</A> X11,X12
                  <DD>COR001
                  <DD>3
                  <DD><A HREF="man/sh.html">SH</A>
                  <DD>PIC001
                  <DD>NEW001
                  <DD>-X11,-X12
	          </DL>
        <A HREF="man/pk.html">PK</A> is  an  operation that searches for the peak  position
d650 1
a650 1
        integer  input, in this example by <A HREF="man/sh.html">SH</A> (SHift).  A minus sign
d655 6
a660 6
        parameters are solicited.  For example:<DL><DT>
                  <DD><A HREF="man/sh.html">SH</A>
                  <DD>PIC001
                  <DD>NEW001
                  <DD>-X11,15
		  </DL>
d663 7
a669 7
        operation, like this:<DL><DT>
                  <DD>X12=15
                  <DD><A HREF="man/sh.html">SH</A>
                  <DD>PIC001
                  <DD>NEW001
                  <DD>-X11,X12
                  </DL>                     
d673 1
a673 1
<A NAME="registers_saving"><H4>Saving and Unsaving Registers</H4></A>
d676 1
a676 1
        <A HREF="man/sr.html">SR</A>
d679 1
a679 1
         <A HREF="man/sr.html">SR</A> operation 
d681 1
a681 1
        working register area. <P>      
d684 2
a685 2
        by using the <A HREF="man/sd.html">SD</A> (Save Document) operation. A subsequent 
	<A HREF="man/ud.html">UD</A> operation 
d688 2
a689 2
        and unsaving registers, see the <A HREF="man/sd.html">SD</A> and 
        <A HREF="man/ud.html">UD</A> manual chapters.  <P>   
d691 1
a691 1
<A NAME="pocketcalc"><H3>SPIDER's Pocket Calculator</H3></A>
d693 3
a695 3
	which evaluates <A HREF="#arithmetic">arithmetic operations</A>,
	<A HREF="#expressions">expressions</A>, and
	<A HREF="#math_functions">mathematical functions</A>. 
d697 1
a697 1
<A NAME="arithmetic"><H4>Arithmetic Operations</H4></A>
d699 4
a702 4
        type:<DL><DT>   
                   <DD>2*3+5
		   </DL>
        SPIDER will then respond with '11.0000'.<P>
d705 1
a705 1
                  <DL><DD>
d712 2
a713 2
		  <TR><TD><A HREF="#math_functions">mathematical function</TD></TR>       	
		  </TABLE></DL>
d715 1
a715 1
<A NAME="expressions"><H4>Expressions</H4></A>
d718 3
a720 3
        <A HREF="man/if.html">IF</A>,  
        <A HREF="man/if_goto.html">IF...GOTO</A>, and 
        <A HREF="man/if_then.html">IF THEN</A>. 
d728 5
a732 5
                  <DL><DT>    
                  <DD>(3*(-2))*(2+6)
		 </DL>
        SPIDER would respond with '-48.0000'. <P>
        Scientific notation (i.e., 2.3E-4) is allowed. <P>
d736 5
a740 5
                  <DL><DT>
                  <DD>X11=4.1
                  <DD>2*X11
		  </DL>
        SPIDER would respond with 8.2000.  <P>  
d744 5
a748 5
                  <DL><DT>
                  <DD>X12=9.6E-2
                  <DD>X12=X12+5  
		 </DL>
        SPIDER would store in X12 the value 14.6.<P>      
d753 3
a755 3
                   <DL><DT> 
                   <DD>  *** ERROR: INVALID ARITHMETIC EXPRESSION
		   </DL>
d757 6
a762 6
                  <DL><DT>
                  <DD>2*(-6)
                  <DD>((3+6)*(7*3))**9.1
                  <DD>X11=(X12+7)*(X16/X13)
                  <DD>X11=3.4e-4*1.0
		 </DL>
d764 7
a770 7
                  <DL><DT>
                  <DD>X100          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Register number exceeds 99]
                  <DD>X12=(2+3      &nbsp;&nbsp;&nbsp;&nbsp;[Unbalanced parenthesis]
                  <DD>(2+3/6))      &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Unbalanced parenthesis]      
                  <DD>2*-6          &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Adjacent arithmetic operators]      
                  <DD>2*(-6E2)        &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[No dot in the number]
		  </DL>
d772 1
a772 1
<A NAME="math_functions"><H4>Mathematical functions</H4></A>
d774 2
a775 2
	Available mathematical functions are:<P>
            <DL><DD>
d792 1
a792 1
  	    </TABLE></DL><P>
d795 1
a795 1
            <A HREF="#expressions">valid math expression</A>.<P>
d797 1
a797 1
            in degrees.<P>
d799 7
a805 7
	Examples of valid usage:<DL><DT>
		<DD>SIN(4.5/(X5-100.))
		<DD>X10=EXP(-400./X11**2)		
		<DD>X15=X14-SIN(45./180.*X91)
		<DD>X16=SIN(45./180.*X91)
		<DD>X15=X14-COS(LON(X16))
		<DD>X16=RAN(X14)    ; <EM> Value of X14 is not changed nor is
d808 1
a808 1
		</DL>
d810 1
a810 1
<A NAME="comments"><H3>Comments</H3></A>
d814 4
a817 4
                <DL>
                <DT></DT>
		<DD>; This is a comment             </DD>
		</DL>
d819 1
a819 1
        printed out in the RESULTS file.     <P>
d825 10
a834 10
                <DL><DT></DT>
		<DD><A HREF="man/pd.html">PD</A> ; Now pad input image </DD> 
		<DD>PIC001	; From previous window            </DD> 
		<DD>PAD005	; Output will be used for FT      </DD>
		<DD>128,128	; Next power of two dimensions    </DD>
		<DD>Y		; Use average for padding         </DD>
		<DD>1,1		; Top left coord. arbitrary in    </DD>
		<DD>		; this case                       </DD>
		</DL>
         <P>           
d837 1
a837 1
        hyphens, e.g., in the input to operation <A HREF="man/as.html">AS</A>:  1-7,15-20.
d840 1
a840 1
<A NAME="loops"><H3>DO-Loops</H3></A>
d844 5
a848 5
                <DL><DT></DT>
                <DD><A HREF="man/do.html">DO</A> 
                    <A HREF="man/lb.html">LB</A>
                    &lt;L&gt;&nbsp;&nbsp; &lt;C&gt;=&lt;M&gt;,&lt;N&gt;  </DD>
		</DL>
d850 3
a852 3
                <DL><DT></DT>
                <DD><A HREF="man/lb.html">LB</A>&lt;L&gt;  </DD>
                </DL>
d854 4
a857 4
                <DL> 
		<DL>
                <DT>&lt;L&gt;</DT>
                <DD>is a one or two digit integer used for distinguishing 
d859 1
a859 1
                    DO-loops.</DD>
d861 3
a863 3
                <DT>&lt;C&gt;</DT>
                <DD>is a <A HREF="#register">register</A> 
                  for the DO-loop index.</DD>
d865 2
a866 2
                <DT>&lt;M&gt;,&lt;N&gt; 
                <DD>are positive-valued integers or registers 
d871 3
a873 3
                       &lt;M&gt; and &lt;N&gt; must be &lt; 100,000.</DD>
		</DL>
		</DL>
d877 1
a877 1
<A NAME="loops_variable"><H4>Variable Value Input in DO-Loops</H4></A>
d881 1
a881 1
		<LI>
d885 1
a885 1
                <LI>
d887 1
a887 1
                  different parameter values to the same image. <P>
d891 3
a893 3
                  <DL><DT></DT>
                  <DD>&lt;ABC&gt; {****&lt;C&gt;}  </DD>
                  </DL>
d895 4
a898 4
                  <DL><DT></DT>
                     <DL>   
                     <DT>&lt;ABC&gt;                         </DD>
                     <DD>is a file prefix,  the "*" (s) denote the
d900 4
a903 4
                     <DT>&lt;C&gt;                           </DD>
                     <DD>is the DO-loop count register defined above. </DD> 
                     </DL>
		  </DL>
d907 10
a916 10
                  <DL><DT></DT>
                  <DD><A HREF="man/do.html">DO</A>          </DD>
                      <A HREF="man/lb.html">LB</A>1 X10=1,3 </DD>
                  <DD><A HREF="man/rt.html">RT</A>          </DD>
                  <DD>PIC{***X10}                           </DD>
                  <DD>OUT{***X10}                           </DD>
                  <DD>45.  61.  78                          </DD>
                  <DD><A HREF="man/lb.html">LB</A>1         </DD>
		  </DL>
        In this example, <A HREF="man/rt.html">RT</A> 
d918 1
a918 1
        with the pictures PIC001, PIC002, and PIC003, respectively.   <P>
d926 8
a933 8
                  <DL><DT></DT>
                  <DD><A HREF="man/do.html">DO </A> LB7 X88=5,9  </DD>
                  <DD><A HREF="man/sh.html">SH</A>               </DD>
                  <DD>ALL00{***X88}                              </DD>
                  <DD>SHI00{***X88}                              </DD>
                  <DD>(15,8)                                     </DD>
                  <DD><A HREF="man/lb.html">LB</A>7              </DD>
		  </DL>
d935 1
a935 1
        each image, starting with ALL005 and ending with ALL009.<P>
d938 1
a938 1
<H2><A NAME="procedures">Running SPIDER in Procedure Mode</A></H2>
d940 1
a940 1
<A NAME="control"><H3>Procedure Control Files</H3></A>
d949 1
a949 1
        file, and no LOG file is created. <P>       
d952 1
a952 1
	'.OPERATION:', the  user  types an "at" sign <i>@@</I> 
d955 3
a957 3
        <DL><DT></DT>
         <DD>.OPERATION: @@ALIGN10
         </DL>
d963 16
a978 16
                <DL>
		<DT>Let procedure AD1 contain the following: </DT>
		<DD><A HREF="man/ad.html">AD</A>             </DD>
		<DD>PIC001                                   </DD>
		<DD>?SECOND  PICTURE  TO   BE ADDED?         </DD>
		<DD>*                                        </DD>
		<DD><A HREF="man/re.html">RE</A>             </DD>
		<DT>and let procedure B01 contain the following: </DT>
		<DD><A HREF="man/rt.html">RT</A>             </DD>
		<DD>WOW001                                   </DD>
		<DD>OUT001                                   </DD>
		<DD>180.00                                   </DD>
		<DD>@@AD1                                      </DD>
		<DD>OUT001                                   </DD>
		<DD><A HREF="man/en.html">EN</A>             </DD>
		</DL>
d987 1
a987 1
        been  <A HREF="#new">internally  defined  when the procedure was written</A>.<P>                                     
d993 2
a994 2
        appear  in the order they are defined in the <A HREF="#new">
	procedure operation sequence.</A>.<P>
d998 2
a999 2
            <LI>another procedure
            <LI>an interactive session
d1005 1
a1005 1
        the operation following the procedure call. <P>          
d1008 1
a1008 1
<A NAME="execution"><H3>Execution Rules</H3></A>
d1011 3
a1013 3
        <A HREF="../proc/">SPIDER system's procedure directory</A> 
        with the extension <I>'spi'</I>.  
        These procedures form the standard procedure library for SPIDER. <P>
d1019 2
a1020 2
        locate the given file with a <i>.spi</I> extension in the SPIDER 
        system's procedure directory. <P>
d1022 1
a1022 1
<A NAME="new"><H3>Writing New Procedures</H3></A>
d1025 1
a1025 1
            <LI>Replace any parameter in the procedure file that the  user
d1030 2
a1031 2
            <LI>Replace the <A HREF="man/en.html">EN</A> operation at 
	    the end by a <A HREF="man/re.html">RE</A> operation.
d1036 1
a1036 1
        terminal.            <P>
d1040 7
a1046 7
            <DL><DT></DT>
            <DD><A HREF="man/ad.html">AD</A>
            <DD>PIC001
            <DD>?PICTURE TO BE ADDED?
            <DD>*
            <DD><A HREF="man/re.html">RE</A>
            </DL>
d1050 2
a1051 2
        <A HREF="man/re.html">RE</A> operation, will return to the interactive mode.
        <P>
d1059 1
a1059 1
<A NAME="symbolic"><H4>Symbolic Parameters</H4></A>
d1064 38
a1101 30
            <DL>
            <DT></DT>
            <DD>; PR2 ALIGN IMAGE WITH REFERENCE
            <DD><A HREF="man/pd.html">PD</A>
            <DD>?IMAGE TO BE ALIGNED? &lt;1&gt;
            <DD>ACF001
            <DD>128,128
            <DD>N
            <DD>33,33
            <DD><A HREF="man/pd.html">PD</A>
            <DD>?REFERENCE IMAGE?
            <DD>ACF002
            <DD>128,128
            <DD>N
            <DD>33,33
            <DD><A HREF="man/ac.html">AC</A>
            <DD>ACF001
            <DD><A HREF="man/ac.html">AC</A>
            <DD>ACF002
            <DD><A HREF="man/or2.html">OR 2</A> X10
            <DD>ACF001
            <DD>ACF002
            <DD>5
            <DD><A HREF="man/rt.html">RT</A>
            <DD>?IMAGE TO BE ALIGNED?
            <DD>?OUTPUT IMAGE?
            <DD>X10
            <DD><A HREF="man/rt.html">RE</A>
            </DL>
        A special feature of SPIDER allows the user to  tie a symbolic parameter
d1104 3
a1106 3
        repeated solicitation message.  The format for the label is: &lt;N&gt;, 
        where <i> N </i> may be any one or two-digit  number. Note that the &lt;&gt; 
        brackets are necessary here to indicate a symbolic parameter label! <P>
d1109 2
a1110 2
        the second occurrence of ?IMAGE TO BE ALIGNED? may therefore
        be replaced by &lt;1&gt;, since this is the label assigned at the first 
d1113 1
a1113 1
        be automatically applied to the input. <P>
d1115 1
a1115 1
<A NAME="symbolic_var"><H4>Variable Symbolic Parameters</H4></A>
d1118 2
a1119 2
        at run time by attaching a register to it. The 
        three digits of the filename are then replaced by new digits 
d1121 54
a1174 42
        <DL>
        <DT>Example 1:</DT>
            <DD>; PR1
            <DD><A HREF="man/fr.html">FR</A>
            <DD>?ENTER FIRST IMAGE?&lt;1&gt;
            <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 X88=2,10
            <DD><A HREF="man/pr.html">PR</A>
            <DD>&lt;1&gt;X88
            <DD>N
            <DD><A HREF="man/lb.html">LB</A>1
            <DD><A HREF="man/re.html">RE</A>

        <DT>Calling sequence:</DT>
            <DD>@@PR1
            <DD>PIC001
	</DL>

        In the <A HREF="#loops">DO-loop</A>,  PIC001 will then be replaced by PIC002,
        PIC003, ...  , PIC010.<DL>

        <DT>Example 2:</DT>
            <DD>; PR2
            <DD><A HREF="man/rr.html">RR</A> X15
            <DD>?PICK OUT FILE NUMBER?
            <DD><A HREF="man/fi.html">FI</A>
            <DD>PIC{***X15}
            <DD><A HREF="man/re.html">RE</A>

        <DT>Calling sequence:
            <DD>@@PR2
            <DD>5.
	</DL>
        In this example, the operation <A HREF="man/fi.html">FI</A> is applied to PIC005.<DL>

        <DT>Example 3:
            <DD>;PR3
            <DD><A HREF="man/fr.html">FR</A>
            <DD>?ENTER ANY IMAGE OF SERIES? &lt;1&gt;
            <DD><A HREF="man/rr.html">RR</A> X10
            <DD>?PICK OUT FILE NUMBER?&lt;2&gt;
            <DD><A HREF="man/fs.html">FS</A>
            <DD>&lt;1&gt;X10
d1176 6
a1181 6
        <DT>Calling sequence:
            <DD>@@PR3
            <DD>PIC003
            <DD>20.
        </DL>          
        In this example, the operation <A HREF="man/fs.html">FS</A> is applied to PIC020.
d1183 2
a1184 2
<A NAME="symbolic_loops"><H4>Symbolic Parameters in DO-Loops</H4></A>
             Symbolic  parameters cause a transfer of the whole input line 
d1186 2
a1187 2
        number.  It is therefore possible to use the symbolic reference in 
        <A HREF="#loops">DO-loops</A>.
d1189 25
a1213 19
        <DL>
        <DT>Example:
            <DD>;PR4
            <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 X88=1,5
            <DD><A HREF="man/sh.html">SH</A>
            <DD>PIC{***X88}
            <DD>OUT{***X88}
            <DD>?ENTER SHIFT COMPONENTS?&lt;1&gt;
            <DD><A HREF="man/sh.html">SH</A>
            <DD>PAD{***X88}
            <DD>SCR{***X88}
            <DD>&lt;1&gt;
            <DD><A HREF="man/lb.html">LB</A>1
            <DD><A HREF="man/re.html">RE</A>
                   
        <DT>Calling sequence:
            <DD>@@PR4
            <DD>5,1 4,3 8,5 10,1 0,0
        </DL>
d1216 1
a1216 1
        <A HREF="man/sh.html">SH</A> operations; i.e.   
d1218 1
a1218 1
        <A HREF="#loops">DO-loops</A>.
d1220 2
a1221 2
<A NAME="proc_registers"><H3>Using Registers in Nested Procedures
        </H3></A>
d1226 2
a1227 2
	<A HREF="#argument">argument transfer</A>
        or the operation <A HREF="man/rr.html">RR</A> may be used.       
d1229 1
a1229 1
<A NAME="argument"><H3>Argument Transfer</H3></A>
d1235 3
a1237 3
            <DL><DT>
            <DD>[X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,...]
            </DL>
d1241 3
a1243 3
            <DL><DT>
            <DD>@@&lt;PROCNAME&gt;[X&lt;M1&gt;,X&lt;M2&gt;,X&lt;M3&gt;,...].
            </DL>
d1247 7
a1253 7
            <DL>
            <DT>
            <DD>X20=1
            <DD>X30=5
            <DD>X40=-4
            <DD>@@PROC[X20,X30,X40]
            </DL>
d1255 5
a1259 5
            <DL><DT>
            <DD>X20=2
            <DD>X30=-20
            <DD>X40=-2
            </DL>
d1261 8
a1268 8
            <DL><DT>
            <DD>[X10,X11,X12]
            <DD>X10=X10*2
            <DD>X11=X11*X12
            <DD>X12=X12/2
            <DD><A HREF="man/re.html">RE</A>
            </DL>
<A NAME="proc_loops"><H3>Procedure calls in DO-Loops</H3></A>
d1270 1
a1270 1
        is   called  within  a  <A HREF="#loops">DO-loop</A>.   Specifically,  if
d1272 7
a1278 7
        different  runs  of  the  <A HREF="#loops">DO-loop</A>,  they must not be
        entered as a string of numbers:<DL><DT>
            <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=1,5
            <DD>PS1
            <DD>6.5 7.3 8.1 4.9 3.3
            <DD><A HREF="man/lb.html">LB</A>1
            </DL>
d1283 8
a1290 8
	(See also <A HREF="#loops">DO-loops</A>):<DL><DT>
            <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=1,5
            <DD><DD><A HREF="man/rr.html">RR</A> X20
            <DD>6.5 7.3 8.1 4.9 3.3
            <DD>PS1
            <DD>X20
            <DD><A HREF="man/lb.html">LB</A>1
            </DL>
d1292 2
a1293 2
<HR>
<H2><A NAME="memory">Memory Allocation & Multiprocessors</A></H2>
d1295 1
a1295 3
    allocation (and deallocation) of necessary memory. The  SP_MEMALLOC
    environment variable and the  <A HREF="./man/md.html"> MD </A>  
    with 'SET MEM' <B> are no longer </B> used.<P>
d1297 1
a1297 1
    SPIDER contains directives which can be used by <I>OpenMP</I>  parallelizing
d1299 1
a1299 1
    <A HREF="./man/md.html">MD</A>  operation with 'SET MP' can be used to 
d1301 1
a1301 1
    <P>
d1303 3
a1305 3
<HR>
<H2><A NAME="unix">Submitting Batch Jobs on UNIX systems</A></H2>
    Most Unix systems have queues available for scheduling execution of
d1307 2
a1308 2
    notes on this are contained in:  
    <A HREF="batch-unix_doc.html">batch-unix_doc.html.</A>
d1310 1
a1310 1
<HR> <P><SMALL>
d1312 4
a1315 4
Last update: 27 March 2001  &nbsp;&nbsp;&nbsp;
ArDean Leith  </SMALL><P>
</BODY>
</HTML>
@


1.42
log
@*** empty log message ***
@
text
@d1008 4
a1011 3
             Standard  procedures  are  contained  in  
        <A HREF="../proc/">the  system's directory</A> with the extension 'SYS'.  
        These procedures form the standard procedure library (SPL).        <P>
d1017 2
a1018 2
        locate the given file with a <i>.SYS</I> extension in the system 
        directory. <P>
d1021 1
a1021 1
        To create a procedure file the user has to:
d1053 1
a1053 1
            may   produce   a   different   number    of    subsequent
d1058 2
a1059 2
             Frequently, one encounters  the situation where more than  
        once the same information is required in the procedure. For 
d1286 1
a1286 1
Last update: 12 March 2001  &nbsp;&nbsp;&nbsp;
@


1.41
log
@typo
.\
@
text
@d310 1
a310 1
                        corresponding to odd-length realimage data.<BR>
d317 2
a318 2
                    'R2' for 2D Real data (image).<BR>
                    'R3' for 3d Real data (volume).<BR>
d320 2
a321 2
		    'S2' for stacked 2D data (image).<BR> 'S3' for
		    stacked 3d data (volume).<BR> </DL>
d1285 1
a1285 1
Last update: 8 January 2001  &nbsp;&nbsp;&nbsp;
@


1.40
log
@typo
@
text
@d177 1
a177 1
            <DD><I> spider prj/dat @@procname 17 x11=3 x12=4<I></DD>
@


1.39
log
@*** empty log message ***
@
text
@d161 2
a162 1
            <DD> Initial procedure to be run when starting SPIDER</DD>
d165 2
a166 1
                 used by SPIDER run.</DD>
d169 2
a170 2
                 These register assignments will be inherited by
                 inital procedure. </DD>
d172 7
a178 3
            An example of a SPIDER sun will optional command line 
         parameters follows: <BR>
         <I> spider prj/dat @@procname 17 x11=3 x12=4<I>  
@


1.38
log
@note about SET MEM removal
@
text
@d24 2
a25 1
	<LI><A HREF="#input_cmd">The Command Input Status</A>
d77 1
a77 1
            	(or Procedures called from Batch Files)
d86 1
a86 2
<HR><P>
SPIDER can be run either interactively or in a procedure mode.
d88 2
a89 2
messages appearing on  the  screen.  In the procedure mode, control input
is taken from a procedure control file where it has to appear in
d96 1
a96 1
<A HREF="man/en.html">EN</A> (ENd) command.
d100 1
a100 1
                <DL><DT>
d102 1
a102 1
                <DD> &nbsp;&nbsp;&nbsp;or
d105 1
a105 8
                <BR><P>

	SPIDER will then print the some introductory information
                including:
                 <DL><DT>

                <DD>The version number and issue date for this version.
                </DL>
d107 16
a122 8
        If the PROJECT/DATA EXTENSION is not given
        on the command line,  SPIDER will then respond with:<DL><DT>
        	<DD>.ENTER PROJECT/DATA EXTENSION:  &lt;Prj&gt;/&lt;Dat&gt;
        	</DL>
             The  project  extension  &lt;Prj&gt;  consists  of  a  three  letter
        sequence,  e.g,  'GLS',  and  is used to identify 
        procedure files,  the  LOG  file,  and  the  RESULTS  file  by
        attaching this sequence to the file names as an extension.<P>   
d129 3
a131 3
             For example, an image file specified as  'ACF001'  during
        the  SPIDER  session will have as a full filename 'ACF001.SCI'
        if the above data extension 'SCI' is used.<P>   
d142 2
a143 1
             [Note, however, that the new operation <A HREF="man/nc.html">NC</A> (New  Code)
d156 21
a176 2
<A NAME="input_cmd"><H3>The Command Input Status</H3></A>
	The  system  now  asks:<DL><DT>
d180 2
a181 2
        letter commands, e.g. <A HREF="man/li.html">LI</A>
        for LIsting selected rows of an image.  A list of the commands
d189 1
a189 1
             After a command is entered, additional information needed
d222 1
a222 1
        <I> 34</I>, then the resulting filename is: <I> ABC6034</I>.
d228 9
a236 12
        There may be any number of substitution strings within a single
        filename, e.g. the following
        is a valid filename: <I> /usr/dir{*X33}/abcd{****X34} </I>, if
        the value in register X33 only contains a single digit and
        the value in X34 has less than 5 digits.  
        If the
        value to be substituted contains more digits than the number of
        astericks specified an <B> error will occur </B>.  
        <P>
        The less powerfull and more ambiguous  
        <A HREF="oldfilenamesub.html">old formalism </A> for filename 
        substitution is no longer available. <P>
d245 1
a245 1
        command.   Some  operations  with implied DO-loops continue to
d301 20
a320 25
                               following values:<DL>
                                <DT><DD>
                                'O2' for mixed radix -2 Fourier data 
                                     corresponding to odd-length real 
                                     image data.<BR>
                                'E2 for mixed radix -2 Fourier data 
                                     corresponding to even-length real 
                                     image data.<BR>
                                'O3' for mixed radix -2 Fourier data 
                                     corresponding to odd-length real 
                                     volume data.<BR>
                                'E3 for mixed radix -2 Fourier data 
                                     corresponding to even-length real 
                                     volume data.<BR>
                                'R2' for 2D Real data (image).<BR>
                                'R3' for 3d Real data (volume).<BR>

                                'S2' for stacked 2D data (image).<BR>
                                'S3' for stacked 3d data (volume).<BR>
				</DL>
                               The type code in the file label is used
                               to prevent operations inconsistent with
                               the data format from being carried out
                               (e.g., Real data cannot be inversely
                               Fourier transformed)<P>
d371 10
a380 10
	Multiple images can be stored within a single SPIDER "stack
	file".  A stack file differs from a SPIDER volume in that each
     image keeps its own full header. A stacked image is referred
     to as:  &lt;ABC&gt;&lt;###&gt;@@&lt;###&gt; where &lt;ABC&gt; is a
     sequence of alphanumeric characters and &lt;###&gt; 
     is a sequence of digits. The digits afer the '@@'
     symbol represent the image number within a stack.  Stacked images can be
     used anywhere a normal SPIDER file name would be used. 
     An example of a filename that denotes image number <I>4056</I>
     inside a stack file is: <I> fil001@@4056</I>.
d433 1
a433 1
        returns   to   the  command  input  status,  by  printing  the
d438 1
a438 1
        the  <A HREF="man/en.html">EN</A> command. 
d442 1
d461 1
a461 1
        protocol  of  the  command sequence executed, as well as lists
d548 1
a548 1
        command lines.
d655 1
a655 1
        command, like this:<DL><DT>
d669 1
a669 1
        command with the "save"  option.   Any subsequent  operations on 
d671 1
a671 1
         <A HREF="man/sr.html">SR</A> command 
d676 2
a677 2
        by using the <A HREF="man/sd.html">SD</A> (Save Document) command. A subsequent 
	<A HREF="man/ud.html">UD</A> command 
d935 1
a935 1
        sequences of commands and parameter values.  Procedure files
d986 1
a986 1
	procedure command sequence.</A>.<P>
d994 1
a994 1
             If called from the interactive mode, when a 'RE'  command
d997 1
a997 1
        the command following the procedure call. <P>          
d1021 2
a1022 2
            <LI>Replace the <A HREF="man/en.html">EN</A> command at 
	    the end by a <A HREF="man/re.html">RE</A> command.
d1041 1
a1041 1
        <A HREF="man/re.html">RE</A> command, will return to the interactive mode.
d1045 1
a1045 1
            command.  This restriction is imposed because each command
d1192 1
a1192 1
        or the command <A HREF="man/rr.html">RR</A> may be used.       
d1262 1
a1262 1
    with 'SET MEM' <B> no longer </B> used.<P>
d1264 1
a1264 1
    SPIDER contains comments which can be used by <I>OpenMP</I>  parallelizing
d1266 1
a1266 1
    <A HREF="./man/md.html"> MD </A>  operation with 'SET MP' can be used to 
d1279 1
a1279 1
Last update: 4 January 2001  &nbsp;&nbsp;&nbsp;
@


1.37
log
@*** empty log message ***
@
text
@d1248 1
a1248 3
    with 'SET MEM' <B> no longer </B> are effective in limiting memory
    allocation since we are using Fortran 90 automatic allocation for
    many arays <P>
d1265 1
a1265 1
Last update: 8 November 2000  &nbsp;&nbsp;&nbsp;
@


1.36
log
@nparg is 12 not 6 for proc. regs.
@
text
@d26 10
a35 10
		<UL>
		<LI><A HREF="#file_names">File Names</A>
		<LI><A HREF="#file_handling">File Handling</A>
		<LI><A HREF="#file_opening">File Opening</A>
		<LI><A HREF="#file_image">Image File Storage</A>
		<LI><A HREF="#file_inline">Inline Files</A>
		<LI><A HREF="#file_stack">Image Stack Files</A>
		<LI><A HREF="#file_inline_stack">Inline Stack Files</A>
		<LI><A HREF="#params">Parameter Values</A>
		</UL>
d39 5
a43 5
		<UL>
		<LI><A HREF="#file_results">RESULTS File</A>
		<LI><A HREF="#file_log">LOG File</A>
		<LI><A HREF="#file_doc">Document Files</A>
		</UL>
d45 6
a50 6
		<UL>
		<LI><A HREF="#registers_special">Special System Registers</A>
		<LI><A HREF="#registers_input">Registers [or Arithmetic Expressions] as Input Parameters</A>
		<LI><A HREF="#registers_output">Registers as Output Parameters</A>
		<LI><A HREF="#registers_saving">Saving and Unsaving Registers</A>
		</UL>
d52 5
a56 5
		<UL>
		<LI><A HREF="#arithmetic">Arithmetic Operations</A>
		<LI><A HREF="#expressions">Expressions</A>
		<LI><A HREF="#math_functions">Mathematical Functions</A>
		</UL>
d60 3
a62 3
		<UL>
		<LI><A HREF="#loops_variable">Variable Value Input in DO-Loops</A>
		</UL>
d70 5
a74 5
		<UL>
		<LI><A HREF="#symbolic">Symbolic Parameters</A>
		<LI><A HREF="#symbolic_var">Variable Symbolic Parameters</A>
		<LI><A HREF="#symbolic_loops">Symbolic Parameters in DO-Loops</A>
		</UL>
d76 1
a76 1
			(or Procedures called from Batch Files)
d101 1
a101 1
		<DD> spider
d103 2
a104 2
		<DD> spider &lt;Prj&gt;/&lt;Dat&gt;
		</DL>
d111 1
a111 3
                <DD>The version number, issue date for this version,
                and the maximum amount of run_time memory you have
                requested.
d146 1
a146 1
        directory,  different project extensions must be used.<P>              
d156 2
a157 2
		<DD>.OPERATION:
		</DL>
a429 1

d1267 1
a1267 1
Last update: 25 October 2000  &nbsp;&nbsp;&nbsp;
@


1.35
log
@removed temporary procX..  notes
@
text
@d1184 1
a1184 1
             Procedure calls may contain up to 6 register arguments if
@


1.34
log
@batches changed to procedures
@
text
@d442 1
a442 10

             [In the case of procedure operations, the system
        produces  a  temporary  file  from  each  permanent 
        procedure file used in the  session.   These  temporary  files
        contain   all   user-solicited   information,  or  information
        solicited from the next higher level procedure  file,
        as   well   as  replacements  for  symbolic  references.   The
        temporary file has the name &lt;ABN&gt;X.&lt;Prj&gt; where  &lt;ABN&gt;  is  the
        procedure file name and &lt;Prj&gt; is the project extension.] 

d501 1
a501 1
                  <DD>X10=3.14159
d793 2
a794 2
             Comment  lines  may  be  inserted  in
        procedure  files.  A comment has the form:
a1001 7
             [When  SPIDER  encounters  a  reference  to  a  
        procedure file, it creates a temporary version of it which has
        all open run-time references filled.  The name of this file is
        &lt;file-name&gt;XNNN.&lt;PRJ&gt; where NNN is some numerical 
        sequence. Looking at this temporary file  sometimes
        helps in debugging new procedure files.]

d1270 1
a1270 1
Last update: 5 September 2000  &nbsp;&nbsp;&nbsp;
@


1.33
log
@*** empty log message ***
@
text
@d57 1
a57 4
	</UL>
<LI><A HREF="#batch">Running SPIDER in Batch Mode</A>
	<UL>
	<LI><A HREF="#control">Batch Control Files</A>
d64 2
a65 1
<LI><A HREF="#procedures">Procedures</A>
d67 1
d86 4
a89 4
SPIDER can be run either interactively or in a batch mode.
Interactive means that user input on the terminal is solicited by
messages appearing on  the  screen.  In the batch mode, control input
is taken from a batch control file where it has to appear in
d121 1
a121 1
        sequence,  e.g,  'GLS',  and  is used to identify batch files,
d443 2
a444 2
             [In the case of batch or procedure operations, the system
        produces  a  temporary  file  from  each  permanent  batch  or
d447 1
a447 1
        solicited from the next higher level batch or procedure  file,
d450 1
a450 1
        batch or procedure file name and &lt;Prj&gt; is the project extension.] 
d458 1
a458 1
             During a batch session, the  RESULTS  file  contains  the
d490 1
a490 1
        protocol;  switch  on  and  off  the  execution  of  batch and
d664 1
a664 1
             At any given time during the session or  batch  run, the 
a798 49
<HR>
<H2><A NAME="batch">Running SPIDER in Batch Mode</A></H2>

<A NAME="control"><H3>Batch Control Files</H3></A>

             Batch control files are user-created files containing
        sequences of commands and parameter values.  Instead of taking
        the input from the terminal, SPIDER uses the control sequence
        as it appears in the batch file.  All output that would
        normally appear on the terminal is directed to the RESULTS
        file, and no LOG file is created. <P>       

             <A HREF="#procedures">Procedures</A>  are special batch control
        sequences that allow run-time specifications.  They  are
        formally equivalent to subroutines in FORTRAN.   

             To invoke a batch control sequence, the  user  types  the
        name of the batch file without its extension.  A batch file is
        named according to the following convention:
                  <DL>
                  <DT>                                     </DT>
                  <DD>B&lt;N&gt;&lt;M&gt;                  </DD>
		  </DL>
	where &lt;M&gt; and &lt;N&gt; are digits.<P>

        When calling a procedure from a batch file, the user puts the
        parameters  (if  any)  solicited  by  the procedure behind the
        calling statement in the same order  as  they  appear  in  the
        procedure file.  For example:
                <DL>
		<DT>Let AD1 contain the following:           </DT>
		<DD><A HREF="man/ad.html">AD</A>             </DD>
		<DD>PIC001                                   </DD>
		<DD>?SECOND  PICTURE  TO   BE ADDED?         </DD>
		<DD>*                                        </DD>
		<DD><A HREF="man/re.html">RE</A>             </DD>
		<DT>and let B01 contain the following:       </DT>
		<DD><A HREF="man/rt.html">RT</A>             </DD>
		<DD>WOW001                                   </DD>
		<DD>OUT001                                   </DD>
		<DD>180.00                                   </DD>
		<DD>AD1                                      </DD>
		<DD>OUT001                                   </DD>
		<DD><A HREF="man/en.html">EN</A>             </DD>
		</DL>
	Then '.OPERATION:  B01' will cause WOW001 to be rotated by  180  degrees,  and
        stored  in  OUT001.   OUT001  will then be added to PIC001.  SPIDER
        will ultimately return to the level of the batch file, and terminate
        the session.               
d802 1
a802 1
             Comment  lines  may  be  inserted  in  either  batch   or
d926 1
d928 1
a928 1
<H2><A NAME="procedures">Procedures</A></H2>
d930 10
a939 17
             Procedures are control sequences  stored  in  files  that
        allow   run-time   replacements   of   specified   parameters.
        Procedure files are similar to <A HREF="#batch">batch files</A>,
        except that they are named by the following 
        convention:
                  <DL><DT></DT>
		  <DD>&lt;ABCDEFGH&gt;.&lt;PRJ&gt;              </DD> 
                  </DL> 
        where  
	&lt;PRJ&gt; is the  project extension used in this session, and 
	&lt;ABCDEFGH&gt; is any sequence of alphanumeric characters 
        (up to 80 characters long) starting with an alphabetic 
        character.

        The first part of the procedure file name preceeding the SPIDER file
        extension is called the procedure name. 
        A legal procedure file name would be:
d941 7
a947 3
            <DL><DT></DT>
            <DD>ALIGN10.DAT
            </DL>
d949 29
a977 3
        To invoke a procedure, when SPIDER asks
	'.OPERATION:', the  user  types  in an '@@'  in front of the 
        procedure name:
d979 2
a980 3
            <DL><DT></DT>
            <DD>.OPERATION: @@ALIGN10
            </DL>
d982 1
a982 1
             Solicitation messages enclosed  by  question  marks  will
a987 1
            <LI>a batch command file
a990 5
        If called from a batch command file, the  commands  stored  in
        the  procedure  file  will  be  executed until a <A HREF="man/re.html">RE</A> (REturn)
        command  is  encountered.   At  that  time,  control  will  be
        returned  to  the  command following the procedure call in the
        calling batch file.<P>             
a996 7
             Procedures allow the user to specify  parameters  at  run
        time. If  called from a batch file or another procedure, the
        procedure requires parameter values in  the  order  they  have
        been  <A HREF="#new">internally  defined  when the procedure was written</A>.<P>                                     

             When called in the interactive mode, the  procedure  will
        solicit the required parameters from the terminal.
d1011 1
a1011 1
             [When  SPIDER  encounters  a  reference  to  a  batch  or
d1016 1
a1016 1
        helps in debugging new batch or procedure files.]
d1019 1
a1019 1
        To create a procedure file from a batch file, the user has to:
d1021 1
a1021 4
            <LI>Replace  the  batch  file  name  by  a  name  for  the
            procedure that follows the conventions outlined above.

            <LI>Replace any parameter in the batch file that the  user
d1034 1
a1034 1
             For example, if the following procedure were called  from
d1048 2
a1049 8
        Some restrictions exist on the definition of procedures:<P>
            <OL>
            <LI>A procedure file may not  call  a  batch  file,  since
            batch  files  are generally created for a specific purpose
            and normally run only once, whereas  procedures  are  used
            several times in different projects.

            <LI>The parameter to be specified at run time may not be a
d1053 1
a1053 1
		</OL>
d1122 1
a1122 1
            <DD>PR1
d1138 1
a1138 2

            <DD>PR2
d1153 1
a1153 1
            <DD>PR3
d1181 1
a1181 2

            <DD>PR4
d1191 2
a1192 2
        (or Procedures called from Batch Files)</H3></A>
        Registers, in calling batch or procedure  control  files,
d1286 1
a1286 1
Last update: 31 August 2000  &nbsp;&nbsp;&nbsp;
@


1.32
log
@increased registers
@
text
@d982 2
a983 2
        except that they are named by one of the two following 
        conventions:
a984 2
		  <DD>&lt;AB&gt;&lt;N&gt;.&lt;PRJ&gt;              </DD>  
		  <DD>&nbsp;&nbsp;&nbsp; or               </DD>
d987 1
a987 1
        where &lt;AB&gt; are any two letters, &lt;N&gt; is a digit, 
d989 3
a991 2
	&lt;ABCDEFGH&gt; are any 8 alphanumeric characters starting with an 
        alphabetic character,, and
a992 1

d994 2
a995 5
        extension is called the procedure name.  For example, a legal procedure
	name using the first naming convention would be:
            <DL><DT></DT>
            <DD>PR2.DAT
            </DL>
a996 1
        A legal procedure file name using the second naming convention would be:
d1001 3
a1003 6
        To invoke a procedure using the first naming convention, when SPIDER asks
	'.OPERATION:', the  user  types  in the procedure
	name, for example:                 <P>
            <DL><DT></DT>
            <DD>.OPERATION: PR2
            </DL>
a1004 2
         To invoke a procedure using the the second naming convention type  
        '@@'  in front of the procedure name:
d1045 1
a1045 1
        directory.   If  a procedure file under the name &lt;AB&gt;&lt;N&gt;.&lt;PRJ&gt;
d1047 3
a1049 2
        Only  if  no  such  procedure is found, SPIDER will attempt to
        locate the file &lt;AB&gt;&lt;N&gt;.SYS in the system directory. <P>
d1054 2
a1055 4
        &lt;AB&gt;&lt;N&gt;X.&lt;PRJ&gt;  if &lt;AB&gt;&lt;N&gt;.&lt;PRJ&gt; or &lt;AB&gt;&lt;N&gt;.SYS is the name of
        the original control  file.   Procedure  files  &lt;ABC...&gt;.&lt;PRJ&gt;
        with the new naming convention are temporarily translated into
        a file named &lt;ABC...&gt;X.&lt;PRJ&gt;.  Looking at this file  sometimes
d1337 1
a1337 1
Last update: 14 August 2000  &nbsp;&nbsp;&nbsp;
@


1.31
log
@*** empty log message ***
@
text
@d497 6
a502 4
             SPIDER has 100 system registers available, X0-X99.  These
        are  used for storing and transferring parameter values
        in batch or procedure runs.  A register can be filled in one
        of three ways:
d524 1
a524 1
        internal use, they may not be used for parameter transfer 
d1349 1
a1349 1
Last update: 4 November 1999  &nbsp;&nbsp;&nbsp;
@


1.30
log
@RNN added
@
text
@d794 3
a796 2
		<DD>X16=RAN(X14)    ; Value of X14 is not changed nor is
                                      it used for anything!
@


1.29
log
@do i=  ---> do x10
@
text
@d779 2
a780 1
            <TR><TD>RAN(&lt;Any register&gt;)   </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; Pseudo random number generator in the range from 0 to 1.</TD></TR>
@


1.28
log
@udate for interactive do-loops
@
text
@d192 2
a193 3
	HREF="#registers">registers</A> or the value of the 
        <A HREF="#loops">DO-loop</A> 
	index. Any text entered as part of a filename which is enclosed
d203 5
a207 2
        </I> and the run time contents of register X11 is the value
        <I> 34</I>, then the resulting filename is: <I> ABC6034</I>.  
a209 12
             Inside a <A HREF="#loops">DO-loop</A>, 
        the current DO-loop index value can be substituted into a
        filename.  To substitute a DO-loop index value into a file 
        name, use the sequence <I> {****&lt;C&gt} </I> where the "*" (s)
        denote the number of digits for the substitution and the "C" denotes
        a single character for the do loop index whose value is to be 
        substituted in place of the astericks.  Any index from <I> A...Z </I> 
        may be used for  substitution.  E.g. if the file name entered is 
        <I> ABC{****I} </I> and the run time value of do-loop index 
         <I> I</I> is the value <I> 34</I>, then the resulting filename is: 
         <I> ABC0034</I>.

d211 5
a215 2
        filename, e.g. on Unix in batch mode within a do-loop, the following
        is a valid filename: <I> /usr/dir{*I}/abcd{****X34} </I>. If the
d345 2
a346 2
	(LIst). This operation is useful for dumping image contents or debugging
        purposes.
d395 1
a395 1
        separated by commata or any number of blanks, and spread  out
d498 2
a499 2
        are  used for the storing and transferring of parameter values
        in batch or procedure runs.  A register can be filled  in  one
d502 2
a503 2
        <LI>as output resulting from an operation
        <LI>when used as an index in a do-loop
d523 2
a524 3
        between operations.  [Registers 1..8 were used in early SPIDER
        releases for communicating file parameters but are no longer 
        supported in the current SPIDER releases!]    <P>
d527 3
a529 1
                <TR VALIGN=TOP><TD>  X0 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Index </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;current value of the DO-loop index <BR>&nbsp;&nbsp;&nbsp;&nbsp;(updated
d537 3
d551 14
a564 8
	values are solicited by operations. <P> <DL><DT>Example 1:
		    <DD><A HREF="man/rt.html">RT</A> <DD>PIC001
		    <DD>PIC002 <DD>X11
	</DL> is a  valid  sequence:   the  contents  of  register
	X11  are interpreted as a rotation angle.<P> <DL><DT>Example
	2:
		    <DD><A HREF="man/sh.html">SH</A> <DD>PIC001
		    <DD>PIC002 <DD>X11,X12
d566 6
a571 3
	components  of a shift vector.<P> <DL><DT>Example 3:
		    <DD><A HREF="man/sh.html">SH</A> <DD>PIC001
		    <DD>PIC002 <DD>(X114.3-X10),SIN(X123.14/180.)
d593 1
a593 1
		  	<DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=1,5
d595 2
a596 2
                  	<DD>PIC{***I}
                  	<DD>OUT{***I}
d606 1
a606 1
		  	<DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=1,5
d610 2
a611 2
                  	<DD>PIC{***I}
                  	<DD>OUT{***I}
a899 3
                <DD> or </DD>
                <DD>is a one-character symbol denoting the DO-loop 
                      index.</DD>
d937 1
a937 1
                     <DD>is the DO-loop count defined above. </DD> 
d945 1
a945 1
                      <A HREF="man/lb.html">LB</A>1 I=1,3   </DD>
d947 2
a948 2
                  <DD>PIC{***I}                                </DD>
                  <DD>OUT{***I}                                </DD>
d963 6
a968 6
                  <DD><A HREF="man/do.html">DO </A> LB7 B=5,9         </DD>
                  <DD><A HREF="man/sh.html">SH</A>          </DD>
                  <DD>ALL00B                                </DD>
                  <DD>SHI00B                                </DD>
                  <DD>(15,8)                                </DD>
                  <DD><A HREF="man/lb.html">LB</A>7         </DD>
d1163 1
a1163 2
        at run time by attaching a <A HREF="#loops">DO-loop</A> 
        index or register to it. The 
d1165 1
a1165 1
        according to the current value of the register.
d1171 1
a1171 1
            <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=2,10
d1173 1
a1173 1
            <DD>&lt;1&gt;I
d1226 1
a1226 1
            <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=1,5
d1228 2
a1229 2
            <DD>PIC{***I}
            <DD>OUT{***I}
d1232 2
a1233 2
            <DD>PAD{***I}
            <DD>SCR{***I}
d1324 5
a1328 5
    allocation (and deallocation) of necessary memory. In order to prevent SPIDER
    from interfering with other simultaneous processes, the user can limit the
    memory available to SPIDER.  This limit will default to 50 MB.
    The limit can be reset by defining the Unix environmental variable SP_MEMALLOC 
    or by using the <A HREF="./man/md.html"> MD </A>  with 'SET MEM' <P>
d1330 1
a1330 1
    SPIDER contains comments which can be used by OpenMP  parallelizing
d1345 1
a1345 1
Last update: 20 October 1999  &nbsp;&nbsp;&nbsp;
@


1.27
log
@register indexes on do loops, some pic00i type stuff removed
@
text
@d208 2
a209 2
             In batch mode inside a <A HREF="#loops">DO-loop</A>, 
        the the current DO-loop index value can be substituted into a
d472 1
a472 1
        from batch loops and from the 'SD' and 'UD IC' operations.
d510 1
a510 1
        <LI>when used as an idex in a do-loop
d1343 1
a1343 1
Last update: 17 September 1999  &nbsp;&nbsp;&nbsp;
@


1.26
log
@loop index registers
@
text
@d507 1
a507 1
        of two ways:
d510 1
d533 1
a533 1
	The contents of special registers X0 and x9 are:<DL><DD>
d589 2
a590 2
                  	<DD>PIC00I
                  	<DD>OUT00I
d604 2
a605 2
                  	<DD>PIC00I
                  	<DD>OUT00I
d653 2
a654 2
             A  number  of  registers, X98-X103, are reserved for keeping  
        track  of  certain device-dependent parameters. 
d944 2
a945 2
                  <DD>PIC00I                                </DD>
                  <DD>OUT00I                                </DD>
d1189 1
a1189 1
            <DD>PICX15
d1226 2
a1227 2
            <DD>PIC00I
            <DD>OUT00I
d1230 2
a1231 2
            <DD>PAD00I
            <DD>SCR00I
d1328 2
a1329 2
    SPIDER contains comments which can be used by the parallelizing
    Fortran compiler available on SGI multiprocessor machines.  The 
d1331 1
a1331 1
    limit the number of processors used during SPIDER execution on such SGI machines. 
d1343 1
a1343 1
Last update: 27 July 1999  &nbsp;&nbsp;&nbsp;
@


1.25
log
@removed old filename substituion fromalism.
@
text
@d891 3
a905 10
        Note that registers and constants may not be mixed.  For
        instance:<DL><DT></DT>                
		  <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=X10,5
		  </DL>
        cannot be used.  Instead, use:
                  <DL><DT></DT> 
                  <DD>X11=5 </DD>
                  <DD><A HREF="man/do.html">DO</A> 
                      <A HREF="man/lb.html">LB</A>1 I=X10,X11 </DD>    
		  </DL>
d907 1
a907 1
        different labels and different index symbols. 
@


1.24
log
@do-loop pair --> set
@
text
@d226 1
a226 1
        A less powerfull and more ambiguous  
d228 1
a228 2
        substitution is still recognized but its futher use is no longer
        recommended. <P>
@


1.23
log
@removed info about special registers
@
text
@d552 18
a569 28
             Registers  or  valid  arithmetic  expressions  containing
        registers  may  be  used  wherever  integer  or floating point
        values are solicited by operations. <P>        
        <DL><DT>Example 1:
                    <DD><A HREF="man/rt.html">RT</A>
                    <DD>PIC001
                    <DD>PIC002
                    <DD>X11
	</DL>
        is a  valid  sequence:   the  contents  of  register  X11  are
        interpreted as a rotation angle.<P>     
        <DL><DT>Example 2:
                    <DD><A HREF="man/sh.html">SH</A>
                    <DD>PIC001
                    <DD>PIC002
                    <DD>X11,X12
	</DL>
        Here the contents of X11,X12 are interpreted as components  of
        a shift vector.<P>     
        <DL><DT>Example 3:
                    <DD><A HREF="man/sh.html">SH</A>
                    <DD>PIC001
                    <DD>PIC002
                    <DD>(X114.3-X10),SIN(X123.14/180.)
	</DL>
        Here each arithmetic expression is evaluated  first,  and  the
        resulting  values  are  interpreted  as  components of a shift
        vector.                <P>
d581 4
a584 3
        	<LI>  In  <A HREF="#loops">DO-loops</A>,  only  one  register  [or   register   pair,
        	respectively]  or  one  expression [or expression pair] may be
        	used.  This will be applied to each run of the <A HREF="#loops">DO-loop</A>.     
@


1.22
log
@updated
@
text
@d528 6
a533 9
             The first 10 registers, X0-X9, are  reserved  for  SPIDER
        internal use.  Currently, X0-X6 and X9 contain important values.  Since
        they  are  constantly  updated,  they  may  not  be  used  for
        parameter  transfer between operations.  [They are meant to be
        used for dynamic dimensioning and  arithmetic  adjustments  of
        images  in the course of procedure runs.  For example, padding
        of an image having arbitrary dimensions into an  image  having
        the nearest power-of-two dimensions is possible.    <P>
	The contents of these special registers are:<DL><DD>
a537 16
                <TR><TD>  X1 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;NSAM</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;number of samples of the last image opened</TD><TR>

                <TR><TD>  X2 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;NROW</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;number of rows of the last image opened</TD><TR>

               <TR><TD>  X3 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;FMAX</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;maximum of the image</TD><TR>

               <TR><TD>  X4 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;FMIN</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;minimum of the image</TD><TR>

                <TR><TD>  X5 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;AV</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;average of the image</TD><TR>

                <TR><TD>   X6 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;SIG</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;standard deviation</TD><TR>

                <TR><TD>  X7 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;NSLICE</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;number of slices in last image opened</TD><TR>

                <TR><TD>  X8 </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;NSTACK</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;number of images in stack</TD><TR>

a542 7
	             Note that FMAX, FMIN, AV, and SIG are only  available  if
        the  image has ever been searched for these values.  [Examples
        of operations that do this  computation:   
        <A HREF="man/fc.html">FC</A>, <A HREF="man/fs.html">FS</A>,
        <A HREF="man/hi.html">HI</A>, and <A HREF="man/mn.html">MN S</A>]  
	Otherwise, the values of FMAX, FMIN, and AV will remain zero, 
        and that of SIG will remain -1.  <P>
d544 1
a544 1
             Registers may appear in <A HREF="#arithmetic">arithmetic expressions</A>,
d1359 1
a1359 1
Last update: 12 April 1999  &nbsp;&nbsp;&nbsp;
@


1.21
log
@INT truncates
@
text
@d10 3
a12 2
and running of SPIDER. It also has a section that discusses 
procedures and how to write them. <A HREF="errors.html">Error
d15 2
a16 1
<A HREF="installation.html">distribution, installation and release notes</A>,
d19 1
a19 1
This guide is classified under the following headings:
d296 4
a299 2
                                'F' for radix -2 Fourier data. <BR>
                                'FE' for mixed radix -2 Fourier data 
d301 2
a302 2
                                     data.<BR>
                                'FO' for mixed radix -2 Fourier data 
d304 9
a312 2
                                     data.<BR>
                                'R' for Real data.<P>
d321 1
a321 1
                <DD>is the number of sampling points,
d341 1
a341 3
             If  the  file  represents  3-D  information,  the   third
        dimension &lt;NSLICE&gt; is listed along with &lt;NSAM&gt; and &lt;NROW&gt;.  In
        case of abnormal termination of the session, the  user  should
d357 10
a366 13
	     Many SPIDER uses involve the creation of temporary image files
	which undergo further processing later in the session.
	Computer access to these files is faster when they are kept in
	memory instead of being written out to disk.  A inline file is 
        referred to as:  &lt;_#&gt;.  Where &lt;_#&gt; is
        one to three underscore symbol(s) followed by a single digit.
        Any such file is stored in
	memory as an "inline file".  On Unix SPIDER nine inline files are
	available and they can hold any size image.   The
	inline file connotation of file names beginning with "_" can be
	toggled on/off (for testing) with a <A HREF="man/md.html">MD</A> 
        option.  An example of a filename that denotes an inline file
        number <I>2</I> is: <I>_2</I>.
d381 1
a381 1
     Inline stack files are available in Unix SPIDER and should be useful on 
d484 3
a486 2
            These are keyed, <A HREF="docfile.html">formatted</A>, sequential files  created  by
        executing  the  <A HREF="man/sd.html">SD</A> command and certain 
d566 1
a566 2
        <A HREF="man/hi.html">HI</A>, <A HREF="man/mn.html">MN S</A>,
        <A HREF="man/pr.html">PR</A>]  
d646 1
a646 1
             Some operations such as <A HREF="man/fs.html">FS</A>, <A HREF="man/or.html">OR</A>, 
d967 1
a967 1
                  <DD>&lt;ABC&gt;00&lt;C&gt;                 </DD>
d973 2
a974 2
                     <DD>is a three-character file prefix 
                              identifying the file series;   </DD>
d1175 1
a1175 1
            <DD><A HREF="man/or.html">OR</A> X10
d1385 1
a1385 1
Last update: 4 August 1998  &nbsp;&nbsp;&nbsp;
@


1.20
log
@removed menu reference
@
text
@d796 1
a796 1
            <TR><TD>INT(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; rounded up/off integer</TD></TR>
@


1.19
log
@note about RAN argument
@
text
@a6 2
<!-- HTML Document prepared by: Sibal,  Dec 1994 -->

d162 1
a162 4
        and their meanings can be obtained by entering the MEnu
        command <A HREF="man/me.html">ME</A>.<P>             

             [The menu listing is also available as an
d164 1
a164 1
        is part of this SPIDER documentation.  We recommend that you
d1357 1
a1357 1
    In Unix SPIDER most memory intensive operations now make use of run time
d1364 1
a1364 1
    Unix SPIDER contains comments which can be used by the parallelizing
d1379 1
a1379 1
Last update: 30 March 1998  &nbsp;&nbsp;&nbsp;
@


1.18
log
@arithmetic operations
@
text
@d821 2
a822 1
		<DD>X16=RAN(X14)    ; Value of X14 is not changed.
@


1.17
log
@description of RAN
@
text
@d740 3
a742 1
        standard rules of precedence.  In addition, the user may
d746 1
a746 1
                  <DD>(3*-2)*(2+6)
d748 2
a749 1
        SPIDER would respond with '-48.0000'. <P>        
d762 1
a762 1
                  <DD>X12=9.6
d775 1
a775 1
                  <DD>2*-6
d785 2
d799 1
a800 1
            <TR><TD>MOD(N1,N2)               </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; N1 modulo N2</TD></TR>
d806 1
a806 1
            <TR><TD>LN(&lt;Expression&gt;)   </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; natural log of expression</TD></TR>
d811 3
a813 2
            <A HREF="#expressions">valid math expression</A>,  
	    N1,N2  are  numbers or registers.<P>
d818 1
a818 1
		<DD> X15=X14-SIN(45./180.*X91)
d820 1
a820 1
		<DD>X15=X14-X16
@


1.16
log
@expression rules changed
@
text
@d802 1
d815 1
@


1.15
log
@removed some vax stuff
@
text
@a6 1

d712 1
a712 1
	simple <A HREF="#math_functions">mathematical functions</A>. 
d729 1
a729 2
		  <TR><TD>Square Root </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;available as 
                              <A HREF="#math_functions">mathematical function</TD></TR>       	
d736 2
a737 2
        <A HREF="man/if_goto.html">IF</A>, and 
        <A HREF="man/if_then.html">IF</A>. 
d768 1
a768 1
                   <DD>  *** INVALID EXPRESSION
d789 1
a789 1
            <TR><TD>PAD(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; next highest power of two of expression</TD></TR>
d802 1
a802 2
            <TR><TD>RAN(&lt;Dummy&gt;)       </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp; pseudo-random number from uniform (0,1) distribution</TD></TR>
	    </TABLE></DL><P>
d805 2
a806 4
            <A HREF="#registers">valid expression</A>,  
	    N1,N2  are  numbers or registers, and
            &lt;Dummy&gt; is a dummy parameter which is not  modified  by  the
            function.<P>
d810 1
a810 8
		<DD>X10=EXP(-400./X11**2)
		</DL>

        Note that the mathematical functions may only be used  in  the
        outermost  position.   They  may  not  be  used  inside  of an
        arithmetic expression.
	An example of invalid usage:
                <DL><DT>
a811 3
		</DL>
	In this case, use the sequence:
                <DL><DT>
d834 3
a836 2
                  <DL><DT>
                  <DD>B&lt;N&gt;&lt;M&gt;
d845 14
a858 14
		<DT>Let AD1 contain the following:
		<DD><A HREF="man/ad.html">AD</A>
		<DD>PIC001
		<DD>?SECOND  PICTURE  TO   BE ADDED?
		<DD>*
		<DD><A HREF="man/re.html">RE</A>
		<DT>and let B01 contain the following:
		<DD><A HREF="man/rt.html">RT</A>
		<DD>WOW001
		<DD>OUT001
		<DD>180.00
		<DD>AD1
		<DD>OUT001
		<DD><A HREF="man/en.html">EN</A>
d869 3
a871 2
                <DL><DT>
		<DD>; This is a comment
d880 8
a887 8
                <DL><DT>
		<DD><A HREF="man/pd.html">PD</A>    	; Now pad input image
		<DD>PIC001	; From previous window
		<DD>PAD005	; Output will be used for FT
		<DD>128,128	; Next power of two dimensions
		<DD>Y		; Use average for padding
		<DD>1,1		; Top left coos arbitrary in
		<DD>		; this case
d892 2
a893 2
        hyphens, e.g., in the input to operation <A HREF="man/as.html">AS</A>:  1-7,15-20.  No
        comment is allowed in this type of statement. 
d897 1
a897 1
             DO-Loops similar to those in  FORTRAN  are  available  in
d899 4
a902 2
                <DL><DT>
                <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>&lt;L&gt;&nbsp;&nbsp; &lt;C&gt;=&lt;M&gt;,&lt;N&gt;
d905 10
a914 6
                <DL><DT>
                <DD><A HREF="man/lb.html">LB</A>&lt;L&gt;<P>
        	<DD>where<DL>   
		<DT>&lt;L&gt;   <DD>is a one or two digit integer used for
                      		distinguishing the terminating label and the 
                      		associated DO-loops.<P>
d916 3
a918 2
                <DT>&lt;C&gt;   <DD>is a one-character symbol denoting the DO-loop 
                      index.<P>
d920 2
a921 1
                <DT>&lt;M&gt;,&lt;N&gt; <DD>are positive-valued integers or registers 
d926 1
a926 1
                       &lt;M&gt; and &lt;N&gt; must be &lt; 100,000.<P>
d930 1
a930 1
        instance:<DL><DT>                
d934 4
a937 3
                  <DL><DT> 
                  <DD>X11=5
                  <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=X10,X11    
d956 12
a967 8
                  <DL><DT>
                  <DD>&lt;ABC&gt;00&lt;C&gt;<P>
                  <DD>where:
                       <DL>   
		       <DT>&lt;ABC&gt; <DD>is a three-character file prefix 
                              identifying the file series;<P>
                       <DT>&lt;C&gt;  <DD>is the DO-loop count defined above.   <P>
		       </DL>
d972 8
a979 7
                  <DL><DT>
                  <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=1,3
                  <DD><A HREF="man/rt.html">RT</A>
                  <DD>PIC00I
                  <DD>OUT00I
                  <DD>45.  61.  78
                  <DD><A HREF="man/lb.html">LB</A>1
d981 2
a982 1
        In this example, <A HREF="man/rt.html">RT</A> uses the angles 45, 61  and  78  degrees
d991 7
a997 7
                  <DL><DT>
                  <DD><A HREF="man/do.html">DO </A> LB7 B=5,9
                  <DD><A HREF="man/sh.html">SH</A>
                  <DD>ALL00B
                  <DD>SHI00B
                  <DD>(15,8)
                  <DD><A HREF="man/lb.html">LB</A>7
d1009 4
a1012 4
                  <DL><DT>
		  <DD>&lt;AB&gt;&lt;N&gt;.&lt;PRJ&gt;  
		  <DD>&nbsp;&nbsp;&nbsp; or 
		  <DD>&lt;ABCDEFGH&gt;.&lt;PRJ&gt; 
d1023 3
a1025 3
                  <DL><DT>
                  <DD>PR2.DAT
		  </DL>
d1028 3
a1030 3
                  <DL><DT>
                  <DD>ALIGN10.DAT
		  </DL>
d1035 3
a1037 3
                  <DL><DT>
                  <DD>.OPERATION: PR2
		  </DL>
d1041 3
a1043 3
                  <DL><DT>
                  <DD>.OPERATION: @@ALIGN10
		  </DL>
d1050 5
a1054 5
		<OL>
                 <LI>a batch command file
                 <LI>another procedure
                 <LI>an interactive session
		</OL>
d1116 7
a1122 7
                  <DL><DT>
                  <DD><A HREF="man/ad.html">AD</A>
                  <DD>PIC001
                  <DD>?PICTURE TO BE ADDED?
                  <DD>*
                  <DD><A HREF="man/re.html">RE</A>
		 </DL>
d1146 29
a1174 28
                  <DL><DT>
                  <DD>; PR2 ALIGN IMAGE WITH REFERENCE
                  <DD><A HREF="man/pd.html">PD</A>
                  <DD>?IMAGE TO BE ALIGNED? &lt;1&gt;
                  <DD>ACF001
                  <DD>128,128
                  <DD>N
                  <DD>33,33
                  <DD><A HREF="man/pd.html">PD</A>
                  <DD>?REFERENCE IMAGE?
                  <DD>ACF002
                  <DD>128,128
                  <DD>N
                  <DD>33,33
                  <DD><A HREF="man/ac.html">AC</A>
                  <DD>ACF001
                  <DD><A HREF="man/ac.html">AC</A>
                  <DD>ACF002
                  <DD><A HREF="man/or.html">OR</A> X10
                  <DD>ACF001
                  <DD>ACF002
                  <DD>5
                  <DD><A HREF="man/rt.html">RT</A>
                  <DD>?IMAGE TO BE ALIGNED?
                  <DD>?OUTPUT IMAGE?
                  <DD>X10
                  <DD><A HREF="man/rt.html">RE</A>
		</DL>
d1192 2
a1193 1
        at run time by attaching a <A HREF="#loops">DO-loop</A> index or register to it. The 
d1195 17
a1211 14
        according to the current value of the register.<DL>
       
        <DT>Example 1:
                        <DD>; PR1
                        <DD><A HREF="man/fr.html">FR</A>
                        <DD>?ENTER FIRST IMAGE?&lt;1&gt;
                        <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=2,10
                        <DD><A HREF="man/pr.html">PR</A>
                        <DD>&lt;1&gt;I
                        <DD>N
                        <DD><A HREF="man/lb.html">LB</A>1
                        <DD><A HREF="man/re.html">RE</A>

        <DT>Calling sequence:
a1212 3
                        <DD>PR1
                        <DD>PIC001
	</DL>
d1216 7
a1222 7
        <DT>Example 2:
                        <DD>; PR2
                        <DD><A HREF="man/rr.html">RR</A> X15
                        <DD>?PICK OUT FILE NUMBER?
                        <DD><A HREF="man/fi.html">FI</A>
                        <DD>PICX15
                        <DD><A HREF="man/re.html">RE</A>
d1226 2
a1227 2
                        <DD>PR2
                        <DD>5.
d1232 7
a1238 7
                        <DD>;PR3
                        <DD><A HREF="man/fr.html">FR</A>
                        <DD>?ENTER ANY IMAGE OF SERIES? &lt;1&gt;
                        <DD><A HREF="man/rr.html">RR</A> X10
                        <DD>?PICK OUT FILE NUMBER?&lt;2&gt;
                        <DD><A HREF="man/fs.html">FS</A>
                        <DD>&lt;1&gt;X10
d1241 3
a1243 3
                        <DD>PR3
                        <DD>PIC003
                        <DD>20.
d1249 1
a1249 1
        at the time of the execution, not just the  transfer of  a  single  
d1251 1
a1251 1
        <A HREF="#loops">DO-loops</A>.<DL>
d1253 1
d1255 12
a1266 12
                        <DD>;PR4
                        <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=1,5
                        <DD><A HREF="man/sh.html">SH</A>
                        <DD>PIC00I
                        <DD>OUT00I
                        <DD>?ENTER SHIFT COMPONENTS?&lt;1&gt;
                        <DD><A HREF="man/sh.html">SH</A>
                        <DD>PAD00I
                        <DD>SCR00I
                        <DD>&lt;1&gt;
                        <DD><A HREF="man/lb.html">LB</A>1
                        <DD><A HREF="man/re.html">RE</A>
d1270 2
a1271 2
                        <DD>PR4
                        <DD>5,1 4,3 8,5 10,1 0,0
d1273 4
a1276 2
        In this example, each pair of components is  applied  to  both
        <A HREF="man/sh.html">SH</A>  operations;  i.e.   5,1 for I=1, 4,3 for I=2, etc. See
d1280 2
a1281 2
		(or Procedures called from Batch Files)</H3></A>
             Registers, in calling batch or procedure  control  files,
d1293 4
a1296 4
        and must be of the form:<DL><DT>

                  <DD>[X&lt;N1&gt;,X&lt;N2&gt;,X&lt;N3&gt;,...]
		</DL>
d1299 4
a1302 4
        registers, and must be of the form:<DL><DT>

                  <DD>@@&lt;PROCNAME&gt;[X&lt;M1&gt;,X&lt;M2&gt;,X&lt;M3&gt;,...].
		</DL>
d1305 22
a1326 20
        vice-versa.<DL><DT>

                  <DD>X20=1
                  <DD>X30=5
                  <DD>X40=-4
                  <DD>@@PROC[X20,X30,X40]
		</DL>
        will result in the values:<DL><DT>

                  <DD>X20=2
                  <DD>X30=-20
                  <DD>X40=-2
		</DL>
        if the procedure is defined as follows:<DL><DT>
                  <DD>[X10,X11,X12]
                  <DD>X10=X10*2
                  <DD>X11=X11*X12
                  <DD>X12=X12/2
                  <DD><A HREF="man/re.html">RE</A>
		</DL>
d1333 5
a1337 5
                  <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=1,5
                  <DD>PS1
                  <DD>6.5 7.3 8.1 4.9 3.3
                  <DD><A HREF="man/lb.html">LB</A>1
		</DL>
d1343 7
a1349 7
                  <DD><A HREF="man/do.html">DO</A> <A HREF="man/lb.html">LB</A>1 I=1,5
                  <DD><DD><A HREF="man/rr.html">RR</A> X20
                  <DD>6.5 7.3 8.1 4.9 3.3
                  <DD>PS1
                  <DD>X20
                  <DD><A HREF="man/lb.html">LB</A>1
		</DL>
d1374 2
a1375 2
Source: user_doc.html     &nbsp;&nbsp;&nbsp;  
Last update: 5 February 1998 &nbsp;&nbsp;&nbsp;
a1378 1

@


1.14
log
@typo
@
text
@a84 1
<LI><A HREF="#vax">Submitting Batch Jobs on VAX/VMS systems</A>
d107 1
a107 5
	if you are on a UNIX system, or:
                <DL><DT>
		<DD> $ DRIVER
		</DL>
	if you are on a VAX/VMS system.  <BR><P>
d115 1
a115 1
                requested (on Unix).
d118 1
a118 1
        On the VAX or on Unix if the PROJECT/DATA EXTENSION is not given
d190 3
a192 3
        prefix  can  contain VAX logical variables, node and directory
        information. For example, on VAX/VMS <I>DISK0:[SPIDER]A12BCDE001</I> is 
        acceptable. On Unix <I>../usr/people/myself/A12BCDE001</I> is acceptable.<P>
d362 1
a362 2
	available and they can hold any size image.  On VAX/VMS only
	two inline files are available and their size is limited.  The
a1357 4
<H2><A NAME="vax">Submitting Batch Jobs on VAX/VMS systems</A></H2>
   Notes on submitting SPIDER jobs to a VMS queue are contained in:  
   <A HREF="batch-vms_doc.html">batch-vms_doc.html.</A>
<HR>
d1366 1
a1366 1
Last update: 3 November 1997 &nbsp;&nbsp;&nbsp;
@


1.13
log
@added math fuctions tolist
@
text
@d797 14
a810 14
            <TR><TD>PAD(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute next highest power of two to expression</TD></TR>
            <TR><TD>SIN(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute sine of expression</TD></TR>
            <TR><TD>COS(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute cosine of expression</TD></TR>
            <TR><TD>EXP(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute exponential of expression</TD></TR>
            <TR><TD>LOG(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute logarithm (Base 10) of expression</TD></TR>
            <TR><TD>SQR(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute square root of expression</TD></TR>
            <TR><TD>MOD(N1,N2)               </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute N1 modulo N2</TD></TR>
            <TR><TD>INT(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute rounded up/off integer</TD></TR>
            <TR><TD>ABS(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute absolute value of expression</TD></TR>
            <TR><TD>ATA(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute arc tangent of expression(in degrees)</TD></TR>
            <TR><TD>ASI(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute arc sin of expression(in degrees)</TD></TR>
            <TR><TD>ACO(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute arc cos of expression (in degrees)</TD></TR>
            <TR><TD>LN(&lt;Expression&gt;)   </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute natural lob of expression</TD></TR>
            <TR><TD>RAN(&lt;Dummy&gt;)       </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute pseudo-random number from uniform (0,1) distribution</TD></TR>
@


1.12
log
@reg 8 set
@
text
@d806 4
d813 2
a814 1
            where  &lt;Expression&gt;  stands  for  any   <A HREF="#registers">valid   expression</A>,  
@


1.11
log
@LOG 10 clarified
@
text
@d560 2
@


1.10
log
@log 10
@
text
@d799 1
a799 1
            <TR><TD>LOG(&lt;Expression&gt;)  </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Compute logarithm of expression</TD></TR>
d804 1
a804 2
            <TR><TD>RAN(&lt;Dummy&gt;)       </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;Calculate pseudo-random number from
                                                    uniform (0,1) distribution</TD></TR>
d810 1
a810 1
            function.  The LOG function computes LOG with base 10.<P>
@


1.9
log
@added stuff for expressions
@
text
@d811 1
a811 1
            function.<P>
d1370 1
a1370 1
Last update: 29 August 1997 &nbsp;&nbsp;&nbsp;
@


1.8
log
@update date changed
@
text
@d55 1
d89 2
a90 2
SPIDER can be run either interactively  or  in  a  batch mode.
Interactive  means  that user input on the terminal is solicited by
d92 2
a93 2
is taken from  a  batch control  file  where  it  has  to  appear  in
exactly the same sequence as  in  an  interactive  session.
d715 2
a716 1
	which comprises <A HREF="#arithmetic">arithmetic operations</A> and
d737 8
d762 2
a763 3
	In addition, the  user  may
        set  a  register  equal to an expression.  For example, if the
        user typed:
@


1.7
log
@code --> extension
@
text
@d1361 1
a1361 1
Last update: 27 June 1997 &nbsp;&nbsp;&nbsp;
@


1.6
log
@*** empty log message ***
@
text
@d122 1
a122 1
        On the VAX or on Unix if the PROJECT/DATA CODE is not given
d124 1
a124 1
        	<DD>.ENTER PROJECT/DATA CODE:  &lt;Prj&gt;/&lt;Dat&gt;
d126 1
a126 1
             The  project  code  &lt;Prj&gt;  consists  of  a  three  letter
d131 1
a131 1
             The data code &lt;Dat&gt; is optional.  It consists of a  three
d138 1
a138 1
        if the above data code 'SCI' is used.<P>   
d142 2
a143 2
        name.  If no data code is given, the system uses  the  project
        code as data code.<P>                     
d151 1
a151 1
        code/data code.]<P>       
d154 1
a154 1
        directory,  different project codes must be used.<P>              
d240 1
a240 1
        with  .&lt;Dat&gt;,  where  &lt;Dat&gt;  is the data code specified at the
d464 1
a464 1
        batch or procedure file name and &lt;Prj&gt; is the project code.] 
d1004 1
a1004 1
	&lt;PRJ&gt; is the  project code used in this session, and 
@


1.5
log
@*** empty log message ***
@
text
@d15 1
a15 1
handling</A>, specialized <A HREF="documents_doc.html">techniques and tools</A>,
@


1.4
log
@*** empty log message ***
@
text
@d200 2
a201 1
	HREF="#registers">registers</A> or the value of the DO-loop
@


1.3
log
@new file name substitution added
@
text
@d291 13
a303 7
        	<DD>where:<DL>
		<DT>&lt;ABC&gt;&lt;###&gt;    <DD>is the file name.<P>
        	<DT>&lt;TITLE&gt;       <DD>is the title previously entered by the
                               user.<P>
		<DT>&lt;T&gt;           <DD>is the data type code and has the
                               following values:<DL><DT><DD>
                                'F' for radix -2 Fourier data.<P>
d306 1
a306 1
                                     data.<P>
d309 1
a309 1
                                     data.<P>
d317 20
a336 14
		<DT>&lt;NSAM&gt;,&lt;NROW&gt;,&lt;NSLICE&gt; <DD>is the number of sampling points,
                               number of rows, and number of slices in the
                               image.  In the case of Fourier transforms, 
                               the numbers correspond to those of the 
                               transformed image.<P>
     		<DT>&lt;Date&gt;,&lt;Time&gt; <DD>is the date and time of creation or
                               last alteration.<P>
     		<DT>&lt;D&gt; <DD>is the disposition of the file.  The
                               following codes are used:<DL><DT>
                                <DD>'N' if file is newly created<P>
                                'O' if file is old
				</DL><P>
     		<DT>&lt;BYTES&gt; <DD>is the number of bytes in the SPIDER header for
                                      this file<P>
@


1.2
log
@renamed errors_doc.html errors.html
@
text
@d8 1
a8 1
<!-- Document prepared by: Sibal,  Dec 1994 -->
d198 39
a236 27
             SPIDER can also substitute for a portion of the file name at run time
        using a numerical value contained in <A HREF="#registers">registers</A>
        or the value of the DO-loop index. <P>

             To substitute a register value into a file name, replace the last
        three digits &lt;###&gt of the file name with 'X' and the register 
        number.  A possible file name is &lt;ABC&gt;X&lt;##&gt; where  ##  
        is a register number between 10 and 99.  
        In this way the number of digits (subject to a minimum of 3) in the 
        register value is determined. This many digits (or characters) at 
        the end of the file name string are replaced with the  
        value from the current contents of register X&lt;##&gt;  
        E.g. if the register X11 contains the value: 234 and the 
        file name string is ABC3X10, then the resulting filename is: ABC3234.  
        (The 'X10' portion of the file name string is considered to represent 
        a part of the original file name length.) <P>

             For use in <A HREF="#loops">DO-loops</A>, the string &lt;###&gt; 
        may be replaced by  the sequence 00&lt;C&gt; where C (a single letter)
        is the <A HREF="#loops">DO-loop</A> index. In this case the number of
        digits (subject to a minimum of 3) in the DO-loop index is determined.
        This many digits (or characters) at the end of the file name
        string are replaced with the curent DO-loop index value.  
        E.g. if the current DO-loop index C has value 10 and the file name string 
        is ABC300C, then the resulting filename is: ABC3010.  (The '00C' portion
        of the file name string is considered to represent a part of the original file 
        name length.) <P>
d1348 1
a1348 1
Last update: 13 May 1997 &nbsp;&nbsp;&nbsp;
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
procedures and how to write them. <A HREF="errors_doc.html">Error
@
