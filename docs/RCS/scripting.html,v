head	1.12;
access;
symbols;
locks;
comment	@# @;


1.12
date	2017.01.20.15.35.48;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2007.09.20.15.24.57;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.20.19.58.28;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.29.14.00.18;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.29.14.00.12;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.10.17.33.56;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.05.21.23.14;	author bbaxter;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.31.14.56.15;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.01.15.16.08;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.01.15.11.32;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.31.20.00.20;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.31.19.30.00;	author leith;	state Exp;
branches;
next	;


desc
@@


1.12
log
@no agl
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
   <title>SPIDER: Using Perl/Python for Scripting</title>
</head>
<body>

<h1 align="center">Using Perl/Python for SPIDER Scripting</h1>

<p>As an alternative to SPIDER's 
  <a href= "user_doc.html#procedures">procedural operations</a>, 
  the user can control SPIDER using <i>Perl</i>, 
  <a href= "scripting2.html"><i>Python</i></a>, or <i>shell</i> scripts. 
  This is feasible because SPIDER has little connectivity between routines
  dedicated to <i>imaging operations</i> and <i>procedural
  operations</i>. To implement this capability we have included three
  new operations in SPIDER Versions 7.10+.</p>

<h3>SPIDER Operations For External Scripting</h3>

<ol>
<li><a href="man/md.html">MD</a> with the <i>PIPE</i> option will
   open a named pipe to communicate register settings from SPIDER to
   the Perl/Python script.</li>

<li><a href="man/md.html">MD</a> with the <i>TO RESULTS</i> option
   will divert the normal terminal interaction with user to the
   Results file.</li>

<li>The <a href="man/pireg.html">PIPE REG</a> operation will send
   the value of a register from SPIDER to the named pipe where it can
   be accessed from a Perl/Python script.</li>
</ol>

<h3>Scripting Notes</h3>

<ol>

<li>The output of the Perl/Python control script can be piped
directly into SPIDER. SPIDER communicates back to the control
script via a "named pipe" (also called a FIFO). This mechanism
should work in Unix and should also be adaptable for use under
Windows 2000. (The code for writing to a pipe under SGI Fortran is
non-standard and a Linux implementation may require addition of a
<i>C</i> routine to communicate with the pipe). Named pipe
communication only works for processes running on same
processor.</li>

<p></p>

<li>Some SPIDER operations take a "file name template" such as
   <i>img***</i> to access files with a uniform number of digits
   <i>e.g. img001.dat</i> in the numerical portion of the name.
   Therefore we recommend that you not try to use the simpler
   numbering convention of: <i>img1.dat ... img999.dat</i></li>

<li>We do not recommend mixing SPIDER procedures and External
   Scripting without carefull testing. It may <em>NOT</em> work as
   expected!</li>

<li>The following example is a first attempt a demonstrating usage.
   Clever Perl programmers can invent much more compact code. In
   particular, in Perl it is possible to use a second processing Perl
   script to obviate the need for the rather long: <i>spi(" ");</i>
   string which I use to transfer info to the output pipe. See an 
   <a href="scripting2.html">example in Python</a>.</li>

</ol>

<h3>Comparison of SPIDER Procedures and Perl Scripting</h3>

<p>Larger current versions of these examples are available in: 
   <a href="../proc/b01.scr">b01.scr</a>, 
   <a href="../proc/b02.scr">b02.scr</a> &amp;
   <a href="../proc/b01.perl">b01.perl</a>  
</p>

<hr>

<table border="1" cellspacing="5" cellpadding="20" valign="top">

<tr>
<th>Native SPIDER</th>
<th>Sample Perl Script</th>
</tr>

<tr>

<td valign="top">

<pre>

; file: b01.scr ArDean Leith July 2001 	 
; Usage: spider scr @@b01 	 

[testvar]=12 	          ; Set contents of: [testvar]
[testvar]                 ; Echo value of:   [testvar]	
	
IQ FI [exists]       	
b01                       ; Test existance of this file

[exists]                  ; Echo: 1 if b01.scr exists 	
	
DO [iter]=1,2             ; File loop example 	
	
   @@b02([iter],[exists])  ; Invoke SPIDER procedure 
   VM	
   echo "b02 Returned: {***[exists]} 
	
ENDDO
 		
EN





([filenum],[exists])  
; b02.scr 	

IQ FI [exists]        ; Recovers existence flag in [exists]
jnk{***[filenum]}     ; File name	

RE 
</pre>
</td>




<td>


<pre>   

#!/usr/bin/perl
# spiscript.perl (Should be executable) ArDean Leith July 2001
# Usage: spiscript.perl | spider dat

$\ = "\n";                           # Set Perl output record separator

$first = 1;                          # Flag for first pipe return

#spi("MD");           
#spi("TERM OFF");                    # Divert terminal output to RESULTS file

$pipename = "TMP_SPIDER_PIPE.pipe";  # Pipe name
print STDERR "Opening pipe: $pipename \n"; 
$FIFO = &openregpipe($pipename);     # Open pipe from SPIDER

spi("[testvar]=12");                 # Set contents of SPIDER variable: [testvar]
$regval = getreg("[testvar]");       # Retrieve SPIDER variable: [testvar]
print STDERR "  [testvar] = $regval \n";
	
spi("IQ FI [exists]");               # SPIDER pipe test
spi("spiscript.perl");               # Test existance of this file
	
$regval = getreg("[exists]");        # [exists] = 1 if spiscript.perl exists
print STDERR " [exists] = $regval \n";
		
for ($ifile=1; $ifile < 3; $ifile++) # File loop example
   {
   $iret=&b02($ifile);               # Invoke a Perl SPIDER procedure (b02)
   }
spi("EN");                           # End SPIDER session
exit;
	
	

sub b02        # A Perl SPIDER procedure example ----------------------------------
   {                                # INPUT:  File number
   local($ival,$str);
   $str = sprintf("%3.3d",$_[0]);   # SPIDER likes 001 type names
   spi("IQ FI [yes-exists]");       # Recovers information in [yesexists]
   spi("jnk$str");                  # Appends "jnk" to file number to make filename
   $ival = getreg("[yes-exists]");  # Ask SPIDER for variable: [yes-exists]
   return $ival;                    # Returns: value of variable: [yes-exists]
   }
 	
	
# My Common Perl support routines for SPIDER Usage -----------------------------
	
sub openregpipe             # Opens FIFO for SPIDER register input  ------------
  {                         # INPUT:  pipe name    (Argument #1)
  use IO::Handle;
  local($pipename,$iret);
  STDOUT->autoflush(1);
  $pipename = $_[0];        # Get pipe name from argument #1
  if (! -p $pipename)
      {$iret = system("mkfifo $pipename"); }
  open(FIFO, "+<".$pipename ) || die  $!;

  spi("MD");
  spi("PIPE");              # Opens output pipe in SPIDER
  spi($pipename);           # Name of pipe

  return FIFO;              # Returns pipe id
  }


	
sub getreg                 # Gets SPIDER register variable value from pipe -------
  {                        # INPUT: register number (argument # 1)
  local($reg,$regno,$regval);
  $\ = "\n";               # Set output record separator

  $reg = $_[0];            # Get register from argument #1 to this subroutine

  spi("PI REG");           # Tell SPIDER to put register variable value on pipe
  spi("$reg");             # Register variable wanted

  # FOR SGI USE FOLLOWING  LINE
  #($regval) = unpack("f",<FIFO>);     # Read register value from pipe

  # FOR INTEL BASED LINUX WITH SPIDER COMPILED WITH: -byteswapio USE THESE 5 LINES
  ($t0,$t1,$t2) = unpack("Nff",<FIFO>); # Read register value from pipe
  if ($first)              # I do not know why the difference or what t0 & t1 are!
     { $regval = $t1; $first = 0; }
  else
     { $regval = $t2; }

  return $regval;
  }
	
	
sub spi
  {   # Pipes argument to SPIDER after variable substitution ---------------
  #print STDERR "GOT:" . $_[0];
  local($string,$ret);
  s/"/\\"/g;                      # Substitutes: \" for: " 
  $string = $_[0];
  $ret    = eval qq/"$string"/;
  print $ret;                     # This sends string down the pipe
  }

</pre>
</td>
</tr>

</table>

<hr>
<p>
<small>Source: scripting.html &nbsp;&nbsp;&nbsp; 
   Last update: 21 Sept. 2007 &nbsp;&nbsp;&nbsp; 
   ArDean Leith
</small></p>
</body>
</html>

@


1.11
log
@changes for Linux use, reformatting, rewrite
@
text
@d246 2
a247 1
   <a href="agl.html">ArDean Leith</a></small></p>
@


1.10
log
@*** empty log message ***
@
text
@d11 7
a17 9
<a href= "user_doc.html#procedures">procedural operations</a>, 
the user can
control SPIDER using <i>Perl</i>, 
<a href= "scripting2.html"><i>Python</i></a>, or 
<i>shell</i> scripts. This
is feasible because SPIDER has little connectivity between routines
dedicated to <i>imaging operations</i> and <i>procedural
operations</i>. To implement this capability we have included three
new operations in SPIDER Versions 7.10+.</p>
d23 2
a24 2
open a named pipe to communicate register settings from SPIDER to
the Perl/Python script.</li>
d27 2
a28 2
will divert the normal terminal interaction with user to the
Results file.</li>
d31 2
a32 2
the value of a register from SPIDER to the named pipe where it can
be accessed from a Perl/Python script.</li>
d52 4
a55 4
<i>img***</i> to access files with a uniform number of digits
<i>e.g. img001.dat</i> in the numerical portion of the name.
Therefore we recommend that you not try to use the simpler
numbering convention of: <i>img1.dat ... img999.dat</i></li>
d58 2
a59 2
Scripting without carefull testing. It may <em>NOT</em> work as
expected!</li>
d62 6
a67 5
Clever Perl programmers can invent much more compact code. In
particular, in Perl it is possible to use a second processing Perl
script to obviate the need for the rather long: <i>spi(" ");</i>
string which I use to transfer info to the output pipe. See an 
<a href="scripting2.html">example in Python</a>.</li>
d72 5
a76 4
<p>Larger current versions of these examples are available in: <a
href="../proc/b01.perl">b01.perl</a> &amp; <a href=
"../proc/b01.spi">b01.spi</a>, <a href=
"../proc/b02.spi">b02.spi</a>.</p>
d79 3
a81 1
<table border="0">
a87 397
<td>;</td>
<td>#!/usr/bin/perl</td>
</tr>

<tr>
<td>; file: b01.spi ArDean Leith July 2001</td>
<td>#</td>
</tr>

<tr>
<td>;</td>
<td># b01.perl (should be executable) ArDean Leith July 2001</td>
</tr>

<tr>
<td>; Usage: spider dat @@b01</td>
<td>#</td>
</tr>

<tr>
<td>;</td>
<td># Usage: b01.perl | spider</td>
</tr>

<tr>
<td>;</td>
<td>#</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td>$\ = "\n"; # set Perl output record separator</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td>dat; # SPIDER data extension</td>
<td>spi("dat"); # SPIDER data extension</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td>$pipename = "TMP_SPIDER_PIPE.pipe"; # pipe name</td>
</tr>

<tr>
<td></td>
<td>$FIFO = &amp;openregpipe($pipename); # open pipe from
SPIDER</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td>X12=12</td>
<td>spi("X12=12");</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td>x12</td>
<td>$regval = getreg(12);</td>
</tr>

<tr>
<td></td>
<td>print STDERR "Register: 12 = $regval \n";</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td>IQ FI X11 ; SPIDER pipe test</td>
<td>spi("IQ FI X11"); # SPIDER pipe test</td>
</tr>

<tr>
<td>b01.perl ; test existance of this file</td>
<td>spi("b01.perl"); # test existance of this file</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td>$regval = getreg(11); # register #11 = 1 if b01.perl
exists</td>
</tr>

<tr>
<td>x11 ; register #11 = 1 if b01.perl exists</td>
<td>print STDERR "Register: 11 = $regval \n";</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td>DO LB1 x20=1,2 ; file loop example</td>
<td>for ($ifile=1; $ifile &lt; 3; $ifile++) #file loop example</td>
</tr>

<tr>
<td></td>
<td>{</td>
</tr>

<tr>
<td>b02[x20,x21] ; Invoke SPIDER procedure</td>
<td>$iret=&amp;b02($ifile); # invoke a Perl SPIDER procedure
(b02)</td>
</tr>

<tr>
<td>echo "b02 returned: {***x21}</td>
<td>print STDERR "b02 returned: $iret";</td>
</tr>

<tr>
<td>LB1</td>
<td>}</td>
</tr>

<tr>
<td>VM</td>
<td></td>
</tr>

<tr>
<td>EN</td>
<td>spi("EN"); # End SPIDER session</td>
</tr>

<tr>
<td></td>
<td>exit;</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td>;inside file: b02.dat</td>
<td>sub b02 # A Perl SPIDER procedure example</td>
</tr>

<tr>
<td>[x20,x21] ; A native SPIDER procedure example</td>
<td>{</td>
</tr>

<tr>
<td></td>
<td>local($ival,$str);</td>
</tr>

<tr>
<td></td>
<td>$str = sprintf("%3.3d",$_[0]); # SPIDER likes 001 type
names</td>
</tr>

<tr>
<td>IQ FI X21 ; recovers information in X21</td>
<td>spi("IQ FI X21"); #recovers information in X20</td>
</tr>

<tr>
<td>jnk{***X20}</td>
<td>spi("jnk$str");</td>
</tr>

<tr>
<td></td>
<td>$ival = getreg(21);</td>
</tr>

<tr>
<td></td>
<td>return $ival;</td>
</tr>

<tr>
<td>RE</td>
<td>}</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td>-----------</td>
<td># My Common Perl support routines for SPIDER Usage</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td>sub openregpipe # opens pipe --------------</td>
</tr>

<tr>
<td></td>
<td>{</td>
</tr>

<tr>
<td></td>
<td># INPUT:</td>
</tr>

<tr>
<td></td>
<td>use IO::Handle;</td>
</tr>

<tr>
<td></td>
<td>local($pipename,$iret);</td>
</tr>

<tr>
<td></td>
<td>STDOUT-&gt;autoflush(1);</td>
</tr>

<tr>
<td></td>
<td>$pipename=$_[0]; # pipe name</td>
</tr>

<tr>
<td></td>
<td>if(! -p $pipename) # Create pipe if needed</td>
</tr>

<tr>
<td></td>
<td>{$iret = system("mkfifo $pipename"); }</td>
</tr>

<tr>
<td></td>
<td>open(FIFO, "+&lt;".$pipename ) || die $!;</td>
</tr>

<tr>
<td></td>
<td>spi("MD");</td>
</tr>

<tr>
<td></td>
<td>spi("PIPE"); # Open output pipe in SPIDER</td>
</tr>

<tr>
<td></td>
<td>spi("$pipename");</td>
</tr>

<tr>
<td></td>
<td>return FIFO;</td>
</tr>

<tr>
<td></td>
<td>}</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td>sub getreg</td>
</tr>

<tr>
<td></td>
<td>{</td>
</tr>

<tr>
<td></td>
<td># INPUT:</td>
</tr>

<tr>
<td></td>
<td># register (argument #1)</td>
</tr>

<tr>
<td></td>
<td>local($regno,$regval);</td>
</tr>

<tr>
<td></td>
<td>$\="\n";</td>
</tr>

<tr>
<td></td>
<td>$reg=$_[0];</td>
</tr>

<tr>
<td></td>
<td>spi("PI REG"); # put register value on pipe</td>
</tr>

<tr>
<td></td>
<td>spi("$reg"); # register number</td>
</tr>
d89 1
a89 26
<tr>
<td></td>
<td>($regno,$regval) = unpack("Lfc",&lt;FIFO&gt;); # get values
from pipe</td>
</tr>

<tr>
<td></td>
<td>if ($regno != $reg)</td>
</tr>

<tr>
<td></td>
<td>{print STDERR "Register returned: $regno != Register wanted:
$reg";}</td>
</tr>

<tr>
<td></td>
<td>return $regval;</td>
</tr>

<tr>
<td></td>
<td>}</td>
</tr>
d91 1
a91 4
<tr>
<td></td>
<td></td>
</tr>
d93 2
a94 4
<tr>
<td></td>
<td></td>
</tr>
d96 17
a112 4
<tr>
<td></td>
<td></td>
</tr>
a113 4
<tr>
<td></td>
<td>sub spi</td>
</tr>
a114 5
<tr>
<td></td>
<td>{ # pipes argument to SPIDER after variable substitution
--------</td>
</tr>
a115 4
<tr>
<td></td>
<td></td>
</tr>
a116 4
<tr>
<td></td>
<td>s/"/\\"g;</td>
</tr>
d118 117
a234 4
<tr>
<td></td>
<td>$string = $_[0];</td>
</tr>
d236 2
a237 3
<tr>
<td></td>
<td>print $ret; # this sends string down the pipe</td>
a239 4
<tr>
<td></td>
<td>}</td>
</tr>
d245 2
a246 3
   Last update: 10
   July 2003 &nbsp;&nbsp;&nbsp; 
   ArDean Leith</small></p>
@


1.9
log
@xhtml
@
text
@d4 1
a4 2
<meta name="generator" content="HTML Tidy, see www.w3.org">
<title>SPIDER: Using Perl/Python for Scripting</title>
d7 1
d10 6
a15 4
<p>As an alternative to SPIDER's <a href=
"user_doc.html#procedures">procedural operations</a>, the user can
control SPIDER using <i>Perl</i>, <a href=
"scripting2.html"><i>Python</i></a>, or <i>shell</i> scripts. This
a39 3
<li style="list-style: none">
<p></p>
</li>
a50 3
<li style="list-style: none">
<p></p>

a51 1
</li>
d67 2
a68 2
string which I use to transfer info to the output pipe. See an <a
href="scripting2.html">example in Python</a>.</li>
d564 5
a568 2
<p><small>Source: scripting.html &nbsp;&nbsp;&nbsp; Last update: 10
July 2003 &nbsp;&nbsp;&nbsp; ArDean Leith</small></p>
@


1.8
log
@<>
@
text
@d1 1
d4 1
a6 1

d8 1
a8 1
<h1 align=center>Using Perl/Python for SPIDER Scripting</h1>
d10 8
a17 10
<p>
As an alternative to SPIDER's  
<a href="user_doc.html#procedures">procedural operations</a>,
the user can control SPIDER using <i>Perl</i>,  
<a href="scripting2.html"><i>Python</i></a>, or <i>shell</i> scripts.  
This is feasible because 
SPIDER has little connectivity between routines dedicated to
<i>imaging operations</i> and <i>procedural operations</i>.
To implement this capability we have included three new operations in
SPIDER Versions 7.10+.</p>
a19 15
<ol> 
<p>
<li><a href="man/md.html">MD</a> with the <i>PIPE</i> option will open
a named pipe to communicate register settings from SPIDER to the
Perl/Python script.</li></p>

<p>
<li><a href="man/md.html">MD</a> with the <i>TO RESULTS</i> option will 
divert the normal terminal interaction with user to the Results file.</li>
</p>

<p>
<li>The <a href="man/pireg.html">PIPE REG</a> operation will send the value of a
register from SPIDER to the named pipe where it can be accessed from 
a Perl/Python script.</li></p>
d21 12
d35 1
a36 1
<h3>Scripting Notes</h3>
d38 4
a41 1
<p> 
d43 24
a66 21
    directly into SPIDER.  SPIDER communicates back to the
    control script via a "named pipe" (also called a FIFO).  This
    mechanism should work in Unix and should also be adaptable for
    use under Windows 2000.  (The code for writing to a pipe under 
    SGI Fortran is non-standard and a Linux implementation may
    require addition of a <i>C</i> routine to communicate with
    the pipe).  Named pipe communication only works for processes
    running on same processor. </li></p>
<p>

<p> 
<li>Some SPIDER operations take a "file name template" such as 
    <i>img***</i> to access files with a uniform number of digits 
    <i>e.g. img001.dat</i> in
    the numerical portion of the name.  Therefore we recommend that you
    not try to use the simpler numbering convention of: 
    <i> img1.dat ... img999.dat </i></li></p>
<p>
<li>We do not recommend mixing SPIDER procedures and External Scripting
    without carefull testing.  It may <em> NOT</em> work as expected!</li>
</p>
a67 1
<p>
d69 5
a73 7
    Clever Perl programmers can invent much more compact code.  In
    particular, in Perl it is possible to use a second processing
    Perl script to obviate the need for the rather long: 
     <i>spi("  ");</i> string which I use to transfer info
     to the output pipe. See an <a href="scripting2.html">example in 
     Python</a>.</li>
</p>
a75 2


d78 493
a570 111
<p>
Larger current versions of these examples are available in:
<a href="../proc/b01.perl">b01.perl</a> &
<a href="../proc/b01.spi">b01.spi</a>,
<a href="../proc/b02.spi">b02.spi</a>.</p>
<hr></hr>
<table border=0> 
<tr>  <th> Native SPIDER </th> <th> Sample Perl Script  </th> </tr>
 
<tr> <td> ; </td><td> #!/usr/bin/perl  </td> </tr>
<tr> <td> ; file: b01.spi    ArDean Leith July 2001 </td><td> #  </td> </tr>
<tr> <td> ; </td><td> # b01.perl (should be executable)  ArDean Leith July 2001  </td> </tr>
<tr> <td> ; Usage:  spider dat @@b01 </td><td> #  </td> </tr>
<tr> <td> ; </td><td> # Usage:  b01.perl | spider   </td> </tr>
<tr> <td> ; </td><td> #  </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td>   $\ = "\n";              # set Perl output record separator  </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   dat;             # SPIDER data extension </td><td>   spi("dat");             # SPIDER data extension  </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td>   $pipename = "TMP_SPIDER_PIPE.pipe";  # pipe name  </td></tr>
<tr> <td>   </td><td>   $FIFO = &openregpipe($pipename);     # open pipe from SPIDER  </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   X12=12 </td><td>   spi("X12=12");  </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   x12  </td><td>   $regval = getreg(12);  </td></tr>
<tr> <td>   </td><td>   print STDERR "Register: 12 = $regval \n";  </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   IQ FI X11       ; SPIDER pipe test </td><td>   spi("IQ FI X11");       # SPIDER pipe test  </td></tr>
<tr> <td>   b01.perl        ; test existance of this file </td><td>   spi("b01.perl");        # test existance of this file  </td></tr>
<tr> <td>   </td><td>   </td>  </tr>
<tr> <td>   </td><td>   $regval = getreg(11);   # register #11 = 1 if b01.perl exists  </td></tr>
<tr> <td>   x11             ; register #11 = 1 if b01.perl exists </td><td>   print STDERR "Register: 11 = $regval \n";  </td></tr>
<tr> <td>   </td><td>   </td>  </tr>
<tr> <td>   </td><td>   </td>  </tr>
<tr> <td>   DO LB1 x20=1,2    ; file loop example </td><td> for ($ifile=1; $ifile < 3; $ifile++)  #file loop example
<tr> <td>   </td><td>      {   </td></tr>
<tr> <td> b02[x20,x21]  ; Invoke SPIDER procedure </td><td>      $iret=&b02($ifile);      # invoke a Perl SPIDER procedure (b02)  </td></tr>
<tr> <td>      echo "b02 returned: {***x21}  </td><td> print STDERR "b02 returned: $iret";</td></tr>
<tr> <td>LB1</td><td>      }   </td></tr>
<tr> <td>      VM  </td><td>   </td></tr>
<tr> <td>EN</td><td>   spi("EN");              # End SPIDER session  </td></tr>
<tr> <td>   </td><td>   exit;  </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   ;inside file: b02.dat </td><td> sub b02                   # A Perl SPIDER procedure example  </td></tr>
<tr> <td>   [x20,x21]   ; A native SPIDER procedure example </td><td>   {  </td></tr>
<tr> <td>   </td><td>   local($ival,$str);  </td></tr>
<tr> <td>   </td><td>   $str = sprintf("%3.3d",$_[0]); # SPIDER likes 001 type names  </td></tr>
<tr> <td>   IQ FI X21   ; recovers information in X21 </td><td>   spi("IQ FI X21");       #recovers information in X20  </td></tr>
<tr> <td>   jnk{***X20} </td><td>   spi("jnk$str");  </td></tr>
<tr> <td>   </td><td>   $ival = getreg(21);  </td></tr>
<tr> <td>   </td><td>   return $ival;  </td></tr>
<tr> <td>   RE </td><td>   }  </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>-----------</td><td>   # My Common Perl support routines for SPIDER Usage  </td></tr>
<tr> <td>   </td><td>    </td></tr>
<tr> <td>   </td><td>   sub openregpipe    # opens pipe -------------- </td></tr>
<tr> <td>   </td><td>   {  </td></tr>
<tr> <td>   </td><td>   # INPUT:  </td></tr>
<tr> <td>   </td><td>   use IO::Handle;  </td></tr>
<tr> <td>   </td><td>   local($pipename,$iret);</td></tr>
<tr> <td>   </td><td>   STDOUT->autoflush(1);</td></tr>
<tr> <td>   </td><td>   $pipename=$_[0];    # pipe name</td></tr>
<tr> <td>   </td><td>   if(! -p $pipename)  # Create pipe if needed</td></tr>
<tr> <td>   </td><td>      {$iret = system("mkfifo $pipename"); }  </td></tr>
<tr> <td>   </td><td>   open(FIFO, "+<".$pipename ) || die  $!;  </td></tr>
<tr> <td>   </td><td>   spi("MD"); </td></tr>
<tr> <td>   </td><td>   spi("PIPE");        # Open output pipe in SPIDER  </td></tr>
<tr> <td>   </td><td>   spi("$pipename"); </td></tr>
<tr> <td>   </td><td>   return FIFO;</td></tr>
<tr> <td>   </td><td>   }  </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td> sub getreg  </td></tr>
<tr> <td>   </td><td>   {</td></tr>
<tr> <td>   </td><td>   # INPUT:  </td></tr>
<tr> <td>   </td><td>   # register (argument #1)</td></tr>
<tr> <td>   </td><td>   local($regno,$regval);  </td></tr>
<tr> <td>   </td><td>   $\="\n";</td></tr>
<tr> <td>   </td><td>   $reg=$_[0];</td></tr>
<tr> <td>   </td><td>   spi("PI REG"); # put register value on pipe</td></tr>
<tr> <td>   </td><td>   spi("$reg");    # register number  </td></tr>
<tr> <td>   </td><td>   ($regno,$regval) = unpack("Lfc",&lt;FIFO&gt;); # get values from pipe  </td></tr>
<tr> <td>   </td><td>   if ($regno != $reg)  </td></tr>
<tr> <td>   </td><td>       {print STDERR "Register returned: $regno != Register wanted: $reg";}</td></tr>
<tr> <td>   </td><td>   return $regval;</td></tr>
<tr> <td>   </td><td>   }  </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td> sub spi  </td></tr>
<tr> <td>   </td><td>   {   # pipes argument to SPIDER after variable substitution --------  </td></tr>
<tr> <td>   </td><td>   </td></tr>
<tr> <td>   </td><td>   s/"/\\"g;</td></tr>
<tr> <td>   </td><td>   $string = $_[0];  </td></tr>
<tr> <td>   </td><td>   print $ret;  # this sends string down the pipe  </td></tr>
<tr> <td>   </td><td>   }</td></tr>

</table>  


<hr><p><small>
Source:      scripting.html  &nbsp;&nbsp;&nbsp;  
Last update: 10 July 2003  &nbsp;&nbsp;&nbsp;
ArDean Leith  </small></p>
d573 1
@


1.7
log
@pireg
@
text
@d169 1
a169 1
<tr> <td>   </td><td>   ($regno,$regval) = unpack("Lfc",<FIFO>); # get values from pipe  </td></tr>
@


1.6
log
@added links to python page, scripting2.html
@
text
@d33 1
a33 1
<li>The <a href="man/pi.html">PIPE REG</a> operation will send the value of a
d190 1
a190 1
Last update: 31 Oct. 2001  &nbsp;&nbsp;&nbsp;
@


1.5
log
@typo
@
text
@d12 3
a14 2
the user can control SPIDER using <i>Perl</i> and probably
<i>Python</i> or <i>shell</i> scripts.  This is feasible because 
d72 2
a73 1
     to the output pipe. </li>
d83 1
a83 1
<a href="../proc/b01.spi">b01.perl</a> &
d85 1
a85 1
<a href="../proc/b01.spi">b02.spi</a>.</p>
@


1.4
log
@*** empty log message ***
@
text
@d88 1
a88 1
<tr> <td> ; </td><td> #!/usr/binFI/perl  </td> </tr>
d188 1
a188 1
Last update: 1 August 2001  &nbsp;&nbsp;&nbsp;
@


1.3
log
@*** empty log message ***
@
text
@d81 3
a83 3
<a href="b01.spi">b01.perl</a> &
<a href="b01.spi">b01.spi</a>,
<a href="b01.spi">b02.spi</a>.</p>
@


1.2
log
@*** empty log message ***
@
text
@d7 1
a7 1
<h1 align=center>Using Perl/Python for Scripting</h1>
d23 1
a23 1
a named pipe to communicate Register settings from SPIDER to the
d46 5
a50 1
    use under Windows 2000.</li></p>
d57 1
a57 1
    the numerical portion of the name.  We recommend that you
d78 6
a84 1

d88 94
a181 86
<tr> <td> ; </td> <td> #!/usr/bin/perl  </td> </tr>
<tr> <td> ; file: b01.spi    ArDean Leith July 2001 </td> <td> #  </td> </tr>
<tr> <td> ; </td> <td> # b01.perl (should be executable)  ArDean Leith July 2001  </td> </tr>
<tr> <td> ; Usage:  spider dat @@b01 </td> <td> #  </td> </tr>
<tr> <td> ;  </td> <td> # Usage:  b01.perl | spider   </td> </tr>
<tr> <td> ; </td> <td> # Usage:  b01.perl | $spib/spider4d_tmp   </td> </tr>
<tr> <td> ; </td> <td> #  </td> </tr>
<tr> <td>  </td> <td>   </td> </tr>
<tr> <td>  </td> <td>   $\ = "\n";              # set Perl output record separator  </td> </tr>
<tr> <td>  </td> <td>   </td> </tr>
<tr> <td>   dat;             # SPIDER data extension </td> <td>   spi("dat");             # SPIDER data extension  </td> </tr>
<tr> <td>  </td> <td>   </td> </tr>
<tr> <td>  </td> <td>   $pipename = "TMP_SPIDER_PIPE.pipe";  # pipe name  </td> </tr>
<tr> <td>  </td> <td>   $FIFO = &openregpipe($pipename);     # open pipe from SPIDER  </td> </tr>
<tr> <td>  </td> <td>   </td> </tr>
<tr> <td>   X12=12 </td> <td>   spi("X12=12");  </td> </tr>
<tr> <td>  </td> <td>   </td> </tr>
<tr> <td>   x12  </td> <td>   $regval = getreg(12);  </td> </tr>
<tr> <td>  </td> <td>   print STDERR "Register: 12 = $regval \n";  </td> </tr>
<tr> <td>  </td> <td>   </td> </tr>
<tr> <td>  IQ FI X11       ; SPIDER pipe test </td> <td>   spi("IQ FI X11");       # SPIDER pipe test  </td> </tr>
<tr> <td>  b01.perl        ; test existance of this file </td> <td>   spi("b01.perl");        # test existance of this file  </td> </tr>
<tr> <td>  </td> <td>   </td>  </tr>
<tr> <td>  </td> <td>   $regval = getreg(11);   # register #11 = 1 if b01.perl exists  </td> </tr>
<tr> <td>   x11             ; register #11 = 1 if b01.perl exists </td> <td>   print STDERR "Register: 11 = $regval \n";  </td> </tr>
<tr> <td>  </td> <td>   </td>  </tr>
<tr> <td>  </td> <td>   </td>  </tr>
<tr> <td>   do lb1 x20=1,2    ; file loop example </td> <td> for ($ifile=1; $ifile < 3; $ifile++)  #file loop example
<tr> <td>   </td> <td>      {   </td> </tr>
<tr> <td> b02[x20,x21]  ; Invoke SPIDER procedure </td> <td>      $iret=&b02($ifile);      # invoke a Perl SPIDER procedure (b02)  </td> </tr>
<tr> <td>lb1</td><td>      }   </td> </tr>
<tr> <td>      VM  </td> <td>   </td> </tr>
<tr> <td>      echo "b02 returned: {***x21}  </td> <td> print STDERR "b02 returned: $iret";</td> </tr>
<tr> <td>  </td> <td>   sleep(4);               # Be sure SPIDER is finished  </td> </tr>
<tr> <td>EN</td><td>   spi("EN");              # End SPIDER session  </td> </tr>
<tr> <td>  </td> <td>   exit;  </td> </tr>
<tr> <td>  </td> <td> </td> </tr>
<tr> <td>  </td> <td> </td> </tr>
<tr> <td>  </td> <td> </td> </tr>
<tr> <td>  </td> <td> </td> </tr>
<tr> <td>  </td> <td> </td> </tr>
<tr> <td>  </td> <td> sub b02                   # A Perl SPIDER procedure example  </td> </tr>
<tr> <td>  </td> <td>   {  </td> </tr>
<tr> <td> ;inside file: b02.dat </td> <td>   local($ival,$str);  </td> </tr>
<tr> <td> [x20,x21]                   ; A native SPIDER procedure example </td> <td>   $str = sprintf("%3.3d",$_[0]); # SPIDER likes 001 type names  </td> </tr>
<tr> <td>   { </td> <td>   spi("IQ FI X20");       #recovers information in X20  </td> </tr>
<tr> <td>  </td> <td>   spi("jnk$str");  </td> </tr>
<tr> <td>  </td> <td>   $ival = getreg(20);  </td> </tr>
<tr> <td>   IQ FI X21");       ;recovers information in X20 </td> <td>   print STDERR "getreg(20) returned: $ival \n";  </td> </tr>
<tr> <td>   jnk{***X20} </td> <td>   </td> </tr>
<tr> <td>   x20 </td> <td>   return $ival;  </td> </tr>
<tr> <td>  </td> <td>   }  </td> </tr>
<tr> <td>  </td> <td>   </td> </tr>
<tr> <td>  </td> <td>   </td> </tr>
<tr> <td>   } </td> <td> # My Common Perl support routines for SPIDER Usage  </td> </tr>
<tr> <td>  </td> <td>   </td> </tr>
<tr> <td>  </td> <td> sub openregpipe  </td> </tr>
<tr> <td>   </td> <td>   # INPUT:  </td> </tr>
<tr> <td>   </td> <td>   use IO::Handle;  </td> </tr>
<tr> <td>   </td> <td>   </td> </tr>
<tr> <td>   </td> <td>   </td> </tr>
<tr> <td>   </td> <td>   </td> </tr>
<tr> <td>   </td> <td>       {$iret = system("mkfifo $pipename"); }  </td> </tr>
<tr> <td>   </td> <td>   open(FIFO, "+<".$pipename ) || die  $!;  </td> </tr>
<tr> <td>   </td> <td>   spi("MD");             </td> </tr>
<tr> <td>   </td> <td>   </td> </tr>
<tr> <td>   </td> <td>   spi("PIPE");        # opens output pipe in SPIDER  </td> </tr>
<tr> <td>   </td> <td>   </td> </tr>
<tr> <td>   </td> <td>   }  </td> </tr>
<tr> <td>   </td> <td> sub getreg  </td> </tr>
<tr> <td>   </td> <td>   # INPUT:  </td> </tr>
<tr> <td>   </td> <td>   </td> </tr>
<tr> <td>   </td> <td>   </td> </tr>
<tr> <td>   </td> <td>   </td> </tr>
<tr> <td>   </td> <td>   spi("$reg");    # register number  </td> </tr>
<tr> <td>   </td> <td>   ($regno,$regval) = unpack("Lfc",<FIFO>); # get values from pipe  </td> </tr>
<tr> <td>   </td> <td>   if ($regno != $reg)  </td> </tr>
<tr> <td>   </td> <td>      print STDERR "Register returned: " . $regno .  </td> </tr>
<tr> <td>   </td> <td>      }  </td> </tr>
<tr> <td>   </td> <td>   }  </td> </tr>
<tr> <td>   </td> <td>   </td> </tr>
<tr> <td>   </td> <td>   {   # pipes argument to SPIDER after variable substitution --------  </td> </tr>
<tr> <td>   </td> <td>    </td> </tr>
<tr> <td>   </td> <td>   $string = $_[0];  </td> </tr>
<tr> <td>   </td> <td>   print $ret;  # this sends string down the pipe  </td> </tr>
<tr> <td>   </td> <td>   </td> </tr>
d188 1
a188 1
Last update: 31 July 2001  &nbsp;&nbsp;&nbsp;
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
<title>SPIDER: Using Perl for Scripting</title>
d7 1
a7 1
<h1 align=center>Using Perl for Scripting</h1>
d22 1
a22 1
<li><a href="man/md.html">MD</a> with the <i>Pipe</i> option will open
d32 1
a32 1
<li><a href="man/pi.html">PIPE REG</a> will send the value of a
d53 1
a53 1
    the numerical portion of the name.  Thus we recommend that you
d63 2
a64 2
    Clever script programmers can invent more compact code.  In
    particular in Perl it is possible to use a second processing
d66 1
a66 1
     <i>spi("  ");</i> string which I have used to transfer info
d77 1
a77 1
<tr>  <th> Native SPIDER </th> <th> Perl Script  </th> </tr>
a85 1
<tr> <td> ; -------------------------------------------------- </td> <td> # main SPIDER code --------------------------------------------  </td> </tr>
a94 1
<tr> <td>   X12 </td> <td>   spi("X12");  </td> </tr>
d99 3
a101 3
<tr> <td>  </td> <td>   spi("IQ FI X11");       # SPIDER pipe test  </td> </tr>
<tr> <td>   IQ FI X11       ; SPIDER pipe test </td> <td>   spi("b01.perl");        # test existance of this file  </td> </tr>
<tr> <td>   b01.perl        ; test existance of this file </td> <td>   </td> </tr>
d104 8
a111 7
<tr> <td>  </td> <td>   </td> </tr>
<tr> <td>  </td> <td>   for ($ifile=1; $ifile < 3; $ifile++)  #file loop example  </td> </tr>
<tr> <td>   do lb1 x20=1,2    ; file loop example </td> <td>      {   </td> </tr>
<tr> <td>       </td> <td>      $iret=&b02($ifile);      # invoke a Perl SPIDER procedure (b02)  </td> </tr>
<tr> <td>      $iret=&b02[x20,x21] ; invoke a SPIDER procedure (b02) </td> <td>      print STDERR "b02 returned: $iret";  </td> </tr>
<tr> <td>      VM  </td> <td>      }  </td> </tr>
<tr> <td>      echo "b02 returned: {***x21}  </td> <td>   </td> </tr>
d113 1
a113 1
<tr> <td>  </td> <td>   spi("EN");              # End SPIDER session  </td> </tr>
d115 5
a119 1
<tr> <td>   EN              ; End SPIDER session </td> <td>   </td> </tr>
@
